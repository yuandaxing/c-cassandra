cscope 15 $HOME/program -q 0000001280 0000243466
	@config/config.c

1 
	~"c⁄fig.h
"

2 
	~"log.h
"

3 
	~"èbÀMëad©a.h
"

7 
	$isCommít
(*
löe
, 
Àn
)

9 if(
löe
[0] == '#')

12 
	}
}

14 
	$shouldSkù
(*
löe
, 
Àn
)

16 if(
löe
[0] ='\0' || 
Àn
 == 0 ||

17 
	`isCommít
(
löe
, 
Àn
))

20 
	}
}

22 
	$°rTrim
(*
löe
, 
Àn
, *
ch¨a˘îs
)

24 
i
 = 0, 
pos
;

25 *
p
 = 
NULL
;

26 if(!
löe
 || !
ch¨a˘îs
)  -1;

27 
i
 = 0; i < 
Àn
; i++){

28 
p
 = 
	`°rchr
(
ch¨a˘îs
, 
löe
[
i
]);

29 if(!
p
) ;

31 if(
i
 > 
Àn
){

32 
löe
[0] = '\0';

35 
pos
 = 0;

36 ;
i
 < 
Àn
; i++){

37 
löe
[
pos
++] =Üöe[
i
];

39 
löe
[
pos
] = 0;

41 
pos
--;

42 ; 
pos
 >= 0;Öos--){

43 
p
 = 
	`°rchr
(
ch¨a˘îs
, 
löe
[
pos
]);

44 if(
p
){

45 
löe
[
pos
] = '\0';

51 
	}
}

52 
	$ª£rveTK
(
tokís
 *
tks
, 
size
)

54 
√wsize
;

55 
tokí
 *
t
;

56 if(!
tks
)  -1;

57 if(
tks
->
tkSize
 -Åks->
tkCou¡
 > 
size
)  0;

59 
√wsize
 = 
tks
->
tkSize
 + 2 *
size
;

60 
t
 = (
tokí
 *)
	`ªÆloc
(
tks
->
tk
, 
√wsize
 *((token)));

61 if(
t
){

62 
tks
->
tk
 = 
t
;

63 
tks
->
tkSize
 = 
√wsize
;

67 
	}
}

68 
	$dóŒocTK
(
tokís
 *
tks
)

70 if(
tks
->
tk
Ë
	`‰ì
(tks->tk);

71 
tks
->
tk
 = 
NULL
;

73 
	}
}

74 
	$•lôe
(*
löe
, 
dñimôî
, 
tokís
 *
tks
, *
tokíDñimãr
)

76 
tkpos
, 
Àn
;

77 *
p
 = 
NULL
, *
°k
 = NULL, *
√xt
 = NULL;

78 if(!
löe
 || !
tks
 || !
tokíDñimãr
){

81 
tks
->
tkCou¡
 = 0;

84 
p
 = 
	`°rchr
(
löe
, 
dñimôî
);

85 if(!
p
){

88 if(
	`ª£rveTK
(
tks
, 1) < 0)  -1;

89 
√xt
 = 
p
 + 1;

90 *
p
 = '\0';

91 
°k
 = 
löe
;

92 
	`°rTrim
(
°k
, 
	`°æí
(°k), 
tokíDñimãr
);

93 
tkpos
 = 
tks
->
tkCou¡
;

94 
tks
->
tkCou¡
++;

95 
tks
->
tk
[
tkpos
].
°¨t
 = 
°k
;

96 
tks
->
tk
[
tkpos
].
Àn
 = 
	`°æí
(
°k
);

100 
	`°rTrim
(
√xt
, 
	`°æí
“ext), 
tokíDñimãr
);

101 
°k
 = 
√xt
;

102 
Àn
 = 
	`°æí
(
°k
);

103 
√xt
 < 
Àn
 + 
°k
){

104 if((
p
 = 
	`°rchr
(
tokíDñimãr
, *
√xt
)

105 )!
NULL
){

106 *
√xt
 = '\0';

107 
√xt
++;

110 
√xt
++;

112 if(
√xt
 =
°k
) ;

113 if(
	`ª£rveTK
(
tks
, 1) < 0)  -1;

114 
tkpos
 = 
tks
->
tkCou¡
;

115 
tks
->
tkCou¡
++;

116 
tks
->
tk
[
tkpos
].
°¨t
 = 
°k
;

117 
tks
->
tk
[
tkpos
].
Àn
 = 
	`°æí
(
°k
);

121 
	}
}

124 
	$¥ötTokís
(
tokís
 *
tks
)

126 
i
;

127 
i
 = 0; i < 
tks
->
tkCou¡
; i++){

128 
	`¥ötf
("Åokí %d: %s\n", 
i
, 
tks
->
tk
[i].
°¨t
);

130 
	}
}

132 
	$£edProc
(
tokís
 *
tks
)

134 
i
;

136 
i
 = 1; i < 
tks
->
tkCou¡
; i++){

137 if(
	`putSìd
(
tks
->
tk
[
i
].
°¨t
) < 0){

138 
	`LOG_WRITE
("set seedÉrror\n");

145 
	}
}

146 
	gcurKey•a˚
[100] = {0};

147 
	$key•a˚Proc
(
tokís
 *
tks
)

149 if(
tks
->
tkCou¡
 < 2)  -1;

150 
	`°r˝y
(
curKey•a˚
, 
tks
->
tk
[1].
°¨t
);

155 
	}
}

156 
	gcurCFID
 = 0;

157 
	$cfProc
(
tokís
 *
tks
)

160 if(!
tks
)

162 if(
tks
->
tkCou¡
 < 3)

164 if(
	`°æí
(
curKey•a˚
) == 0)

167 
	`LOG_WRITE
("c·y≥:%s\n", 
tks
->
tk
[2].
°¨t
);

168 if(
	`putMëad©aToCFMD
(
curKey•a˚
, 
tks
->
tk
[1].
°¨t
,

169 
tks
->
tk
[2].
°¨t
, 
curCFID
) < 0){

172 
curCFID
++;

175 
	}
}

176 
	$d©aP©hP‹c
(
tokís
 *
tks
)

178 
Àn
 = 0;

179 *
p
;

180 if(!
tks
 ||Åks->
tkCou¡
 < 2)

182 
Àn
 = 
	`°æí
(
tks
->
tk
[1].
°¨t
);

184 
Àn
-- > 0){

185 
p
 = &
tks
->
tk
[1].
°¨t
[
Àn
];

186 if(*
p
 == '/')

187 *
p
 = '\0';

191 if(
Àn
 >= 0){

192  
	`putD©aP©h
(
tks
->
tk
[1].
°¨t
);

196 
	}
}

198 
	$pidP©hP‹c
(
tokís
 *
tks
)

200 
Àn
 = 0;

201 *
p
;

202 if(!
tks
 ||Åks->
tkCou¡
 < 2)

204 
Àn
 = 
	`°æí
(
tks
->
tk
[1].
°¨t
);

206 
Àn
-- > 0){

207 
p
 = &
tks
->
tk
[1].
°¨t
[
Àn
];

208 if(*
p
 == '/')

209 *
p
 = '\0';

213 if(
Àn
 >= 0){

214  
	`putPidP©h
(
tks
->
tk
[1].
°¨t
);

218 
	}
}

219 
keyProc
 
	gProcLi°
[] = {

220 {"£ed", 
£edProc
},

221 {"key•a˚", 
key•a˚Proc
},

222 {"cﬁumnFamûy", 
cfProc
},

223 {"d©≠©h", 
d©aP©hP‹c
},

224 {"pid∑th", 
pidP©hP‹c
},

230 
__öô
 
	$lﬂdC⁄fig
(*
c⁄fFûe
)

233 
FILE
 *
Â
 = 
NULL
;

234 if(
	`öôDi˘CFMD
() < 0)

236 if(!(
Â
 = 
	`f›í
(
c⁄fFûe
, "r"))){

240 
buff
[1000];

242 
	`mem£t
(
buff
, 0, (buff));

243 
	`fgës
(
buff
, 1000, 
Â
Ë!
NULL
){

244 
	`°rTrim
(
buff
, 
	`°æí
(buff), " \t\n");

245 if(
	`shouldSkù
(
buff
, 
	`°æí
(buff))){

250 
tokís
 
tks
 = {0, 0, 0};

251 
i
;

253 if(
	`•lôe
(
buff
, ':', &
tks
, " \t\n") == 0){

254 
i
 = 0; 
ProcLi°
[i].
«me
 !
NULL
; i++){

255 if(
	`°rcmp
(
ProcLi°
[
i
].
«me
,

256 
tks
.
tk
[0].
°¨t
) == 0){

257 
ProcLi°
[
i
].
	`¥oc
(&
tks
);

263 
	`dóŒocTK
(&
tks
);

264 
	`mem£t
(
buff
, 0, (buff));

267 
	`f˛o£
(
Â
);

269 
	}
}

	@config/config.h

1 
	~"°dio.h
"

2 
	~"°rög.h
"

3 
	~"°dlib.h
"

4 
	~"öô.h
"

5 
	~"èbÀMëad©a.h
"

7 
	stokí
{

8 *
	m°¨t
;

9 
	mÀn
;

10 }
	ttokí
;

12 
	stokís
{

13 
tokí
 *
	mtk
;

14 
	mtkCou¡
;

15 
	mtkSize
;

16 }
	ttokís
;

18 
isCommít
(*
löe
, 
Àn
);

19 
shouldSkù
(*
löe
, 
Àn
);

20 
°rTrim
(*
löe
, 
Àn
, *
ch¨a˘îs
);

21 
ª£rveTK
(
tokís
 *
tks
, 
size
);

22 
dóŒocTK
(
tokís
 *
tks
);

23 
•lôe
(*
löe
, 
dñimôî
, 
tokís
 *
tks
, *
tokeDñimãr
);

25 
¥ötTokís
(
tokís
 *
tks
);

30 (*
	tProc
)(
	ttokís
 *
	ttks
);

31 
	skeyProc
{

32 *
«me
;

33 
Proc
 
¥oc
;

34 }
	tkeyProc
;

38 
__öô
 
	`lﬂdC⁄fig
(*
c⁄fFûe
);

	@config/tableMetadata.c

1 
	~"èbÀMëad©a.h
"

2 
	~"di˘.h
"

3 
	~"°rög.h
"

4 
	~"°dlib.h
"

5 
	~"log.h
"

9 
	$cfmdHash
(c⁄° *
key
)

11 c⁄° 
cﬁumnFamûyMëad©a
 *
cfm
 = (c⁄° cﬁumnFamûyMëad©®*)
key
;

12  
	`di˘GíHashFun˘i⁄
((c⁄° *)
cfm
->
key•a˚Name
,

13 
	`°æí
(
cfm
->
key•a˚Name
)) ^

14 
	`di˘GíHashFun˘i⁄
((c⁄° *)
cfm
->
cfName
,

15 
	`°æí
(
cfm
->
cfName
));

16 
	}
}

18 
	$cfmdCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
)

20 c⁄° 
cﬁumnFamûyMëad©a
 *
cf1
 = 
NULL
, *
cf2
 = NULL;

21 
cf1
 = (c⁄° 
cﬁumnFamûyMëad©a
 *)
key1
;

22 
cf2
 = (c⁄° 
cﬁumnFamûyMëad©a
 *)
key2
;

23  
	`°rcmp
(
cf1
->
key•a˚Name
, 
cf2
->keyspaceName) == 0 &&

24 
	`°rcmp
(
cf1
->
cfName
, 
cf2
->cfName) == 0;

25 
	}
}

27 
	$‰ìCFM
(
cﬁumnFamûyMëad©a
 *
cfmd
)

29 if(
cfmd
){

30 if(
cfmd
->
key•a˚Name
Ë
	`‰ì
(cfmd->keyspaceName);

31 if(
cfmd
->
cfName
Ë
	`‰ì
(cfmd->cfName);

32 
	`‰ì
(
cfmd
);

34 
	}
}

35 
	$keyDe°ru˘‹
(*
¥ivd©a
, *
key
)

37 
cﬁumnFamûyMëad©a
 *
cfmd
 = (cﬁumnFamûyMëad©®*)
key
;

38 if(
cfmd
)

39 
	`‰ìCFM
(
cfmd
);

40 
	}
}

43 
di˘Ty≥
 
	gcfmTy≥
 = {
cfmdHash
, 
NULL
, NULL, 
cfmdCom∑ª
,

44 
keyDe°ru˘‹
,
NULL
};

48 
di˘
 *
	gg_cfmDi˘
 = 
NULL
;

49 
__öô
 
	$öôDi˘CFMD
()

51 if(
g_cfmDi˘
)  -1;

53 
g_cfmDi˘
 = 
	`di˘Cª©e
(&
cfmTy≥
, 
NULL
);

55 if(
g_cfmDi˘
)  0;

58 
	}
}

59 
	$putCFMDToTabÀ
(
cﬁumnFamûyMëad©a
 *
cfmd
)

61 if(!
cfmd
 || !
g_cfmDi˘
){

64 if(
	`di˘Add
(
g_cfmDi˘
, (*)
cfmd
, 
NULL
Ë=
DICT_ERR
){

68 
	}
}

69 
	$putMëad©aToCFMD
(*
key•a˚Name
, *
cfName
,

70 *
ty≥
, 
cfID
)

72 
cﬁumnFamûyMëad©a
 *
cfmd
 = 
NULL
;

74 if(!(
cfmd
 = (
cﬁumnFamûyMëad©a
 *)
	`ˇŒoc
((columnFamilyMetadata)

78 if(!(
cfmd
->
key•a˚Name
 = 
	`°rdup
(keyspaceName)) ||

79 !(
cfmd
->
cfName
 = 
	`°rdup
(cfName))){

80 
	`‰ìHópCFMD
(
cfmd
);

83 
cfmd
->
ty≥
 = (
	`°rcmp
—y≥, "°™d¨d"Ë=0Ë? 
°™d¨d
 : 
su≥r
;

84 
cfmd
->
cfID
 = cfID;

86 if(
	`putCFMDToTabÀ
(
cfmd
) < 0){

87 
	`‰ìHópCFMD
(
cfmd
);

91 
	}
}

92 
cﬁumnFamûyMëad©a
 *
	$födCFMëaD©a
(*
key•a˚Name
, *
cfName
)

94 if(!
key•a˚Name
 || !
cfName
 || !
g_cfmDi˘
)

95  
NULL
;

97 
cﬁumnFamûyMëad©a
 
cfm
;

98 
cfm
.
key•a˚Name
 = keyspaceName;

99 
cfm
.
cfName
 = cfName;

101 
di˘E¡ry
 *
de
 = 
	`di˘Föd
(
g_cfmDi˘
, &
cfm
);

102 if(!
de
Ë 
NULL
;

104  (
cﬁumnFamûyMëad©a
*)
	`di˘GëE¡ryKey
(
de
);

105 
	}
}

107 
	$‰ìHópCFMD
(
cﬁumnFamûyMëad©a
 *
cfm
)

109 
	`‰ìCFM
(
cfm
);

110 
	}
}

111 
	$‰ìHópAŒCFMD
()

113 if(
g_cfmDi˘
){

114 
	`di˘Rñó£
(
g_cfmDi˘
);

116 
g_cfmDi˘
 = 
NULL
;

118 
	}
}

120 
	$‰ìFromTabÀ
(*
key•a˚Name
, *
cfName
)

122 if(!
key•a˚Name
 || !
cfName
 || !
g_cfmDi˘
)

124 
cﬁumnFamûyMëad©a
 
cfmd
;

125 
cfmd
.
key•a˚Name
 = keyspaceName;

126 
cfmd
.
cfName
 = cfName;

128 if(
	`di˘Dñëe
(
g_cfmDi˘
,(*)&
cfmd
Ë=
DICT_ERR
)

132 
	}
}

135 
	$gëCFCou¡
(*
cou¡
)

137 
ªt
 = 0;

138 if(!
g_cfmDi˘
 || !
cou¡
)  -1;

139 
ªt
 = 
	`di˘Size
(
g_cfmDi˘
);

140 *
cou¡
 = 
ªt
;

142 
	}
}

146 
fûeLoˇti⁄
 
	gÊ
;

147 
	$gëD©aP©h
(c⁄° **
dp
)

149 if(!
dp
 || !
Ê
.
d©aP©h
)  -1;

150 *
dp
 = 
Ê
.
d©aP©h
;

152 
	}
}

153 
	$putD©aP©h
(c⁄° *
p
)

155 if(!
p
)

157 if(!(
Ê
.
d©aP©h
 = 
	`°rdup
(
p
)))

160 
	}
}

161 
	$putPidP©h
(c⁄° *
p
)

163 if(!
p
)

165 if(!(
Ê
.
pidP©h

	`°rdup
(
p
)))

168 
	}
}

169 
	$gëPidP©h
(c⁄° **
µ
)

171 if(!
µ
 || !
Ê
.
pidP©h
)  -1;

172 *
µ
 = 
Ê
.
pidP©h
;

174 
	}
}

175 
time_t
 
	$gëCurTime
()

177  
	`time
(0);

178 
	}
}

180 
£ed
 
	gg_sd
;

181 
	$putSìd
(*
£ed
)

183 if(!
£ed
)  -1;

184 if(
g_sd
.
£edCou¡
 >g_sd.
size
){

185 if(!(
g_sd
.
p
 = (**)
	`ªÆloc
(g_sd.p,

186 (*)*(
g_sd
.
size
 + 10))))

188 
g_sd
.
size
 += 10;

190 if(!(
g_sd
.
p
[g_sd.
£edCou¡
++] = 
	`°rdup
(
£ed
)))

193 
	}
}

195 
	$dóŒocSìd
()

197 
i
;

198 
i
 = 0; i< 
g_sd
.
£edCou¡
; i++)

199 
	`‰ì
(
g_sd
.
p
[
i
]);

200 
	`‰ì
(
g_sd
.
p
);

202 
	}
}

203 
	$¥ötTabÀMëad©a
()

205 
di˘Iãøt‹
 *
di
 = 
NULL
;

206 
di˘E¡ry
 *
de
 = 
NULL
;

207 
i
;

209 if(!(
di
 = 
	`di˘GëIãøt‹
(
g_cfmDi˘
))){

210 
	`LOG_WRITE
("oom");

214 
de
 = 
	`di˘Next
(
di
);

215 
de
){

216 
cﬁumnFamûyMëad©a
 *
cfmd
 = (cﬁumnFamûyMëad©®*)
	`di˘GëE¡ryKey
(
de
);

217 
	`LOG_WRITE
("key•a˚Name:%†cfName:%†ty≥:%†cfID:%d\n", 
cfmd
->
key•a˚Name
,

218 
cfmd
->
cfName
, cfmd->
ty≥
 =
°™d¨d
 ? "°™d¨d" : "su≥r", cfmd->
cfID
);

219 
de
 = 
	`di˘Next
(
di
);

222 
	`di˘Rñó£Iãøt‹
(
di
);

224 
	`LOG_WRITE
("d©≠©h:%†pid∑th:%s\n", 
Ê
.
d©aP©h
, fl.
pidP©h
);

226 
i
 = 0; i < 
g_sd
.
£edCou¡
; i++){

227 
	`LOG_WRITE
("%d sìd:%s\n", 
i
, 
g_sd
.
p
[i]);

229 
	}
}

	@config/tableMetadata.h

1 #i‚de‡
_TABLEMETADATA_H_


2 
	#_TABLEMETADATA_H_


	)

3 
	~"°dio.h
"

4 
	~"time.h
"

5 
	~"öô.h
"

6 
	~"di˘.h
"

10 
	ecfTy≥
{
	m°™d¨d
, 
	msu≥r
};

12 
	scﬁumnFamûyMëad©a
{

13 *
	mkey•a˚Name
;

14 *
	mcfName
;

15 
cfTy≥
 
	mty≥
;

16 
	mcfID
;

17 }
	tcﬁumnFamûyMëad©a
;

19 
di˘
 *
g_cfmDi˘
;

21 
cfmdHash
(c⁄° *
key
);

22 
cfmdCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

25 
öôDi˘CFMD
();

26 
putCFMDToTabÀ
(
cﬁumnFamûyMëad©a
 *
cfm
);

27 
putMëad©aToCFMD
(*
key•a˚Name
, *
cfName
, *
ty≥
, 
cfID
);

28 
cﬁumnFamûyMëad©a
 *
födCFMëaD©a
(*
key•a˚Name
, *
cfName
);

29 
‰ìHópCFMD
(
cﬁumnFamûyMëad©a
 *
cfm
);

30 
‰ìHópAŒCFMD
();

31 
‰ìFromTabÀ
(*
key•a˚Name
, *
cfName
);

32 
gëCFCou¡
(*
cou¡
);

36 
	sfûeLoˇti⁄
{

37 *
	md©aP©h
;

38 *
	mpidP©h
;

39 *
	mc⁄figP©h
;

40 *
	mŸhîP©h
;

41 }
	tfûeLoˇti⁄
;

43 
gëD©aP©h
(c⁄° **
dp
);

44 
putD©aP©h
(c⁄° *
p
);

45 
putPidP©h
(c⁄° *
p
);

46 
gëPidP©h
(c⁄° **
µ
);

47 
time_t
 
gëCurTime
();

49 
	s£ed
{

50 **
	mp
;

51 
	m£edCou¡
;

52 
	msize
;

53 }
	t£ed
;

55 
£ed
 
g_sd
;

56 
putSìd
(*
£ed
);

57 
dóŒocSìd
();

61 
¥ötTabÀMëad©a
();

	@config/test.c

1 
	~"c⁄fig.h
"

2 
	#TEST_LEN
 10

	)

4 
	glöe
[
TEST_LEN
][100] =

18 
	$Àak
()

20 *
p
 = 
NULL
;

21 
p
 = (*)
	`mÆloc
((20));

23 
	}
}

24 
	$maö
()

26 
	`Àak
();

42 
	`öôDi˘CFMD
();

43 
	`lﬂdC⁄fig
("./cassandra.conf");

44 
	`¥ötTabÀMëad©a
();

46 
	}
}

	@db/adlist.c

32 
	~<°dlib.h
>

33 
	~"adli°.h
"

34 
	~"zmÆloc.h
"

41 
li°
 *
	$li°Cª©e
()

43 
li°
 *list;

45 i‡((
li°
 = 
	`zmÆloc
((*li°))Ë=
NULL
)

46  
NULL
;

47 
li°
->
hód
 =Üi°->
èû
 = 
NULL
;

48 
li°
->
Àn
 = 0;

49 
li°
->
dup
 = 
NULL
;

50 
li°
->
‰ì
 = 
NULL
;

51 
li°
->
m©ch
 = 
NULL
;

52  
li°
;

53 
	}
}

58 
	$li°Rñó£
(
li°
 *list)

60 
Àn
;

61 
li°Node
 *
cuºít
, *
√xt
;

63 
cuºít
 = 
li°
->
hód
;

64 
Àn
 = 
li°
->len;

65 
Àn
--) {

66 
√xt
 = 
cuºít
->next;

67 i‡(
li°
->
‰ì
Ëli°->
	`‰ì
(
cuºít
->
vÆue
);

68 
	`z‰ì
(
cuºít
);

69 
cuºít
 = 
√xt
;

71 
	`z‰ì
(
li°
);

72 
	}
}

80 
li°
 *
	$li°AddNodeHód
(
li°
 *li°, *
vÆue
)

82 
li°Node
 *
node
;

84 i‡((
node
 = 
	`zmÆloc
((*node))Ë=
NULL
)

85  
NULL
;

86 
node
->
vÆue
 = value;

87 i‡(
li°
->
Àn
 == 0) {

88 
li°
->
hód
 =Üi°->
èû
 = 
node
;

89 
node
->
¥ev
 =Çode->
√xt
 = 
NULL
;

91 
node
->
¥ev
 = 
NULL
;

92 
node
->
√xt
 = 
li°
->
hód
;

93 
li°
->
hód
->
¥ev
 = 
node
;

94 
li°
->
hód
 = 
node
;

96 
li°
->
Àn
++;

97  
li°
;

98 
	}
}

106 
li°
 *
	$li°AddNodeTaû
(
li°
 *li°, *
vÆue
)

108 
li°Node
 *
node
;

110 i‡((
node
 = 
	`zmÆloc
((*node))Ë=
NULL
)

111  
NULL
;

112 
node
->
vÆue
 = value;

113 i‡(
li°
->
Àn
 == 0) {

114 
li°
->
hód
 =Üi°->
èû
 = 
node
;

115 
node
->
¥ev
 =Çode->
√xt
 = 
NULL
;

117 
node
->
¥ev
 = 
li°
->
èû
;

118 
node
->
√xt
 = 
NULL
;

119 
li°
->
èû
->
√xt
 = 
node
;

120 
li°
->
èû
 = 
node
;

122 
li°
->
Àn
++;

123  
li°
;

124 
	}
}

130 
	$li°DñNode
(
li°
 *li°, 
li°Node
 *
node
)

132 i‡(
node
->
¥ev
)

133 
node
->
¥ev
->
√xt
 =Çode->next;

135 
li°
->
hód
 = 
node
->
√xt
;

136 i‡(
node
->
√xt
)

137 
node
->
√xt
->
¥ev
 =Çode->prev;

139 
li°
->
èû
 = 
node
->
¥ev
;

140 i‡(
li°
->
‰ì
Ëli°->
	`‰ì
(
node
->
vÆue
);

141 
	`z‰ì
(
node
);

142 
li°
->
Àn
--;

143 
	}
}

149 
li°Iãr
 *
	$li°GëIãøt‹
(
li°
 *li°, 
dúe˘i⁄
)

151 
li°Iãr
 *
ôî
;

153 i‡((
ôî
 = 
	`zmÆloc
((*ôî))Ë=
NULL
)  NULL;

154 i‡(
dúe˘i⁄
 =
AL_START_HEAD
)

155 
ôî
->
√xt
 = 
li°
->
hód
;

157 
ôî
->
√xt
 = 
li°
->
èû
;

158 
ôî
->
dúe˘i⁄
 = direction;

159  
ôî
;

160 
	}
}

163 
	$li°Rñó£Iãøt‹
(
li°Iãr
 *
ôî
) {

164 
	`z‰ì
(
ôî
);

165 
	}
}

168 
	$li°Rewöd
(
li°
 *list) {

169 
li°
->
ôî
.
√xt
 =Üi°->
hód
;

170 
li°
->
ôî
.
dúe˘i⁄
 = 
AL_START_HEAD
;

171 
	}
}

173 
	$li°RewödTaû
(
li°
 *list) {

174 
li°
->
ôî
.
√xt
 =Üi°->
èû
;

175 
li°
->
ôî
.
dúe˘i⁄
 = 
AL_START_TAIL
;

176 
	}
}

192 
li°Node
 *
	$li°Next
(
li°Iãr
 *
ôî
)

194 
li°Node
 *
cuºít
 = 
ôî
->
√xt
;

196 i‡(
cuºít
 !
NULL
) {

197 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
)

198 
ôî
->
√xt
 = 
cuºít
->next;

200 
ôî
->
√xt
 = 
cuºít
->
¥ev
;

202  
cuºít
;

203 
	}
}

206 
li°Node
 *
	$li°Yõld
(
li°
 *list) {

207  
	`li°Next
(&
li°
->
ôî
);

208 
	}
}

218 
li°
 *
	$li°Dup
(
li°
 *
‹ig
)

220 
li°
 *
c›y
;

221 
li°Iãr
 *
ôî
;

222 
li°Node
 *
node
;

224 i‡((
c›y
 = 
	`li°Cª©e
()Ë=
NULL
)

225  
NULL
;

226 
c›y
->
dup
 = 
‹ig
->dup;

227 
c›y
->
‰ì
 = 
‹ig
->free;

228 
c›y
->
m©ch
 = 
‹ig
->match;

229 
ôî
 = 
	`li°GëIãøt‹
(
‹ig
, 
AL_START_HEAD
);

230 (
node
 = 
	`li°Next
(
ôî
)Ë!
NULL
) {

231 *
vÆue
;

233 i‡(
c›y
->
dup
) {

234 
vÆue
 = 
c›y
->
	`dup
(
node
->value);

235 i‡(
vÆue
 =
NULL
) {

236 
	`li°Rñó£
(
c›y
);

237 
	`li°Rñó£Iãøt‹
(
ôî
);

238  
NULL
;

241 
vÆue
 = 
node
->value;

242 i‡(
	`li°AddNodeTaû
(
c›y
, 
vÆue
Ë=
NULL
) {

243 
	`li°Rñó£
(
c›y
);

244 
	`li°Rñó£Iãøt‹
(
ôî
);

245  
NULL
;

248 
	`li°Rñó£Iãøt‹
(
ôî
);

249  
c›y
;

250 
	}
}

261 
li°Node
 *
	$li°SórchKey
(
li°
 *li°, *
key
)

263 
li°Iãr
 *
ôî
;

264 
li°Node
 *
node
;

266 
ôî
 = 
	`li°GëIãøt‹
(
li°
, 
AL_START_HEAD
);

267 (
node
 = 
	`li°Next
(
ôî
)Ë!
NULL
) {

268 i‡(
li°
->
m©ch
) {

269 i‡(
li°
->
	`m©ch
(
node
->
vÆue
, 
key
)) {

270 
	`li°Rñó£Iãøt‹
(
ôî
);

271  
node
;

274 i‡(
key
 =
node
->
vÆue
) {

275 
	`li°Rñó£Iãøt‹
(
ôî
);

276  
node
;

280 
	`li°Rñó£Iãøt‹
(
ôî
);

281  
NULL
;

282 
	}
}

289 
li°Node
 *
	$li°Index
(
li°
 *li°, 
ödex
) {

290 
li°Node
 *
n
;

292 i‡(
ödex
 < 0) {

293 
ödex
 = (-index)-1;

294 
n
 = 
li°
->
èû
;

295 
ödex
-- && 
n
Ë¿n->
¥ev
;

297 
n
 = 
li°
->
hód
;

298 
ödex
-- && 
n
Ë¿n->
√xt
;

300  
n
;

301 
	}
}

	@db/adlist.h

31 #i‚de‡
__ADLIST_H__


32 
	#__ADLIST_H__


	)

36 
	sli°Node
 {

37 
li°Node
 *
	m¥ev
;

38 
li°Node
 *
	m√xt
;

39 *
	mvÆue
;

40 } 
	tli°Node
;

42 
	sli°Iãr
 {

43 
li°Node
 *
	m√xt
;

44 
	mdúe˘i⁄
;

45 } 
	tli°Iãr
;

47 
	sli°
 {

48 
li°Node
 *
	mhód
;

49 
li°Node
 *
	mèû
;

50 *(*
	mdup
)(*
	m±r
);

51 (*
	m‰ì
)(*
	m±r
);

52 (*
	mm©ch
)(*
	m±r
, *
	mkey
);

53 
	mÀn
;

54 
li°Iãr
 
	môî
;

55 } 
	tli°
;

58 
	#li°Lígth
(
l
Ë(÷)->
Àn
)

	)

59 
	#li°Fú°
(
l
Ë(÷)->
hód
)

	)

60 
	#li°La°
(
l
Ë(÷)->
èû
)

	)

61 
	#li°PªvNode
(
n
Ë(“)->
¥ev
)

	)

62 
	#li°NextNode
(
n
Ë(“)->
√xt
)

	)

63 
	#li°NodeVÆue
(
n
Ë(“)->
vÆue
)

	)

65 
	#li°SëDupMëhod
(
l
,
m
Ë(÷)->
dup
 = (m))

	)

66 
	#li°SëFªeMëhod
(
l
,
m
Ë(÷)->
‰ì
 = (m))

	)

67 
	#li°SëM©chMëhod
(
l
,
m
Ë(÷)->
m©ch
 = (m))

	)

69 
	#li°GëDupMëhod
(
l
Ë(÷)->
dup
)

	)

70 
	#li°GëFªe
(
l
Ë(÷)->
‰ì
)

	)

71 
	#li°GëM©chMëhod
(
l
Ë(÷)->
m©ch
)

	)

74 
li°
 *
li°Cª©e
();

75 
li°Rñó£
(
li°
 *list);

76 
li°
 *
li°AddNodeHód
÷i° *li°, *
vÆue
);

77 
li°
 *
li°AddNodeTaû
÷i° *li°, *
vÆue
);

78 
li°DñNode
(
li°
 *li°, 
li°Node
 *
node
);

79 
li°Iãr
 *
li°GëIãøt‹
(
li°
 *li°, 
dúe˘i⁄
);

80 
li°Node
 *
li°Next
(
li°Iãr
 *
ôî
);

81 
li°Rñó£Iãøt‹
(
li°Iãr
 *
ôî
);

82 
li°
 *
li°Dup
÷i° *
‹ig
);

83 
li°Node
 *
li°SórchKey
(
li°
 *li°, *
key
);

84 
li°Node
 *
li°Index
(
li°
 *li°, 
ödex
);

85 
li°Rewöd
(
li°
 *list);

86 
li°RewödTaû
(
li°
 *list);

87 
li°Node
 *
li°Yõld
(
li°
 *list);

90 
	#AL_START_HEAD
 0

	)

91 
	#AL_START_TAIL
 1

	)

	@db/auxiRBtree.h

14 
	~"åì.h
"

15 
	~"°dio.h
"

22 
	#AUXIL_RB_TREE
(
d©a_ty≥
, 
hód_ty≥
, 
lök
, 
cmp
) \

23 
	`RB_HEAD
(
hód_ty≥
, 
d©a_ty≥
); \

24 
	`RB_PROTOTYPE
(
hód_ty≥
, 
d©a_ty≥
, 
lök
, 
cmp
);\

25 
	`RB_GENERATE
(
hód_ty≥
, 
d©a_ty≥
, 
lök
, 
cmp
);

	)

27 
	#GENERATE_OPS_DATA
(
›sSë_ty≥
, 
hód_ty≥
, 
hód_«me
, 
d©a_ty≥
, 
lök
, 
cmp
) \

28 
	s›sSë_ty≥
{ \

29 
hód_ty≥
 
hód_«me
; \

30 
d©a_ty≥
 *(*
ªmove
)(
hód_ty≥
 *, data_type *); \

31 
d©a_ty≥
 *(*
ö£π
)(
hód_ty≥
 *, data_type *); \

32 
d©a_ty≥
 *(*
föd
)(
hód_ty≥
 *, data_type *); \

33 
d©a_ty≥
 *(*
√xt
)(data_type *); \

34 
d©a_ty≥
 *(*
mömax
)(
hód_ty≥
 *, ); \

35 }
	t›sSë_ty≥
;

	)

37 
	#RB_TREE_GENERATE
(
›sSë_ty≥
, 
›sSë_«me
, 
d©a_ty≥
, 
hód_ty≥
, 
hód_«me
, 
lök
, 
cmp
) \

38 
	`AUXIL_RB_TREE
(
d©a_ty≥
, 
hód_ty≥
, 
lök
, 
cmp
) \

39 
	`GENERATE_OPS_DATA
(
›sSë_ty≥
, 
hód_ty≥
, 
hód_«me
, 
d©a_ty≥
, 
lök
, 
cmp
) \

40 
›sSë_ty≥
 
›sSë_«me
 = { {
NULL
}, \

41 
hód_ty≥
##
_RB_REMOVE
, \

42 
hód_ty≥
##
_RB_INSERT
,\

43 
hód_ty≥
##
_RB_FIND
, \

44 
hód_ty≥
##
_RB_NEXT
,\

45 
hód_ty≥
##
_RB_MINMAX
,\

46 }

	)

	@db/bloomFilter.c

1 
	~"bloomFûãr.h
"

2 
	~"£rülize.h
"

5 
	$hash
(*
d©a
, 
Àngth
, 
£ed
)

7 
m
 = 0x5bd1e995;

8 
r
 = 24;

9 
i
;

10 
h
 = 
£ed
 ^ 
Àngth
;

11 
Àn_4
 = 
Àngth
 >> 2;

13 
i
 = 0; i < 
Àn_4
; i++)

15 
i_4
 = 
i
 << 2;

16 
k
 = 
d©a
[
i_4
 + 3];

17 
k
 = k << 8;

18 
k
 = k | (
d©a
[
i_4
 + 2] & 0xff);

19 
k
 = k << 8;

20 
k
 = k | (
d©a
[
i_4
 + 1] & 0xff);

21 
k
 = k << 8;

22 
k
 = k | (
d©a
[
i_4
 + 0] & 0xff);

23 
k
 *
m
;

24 
k
 ^(k >> 
r
) & 0xff;

25 
k
 *
m
;

26 
h
 *
m
;

27 
h
 ^
k
;

31 
Àn_m
 = 
Àn_4
 << 2;

32 
À·
 = 
Àngth
 - 
Àn_m
;

34 i‡(
À·
 != 0) {

35 i‡(
À·
 >= 3) {

36 
h
 ^(Ë
d©a
[
Àngth
 - 3] << 16;

38 i‡(
À·
 >= 2) {

39 
h
 ^(Ë
d©a
[
Àngth
 - 2] << 8;

41 i‡(
À·
 >= 1) {

42 
h
 ^(Ë
d©a
[
Àngth
 - 1];

45 
h
 *
m
;

48 
h
 ^= (h >> 13) & 0x7ff;

49 
h
 *
m
;

50 
h
 ^= (h >> 15) & 0x1ff;

52  
h
;

53 
	}
}

56 
	$gëBloomFûãr
(
hashCou¡
, 
°rCou¡
, 
bloomFûãr
 **
bfv
)

58 
bloomFûãr
 *
bf
 = 
NULL
;

59 
bôsCou¡
 = (
hashCou¡
 * 
°rCou¡
 / 8 + 1) * 8;

61 if(!(
bf
 = (
bloomFûãr
 *)
	`ˇŒoc
((bloomFilter), 1))){

66 if(!(
bf
->
fûãrBô
 = (*)
	`ˇŒoc
(
bôsCou¡
 / 8,

68 
	`‰ìHópBF
(
bf
);

71 
bf
->
°rCou¡
 = strCount;

72 
bf
->
hashCou¡
 = hashCount;

73 
bf
->
bôsCou¡
 = bitsCount;

74 *
bfv
 = 
bf
;

76 
	}
}

78 
	$‰ìHópBF
(
bloomFûãr
 *
bf
)

80 if(!
bf
) ;

81 if(
bf
->
fûãrBô
Ë
	`‰ì
(bf->filterBit);

82 
	`‰ì
(
bf
);

83 
	}
}

85 
	$£rülizeBF
(
buf„r
 *
buff
, 
bloomFûãr
 *
bf
)

87 if(!
buff
 || !
bf
 || !bf->
fûãrBô
)  -1;

89 if(
	`wrôeI¡
(
bf
->
hashCou¡
, 
buff
) < 0 ||

90 
	`wrôeI¡
(
bf
->
°rCou¡
, 
buff
) < 0 ||

91 
	`wrôeI¡
(
bf
->
bôsCou¡
, 
buff
) < 0 ||

92 
	`wrôeByãs
(
bf
->
fûãrBô
, bf->
bôsCou¡
 / 8, 
buff
) < 0)

96 
	}
}

99 
	$de§ülizeBF
(
buf„r
 *
buff
, 
bloomFûãr
 **
bfv
)

101 
bloomFûãr
 *
bf
 = 
NULL
;

102 if(!
buff
)  -1;

104 if(!(
bf
 = (
bloomFûãr
 *)
	`ˇŒoc
((bloomFilter),

109 if(
	`ªadI¡
(
buff
, &
bf
->
hashCou¡
) < 0 ||

110 
	`ªadI¡
(
buff
, &
bf
->
°rCou¡
) < 0 ||

111 
	`ªadI¡
(
buff
, &
bf
->
bôsCou¡
) < 0 ||

112 
	`ªadByãs
(
buff
, &
bf
->
fûãrBô
, 
NULL
) < 0){

113 
	`‰ìHópBF
(
bf
);

116 if(
bfv
){

117 *
bfv
 = 
bf
;

119 
	`‰ìHópBF
(
bf
);

122 
	}
}

125 
	$addToBF
(
bloomFûãr
 *
bf
, *
byãs
, 
Àn
)

127 
i
;

128 
hash1
, 
hash2
;

129 
íåy
;

131 if(!
bf
||!
byãs
)  -1;

133 
hash1
 = 
	`hash
(
byãs
, 
Àn
, 0);

134 
hash2
 = 
	`hash
(
byãs
, 
Àn
, 
hash1
);

136 
i
 = 0; i < 
bf
->
hashCou¡
; i++){

137 
íåy
 = 
	`abs
((
hash1
 + 
i
*
hash2
Ë% 
bf
->
bôsCou¡
);

138 
bf
->
fûãrBô
[
íåy
 / 8] |= 1 << (entry % 8);

141 
	}
}

142 
bloomFûãr
 *
	$dupBloomFûãr
(
bloomFûãr
 *
bf
)

144 
bloomFûãr
 *
tmp
 = 
NULL
;

146 if(!
bf
 || !bf->
fûãrBô
)

147  
NULL
;

148 if(!(
tmp
 = (
bloomFûãr
 *)
	`ˇŒoc
((bloomFilter), 1)))

149  
NULL
;

150 if(!(
tmp
->
fûãrBô
 = (*)
	`ˇŒoc
(
bf
->
bôsCou¡
 / 8,

152 
	`‰ìHópBF
(
tmp
);

153  
NULL
;

155 
	`mem˝y
(
tmp
->
fûãrBô
, 
bf
->fûãrBô, bf->
bôsCou¡
 / 8);

156 
tmp
->
hashCou¡
 = 
bf
->hashCount;

157 
tmp
->
°rCou¡
 = 
bf
->strCount;

158 
tmp
->
bôsCou¡
 = 
bf
->bitsCount;

159  
tmp
;

160 
	}
}

	@db/bloomFilter.h

1 #i‚de‡
_BLOOMFILTER_H_


2 
	#_BLOOMFILTER_H_


	)

3 
	~"°dlib.h
"

4 
	~"buf„r.h
"

7 
	#MINHASH
 2

	)

8 
	#KEYHASHCOUNT
 16

	)

9 
	#COLUMNNAMEHASHCOUNT
 4

	)

11 
	sbloomFûãr
{

12 
	mhashCou¡
;

13 
	m°rCou¡
;

14 
	mbôsCou¡
;

15 *
	mfûãrBô
;

16 }
	tbloomFûãr
;

19 
gëBloomFûãr
(
hashCou¡
, 
°rCou¡
, 
bloomFûãr
 **
bf
);

20 
‰ìHópBF
(
bloomFûãr
 *
bf
);

21 
£rülizeBF
(
buf„r
 *
buff
, 
bloomFûãr
 *
bf
);

22 
de§ülizeBF
(
buf„r
 *
buff
, 
bloomFûãr
 **
bf
);

23 
addToBF
(
bloomFûãr
 *
bf
, *
byãs
, 
Àn
);

24 
bloomFûãr
 *
dupBloomFûãr
(bloomFûã∏*
bf
);

	@db/column.c

1 
	~"cﬁumn.h
"

3 
ölöe
 
	$cﬁumnComp
(
cﬁumn
 *
x
, cﬁum¿*
y
)

5 if(!
x
 || !
y
){

6 
	`LOG_WRITE
("xánd yÖointer supposeÇot NULL\n");

9  
	`°rcmp
(
x
->
«me
, 
y
->name);

10 
	}
}

12 
cﬁumn
 *
	$gëCﬁumn
()

14 
cﬁumn
 *
ªt
 = 
NULL
;

16 if((
ªt
 = (
cﬁumn
 *)
	`ˇŒoc
((cﬁumn), 1)Ë=
NULL
){

17 
	`LOG_WRITE
("out of memory\n");

18  
NULL
;

21 
ªt
->
ªfCou¡
 = 1;

22  
ªt
;

23 
	}
}

24 
cﬁumn
 * 
	$˛⁄eCﬁumn
(
cﬁumn
 *
x
)

26 
cﬁumn
 *
y
 = 
NULL
;

27 *
«me
 = 
NULL
, *
vÆue
 = NULL;

29 if(!
x
)

30  
NULL
;

31 if((
y
 = 
	`gëCﬁumn
()Ë=
NULL
)

32  
NULL
;

33 if(!(
«me
 = 
	`°rdup
(
x
->name))

34 || !(
vÆue
 = 
	`°rdup
(
x
->value))){

35 if(
«me
)

36 
	`‰ì
(
«me
);

37 if(
vÆue
)

38 
	`‰ì
(
vÆue
);

39 
	`de¸CﬁumnRef
(
y
);

41  
NULL
;

44 
y
->
«me
 =Çame;

45 
y
->
vÆue
 = value;

46 
y
->
time°amp
 = 
x
->timestamp;

47 
y
->
dñ
 = 
x
->del;

48 
y
->
size
 = 
x
->size;

50  
y
;

51 
	}
}

53 
±hªad_muãx_t
 
	gcﬁumnMuãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

54 
	$de¸CﬁumnRef
(
cﬁumn
 *
c
)

56 if(!
c
) ;

58 
	`±hªad_muãx_lock
(&
cﬁumnMuãx
);

59 
c
->
ªfCou¡
--;

60 if(!
c
->
ªfCou¡
){

61 
	`‰ìHópCﬁumn
(
c
);

63 
	`±hªad_muãx_u∆ock
(&
cﬁumnMuãx
);

64 
	}
}

65 
	$ö¸CﬁumnCou¡
(
cﬁumn
 *
c
)

67 if(!
c
)

69 
	`±hªad_muãx_lock
(&
cﬁumnMuãx
);

70 
c
->
ªfCou¡
++;

71 
	`±hªad_muãx_u∆ock
(&
cﬁumnMuãx
);

72 
	}
}

73 
	$‰ìHópCﬁumn
(
cﬁumn
 *
x
)

75 if(!
x
)  ;

77 if(
x
->
«me
Ë
	`‰ì
(x->name);

78 if(
x
->
vÆue
Ë
	`‰ì
(x->value);

79 
	`‰ì
(
x
);

80 
	}
}

82 
	$compPri‹ôy
(
cﬁumn
 *
x
, cﬁum¿*
y
)

84 if(!
x
 || !
y
){

85 
	`LOG_WRITE
("xánd y shouldÇot be NULL\n");

88 if(
x
->
dñ
 =
y
->del){

89  
x
->
time°amp
 - 
y
->timestamp;

91  
x
->
dñ
 - 
y
->del;

92 
	}
}

94 
	$gëCﬁumnSîülizeLí
(
cﬁumn
 *
x
)

96 if(!
x
){

97 
	`LOG_WRITE
("pointer x shouldÇot be NULL\n");

101  
x
->
size
 + 
COLUMNSEREX
;

102 
	}
}

105 
	$£rülizeCﬁumn
(
cﬁumn
 *
x
, 
buf„r
 *
buff
)

107 if(!
x
 || !
buff
){

108 
	`LOG_WRITE
("columnánd buffer shouldÇot be NULL\n");

112 if(
	`wrôeByãs
(
x
->
«me
, 
	`°æí
(x->«meË+ 1, 
buff
) < 0

113 || 
	`wrôeByãs
(
x
->
vÆue
, 
	`°æí
(x->value) + 1,

114 
buff
) < 0

115 || 
	`wrôeUnsig√dI¡
(
x
->
time°amp
, 
buff
) < 0

116 || 
	`wrôeByã
(
x
->
dñ
, 
buff
) < 0)

119 
	}
}

122 
	$de£rülizeCﬁumn
(
buf„r
 *
buff
, 
cﬁumn
 **
x
)

124 
time°amp
;

125 
dñ
;

126 *
«me
 = 
NULL
, *
vÆue
 = NULL;

127 
cﬁumn
 *
v
 = 
NULL
;

129 if(
	`ªadByãs
(
buff
, &
«me
, 
NULL
) < 0 ||

130 
	`ªadByãs
(
buff
, &
vÆue
, 
NULL
) < 0 ||

131 
	`ªadUnsig√dI¡
(
buff
, &
time°amp
) < 0 ||

132 
	`ªadByã
(
buff
, &
dñ
) < 0 ){

133 if(
«me
Ë
	`‰ì
(name);

134 if(
vÆue
Ë
	`‰ì
(value);

138 if(!(
v
 = 
	`gëCﬁumn
())){

139 if(
«me
)

140 
	`‰ì
(
«me
);

141 if(
vÆue
)

142 
	`‰ì
(
vÆue
);

146 
v
->
«me
 =Çame;

147 
v
->
vÆue
 = value;

148 
v
->
time°amp
 =Åimestamp;

149 
v
->
dñ
 = del;

152 if(
x
)

153 *
x
 = 
v
;

155 
	`de¸CﬁumnRef
(
v
);

158 
	}
}

160 
RB_PROTOTYPE
(
cﬁumnsHódî
, 
cﬁumn
, 
lök
, 
cﬁumnComp
);

161 
RB_GENERATE
(
cﬁumnsHódî
, 
cﬁumn
, 
lök
, 
cﬁumnComp
);

163 
cﬁumnSë
 *
	$gëCﬁumnSë
()

165 
cﬁumnSë
 *
cs
 = 
NULL
;

167 if(!(
cs
 = (
cﬁumnSë
 *)
	`mÆloc
((columnSet)))){

168 
	`LOG_WRITE
("oo mem\n");

169  
NULL
;

171 *
cs
 = (
cﬁumnSë
){{
NULL
}, 0};

173  
cs
;

174 
	}
}

176 
	$gëCﬁumnCou¡
(
cﬁumnSë
 *
cs
, *
v
)

178 if(!
cs
)

181 if(
v
)

182 *
v
 = 
cs
->
ñemCou¡
;

185 
	}
}

191 
	$‰ìHópCﬁumnSë
(
cﬁumnSë
 *
cs
)

193 
cﬁumn
 *
tmp
 = 
NULL
;

194 if(!
cs
) ;

196 
tmp
 = 
	`RB_MIN
(
cﬁumnsHódî
, &
cs
->
hódî
);

197 
tmp
 !
NULL
){

198 
	`RB_REMOVE
(
cﬁumnsHódî
, &
cs
->
hódî
, 
tmp
);

199 
cs
->
ñemCou¡
--;

200 
	`de¸CﬁumnRef
(
tmp
);

201 
tmp
 = 
	`RB_MIN
(
cﬁumnsHódî
, &
cs
->
hódî
);

203 
	`‰ì
(
cs
);

204 
	}
}

207 
	$addCﬁumn
(
cﬁumnSë
 *
cs
, 
cﬁumn
 *
toIn£π
)

209 
cﬁumn
 *
tmp
 = 
NULL
;

211 if(!
cs
 || !
toIn£π
)

214 
tmp
 = 
	`RB_FIND
(
cﬁumnsHódî
, &
cs
->
hódî
, 
toIn£π
);

215 if(!
tmp
){

216 
	`RB_INSERT
(
cﬁumnsHódî
, &
cs
->
hódî
, 
toIn£π
);

217 
cs
->
ñemCou¡
++;

220 if(
	`compPri‹ôy
(
toIn£π
, 
tmp
) > 0){

221 
	`RB_REMOVE
(
cﬁumnsHódî
, &
cs
->
hódî
, 
tmp
);

222 
	`RB_INSERT
(
cﬁumnsHódî
, &
cs
->
hódî
, 
toIn£π
);

223 
	`de¸CﬁumnRef
(
tmp
);

229 
	}
}

232 
	$addCﬁumnSë
(
cﬁumnSë
 *
èrgë
, cﬁumnSë *
§c
)

234 
cﬁumnAdded
 = 0, 
addFœg
 = 0;

235 
cﬁumn
 *
tmp
 = 
NULL
;

237 if(!
èrgë
){

240 if(!
§c
){

244 
tmp
 = 
	`RB_MIN
(
cﬁumnsHódî
, &
§c
->
hódî
);

245 
tmp
 !
NULL
){

246 
ªt
;

248 
	`RB_REMOVE
(
cﬁumnsHódî
, &
§c
->
hódî
, 
tmp
);

249 
§c
->
ñemCou¡
--;

251 
ªt
 = 
	`addCﬁumn
(
èrgë
, 
tmp
);

252 if(
ªt
 == -1)

253 
	`de¸CﬁumnRef
(
tmp
);

254 if(
ªt
 > 0){

255 
addFœg
 = 1;

256 
cﬁumnAdded
 +
ªt
;

259 
tmp
 = 
	`RB_MIN
(
cﬁumnsHódî
, &
§c
->
hódî
);

261 if(
addFœg
)

262  
cﬁumnAdded
;

265 
	}
}

267 
	$£rülizeCﬁumnSë
(
cﬁumnSë
 *
cs
, 
buf„r
 *
buff
)

269 if(!
cs
 || !
buff
)  -1;

270 if(
	`wrôeI¡
(
cs
->
ñemCou¡
, 
buff
) < 0){

271 
	`LOG_WRITE
("oo mem\n");

274 
cﬁumn
 *
tmp
 = 
NULL
;

275 
	`RB_FOREACH
(
tmp
, 
cﬁumnsHódî
, &
cs
->
hódî
){

276 if(
	`£rülizeCﬁumn
(
tmp
, 
buff
) < 0)  -1;

279 
	}
}

281 
	$de£rülizeCﬁumnSë
(
cﬁumnSë
 *
cs
, 
buf„r
 *
b
)

283 
cou¡
 = 0;

284 if(
	`ªadI¡
(
b
, &
cou¡
) < 0){

288 
i
;

289 
cﬁumn
 *
tmp
 = 
NULL
;

290 
i
 = 0; i < 
cou¡
; i++){

291 if(
	`de£rülizeCﬁumn
(
b
, &
tmp
) < 0){

295 if(
	`addCﬁumn
(
cs
, 
tmp
) < 0){

296 
	`de¸CﬁumnRef
(
tmp
);

300 
	}
}

302 
	$dñëeCﬁumn
(
cﬁumnSë
 *
cs
, 
cﬁumn
 *
c
)

304 if(!
cs
 || !
c
){

307 
cﬁumn
 *
x
 = 
NULL
;

308 
x
 = 
	`RB_FIND
(
cﬁumnsHódî
, &
cs
->
hódî
, 
c
);

309 if(!
x
)  -2;

310 
	`RB_REMOVE
(
cﬁumnsHódî
, &
cs
->
hódî
, 
x
);

311 
	`de¸CﬁumnRef
(
x
);

313 
	}
}

314 
cﬁumn
 *
	$födCSCﬁumn
(
cﬁumnSë
 *
cs
, *
«me
)

316 
cﬁumn
 
tmp
 = {
«me
};

317 
cﬁumn
 *
c
 = 
NULL
;

319 if(!
cs
 || !
«me
)

320  
NULL
;

321 
c
 = 
	`RB_FIND
(
cﬁumnsHódî
, &
cs
->
hódî
, &
tmp
);

322 if(
c
)

323 
	`ö¸CﬁumnCou¡
(
c
);

325  
c
;

326 
	}
}

	@db/column.h

14 #i‚de‡
_COLUMN_H_


15 
	#_COLUMN_H_


	)

16 
	~"log.h
"

17 
	~"£rülize.h
"

18 
	~"mem.h
"

19 
	~"åì.h
"

20 
	~"°döt.h
"

21 
	~"±hªad.h
"

24 
	#COLUMNSEREX
 (4+2)

25 

	)

28 
	scﬁumn
{

29 *
	m«me
;

30 *
	mvÆue
;

31 
uöt32_t
 
	mtime°amp
;

32 
uöt8_t
 
	mdñ
;

33 
uöt16_t
 
	msize
;

34 
uöt32_t
 
	mªfCou¡
;

35 
RB_ENTRY
(
cﬁumn
Ë
	mlök
;

36 }
	tcﬁumn
;

38 
cﬁumn
 *
gëCﬁumn
();

39 
cﬁumn
 *
˛⁄eCﬁumn
(cﬁum¿*
c
);

40 
de¸CﬁumnRef
(
cﬁumn
 *
c
);

41 
ö¸CﬁumnCou¡
(
cﬁumn
 *
c
);

42 
‰ìHópCﬁumn
(
cﬁumn
 *
x
);

44 
£rülizeCﬁumn
(
cﬁumn
 *
x
, 
buf„r
 *
buff
);

45 
de£rülizeCﬁumn
(
buf„r
 *
buff
, 
cﬁumn
 **
v
);

47 
£rûaizeLí
(
cﬁumn
 *
c
);

48 
cﬁumnCmp
(
cﬁumn
 *
x
, cﬁum¿*
y
);

50 
	$RB_HEAD
(
	tcﬁumnsHódî
,
	tcﬁumn
) columnsHeader;

52 
	scﬁumnSë
{

53 
cﬁumnsHódî
 
hódî
;

54 
ñemCou¡
;

55 }
	tcﬁumnSë
;

57 
cﬁumnSë
 *
	`gëCﬁumnSë
();

58 
	`gëCﬁumnCou¡
(
cﬁumnSë
 *
cs
, *
cou¡
);

59 
	`‰ìHópCﬁumnSë
(
cﬁumnSë
 *
cs
);

60 
	`addCﬁumn
(
cﬁumnSë
 *
cs
, 
cﬁumn
 *
toIn£π
);

61 
	`addCﬁumnSë
(
cﬁumnSë
 *
èrgë
, cﬁumnSë *
§c
);

62 
	`£rülizeCﬁumnSë
(
cﬁumnSë
 *
cs
, 
buf„r
 *
b
);

63 
	`de£rülizeCﬁumnSë
(
cﬁumnSë
 *
cs
, 
buf„r
 *
b
);

64 
	`dñëeCﬁumn
(
cﬁumnSë
 *
cs
, 
cﬁumn
 *
c
);

65 
cﬁumn
 *
	`födCSCﬁumn
(
cﬁumnSë
 *
cs
, *
«me
);

	@db/columnFamily.c

1 
	~"cﬁumnFamûy.h
"

3 
	$öôCF
(
cﬁumnFamûy
 *
cf
, 
cﬁumnFamûyMëad©a
 *
cfmd
)

5 if(!
cfmd
){

6 
	`LOG_WRITE
("cfmd cannot NULL\n");

9 if(!
cf
)  -1;

11 *
cf
 = (
cﬁumnFamûy
){
NULL
, 0, 0, 
cfmd
 };

12 if(
cfmd
->
ty≥
 =
°™d¨d
){

13 if(!(
cf
->
cﬁumn‹Su≥r
 = 
	`gëCﬁumnSë
()))  -1;

19 
	}
}

21 
cﬁumnFamûy
* 
	$gëCF
(
cﬁumnFamûyMëad©a
 *
cfm
)

23 
cﬁumnFamûy
 *
cf
 = 
NULL
;

24 if(!
cfm
){

25  
NULL
;

27 
cf
 = (
cﬁumnFamûy
 *)
	`mÆloc
((columnFamily));

28 if(!
cf
)

29  
NULL
;

31 *
cf
 = (
cﬁumnFamûy
){
NULL
, 0, 0, 
cfm
};

32 if(
cfm
->
ty≥
 =
°™d¨d
){

33 if(!(
cf
->
cﬁumn‹Su≥r
 = 
	`gëCﬁumnSë
())){

34 
	`‰ìHópCﬁumnFamûy
(
cf
);

35  
NULL
;

37  
cf
;

40  
NULL
;

42 
	}
}

44 
	$gëCFTy≥
(
cﬁumnFamûy
 *
cf
, 
cfTy≥
 *
v
)

46 if(!
cf
 || !cf->
cfm
)  -1;

48 if(
v
)

49 *
v
 = 
cf
->
cfm
->
ty≥
;

51 
	}
}

53 *
	$gëCFName
(
cﬁumnFamûy
 *
cf
)

55 if(!
cf
 || !cf->
cfm
)

56  
NULL
;

58  
cf
->
cfm
->
cfName
;

59 
	}
}

60 *
	$gëCFKey•a˚
(
cﬁumnFamûy
 *
cf
)

63 if(!
cf
 || !cf->
cfm
)

64  
NULL
;

66  
cf
->
cfm
->
key•a˚Name
;

67 
	}
}

69 
	$gëCFID
(
cﬁumnFamûy
 *
cf
, *
ID
)

71 if(!
cf
 || !cf->
cfm
)  -1;

73 if(
ID
)

74 *
ID

cf
->
cfm
->
cfID
;

76 
	}
}

77 
	$gëCFCﬁumnCou¡
(
cﬁumnFamûy
 *
cf
, *
cou¡
)

79 
cfTy≥
 
ty≥
;

81 if(!
cf
 || !cf->
cﬁumn‹Su≥r
)

83 if(
	`gëCFTy≥
(
cf
, &
ty≥
) < 0)

86 if(
ty≥
 =
°™d¨d
){

87 if(
	`gëCﬁumnCou¡
((
cﬁumnSë
*Ë
cf
->
cﬁumn‹Su≥r
,

88 
cou¡
) < 0)

96 
	}
}

98 
	$cfCom∑ª
(
cﬁumnFamûy
 *
cf1
, cﬁumnFamûy *
cf2
)

100 *
ksName1
 = 
NULL
, *
ksName2
 = NULL;

101 *
cfName1
 = 
NULL
, *
cfName2
 = NULL;

102 
com
;

104 
ksName1
 = 
	`gëCFKey•a˚
(
cf1
);

105 
ksName2
 = 
	`gëCFKey•a˚
(
cf2
);

106 
cfName1
 = 
	`gëCFName
(
cf1
);

107 
cfName2
 = 
	`gëCFName
(
cf2
);

109 
com
 = 
	`°rcmp
(
ksName1
, 
ksName2
);

110 if(
com
)

111  
com
;

113  
	`°rcmp
(
cfName1
, 
cfName2
);

114 
	}
}

116 
	$£rülizeCF
(
cﬁumnFamûy
 *
cf
, 
buf„r
 *
buff
)

118 if(!
cf
 || !
buff
)  -1;

120 
cfTy≥
 
ty≥
;

122 if(
	`gëCFTy≥
(
cf
, &
ty≥
) < 0)  -1;

124 if(
	`wrôeUnsig√dI¡
(
cf
->
m¨kedF‹Dñëe
, 
buff
) < 0 ||

125 
	`wrôeUnsig√dI¡
(
cf
->
loˇlDñëe
, 
buff
) < 0)

127 if(
ty≥
 =
°™d¨d
){

128  
	`£rülizeCﬁumnSë
((
cﬁumnSë
 *)
cf
->
cﬁumn‹Su≥r
, 
buff
);

132 
	}
}

134 
	$de£rülizeCF
(
buf„r
 *
buff
, 
cﬁumnFamûy
 *
cf
)

136 
cfTy≥
 
ty≥
;

137 
m¨kedF‹Dñëe
, 
loˇlDñëe
;

139 if(!
buff
 || !
cf
)

142 if(
	`gëCFTy≥
(
cf
, &
ty≥
) < 0)

145 if(
	`ªadUnsig√dI¡
(
buff
, &
m¨kedF‹Dñëe
) < 0 ||

146 
	`ªadUnsig√dI¡
(
buff
, &
loˇlDñëe
) < 0)

149 
cf
->
m¨kedF‹Dñëe
 = markedForDelete;

150 
cf
->
loˇlDñëe
 =ÜocalDelete;

151 if(
ty≥
 =
°™d¨d
){

152  
	`de£rülizeCﬁumnSë
(

153 (
cﬁumnSë
 *)
cf
->
cﬁumn‹Su≥r
, 
buff
);

157 
	}
}

160 
	$ö£πCF
(
cﬁumnFamûy
 *
cf
, cﬁumnFamûy *
ö£πed
)

162 
ö£π
 = 0;

163 
cfTy≥
 
ty≥
;

165 if(!
cf
 || !
ö£πed
 ||

166 !
cf
->
cfm
 || !
ö£πed
->cfm)

171 if(
	`cfCom∑ª
(
cf
, 
ö£πed
))

174 if(
	`gëCFTy≥
(
cf
, &
ty≥
) < 0)

177 
cf
->
m¨kedF‹Dñëe
 = 
	`MAX
(cf->markedForDelete,

178 
ö£πed
->
m¨kedF‹Dñëe
);

179 
cf
->
loˇlDñëe
 = 
	`MAX
(cf->localDelete,

180 
ö£πed
->
loˇlDñëe
);

182 if(
ty≥
 =
°™d¨d
){

183 
ö£π
 = 
	`addCﬁumnSë
(

184 (
cﬁumnSë
 *)
cf
->
cﬁumn‹Su≥r
,

185 (
cﬁumnSë
 *)
ö£πed
->
cﬁumn‹Su≥r
);

187  
ö£π
;

192 
	}
}

194 
cﬁumn
 *
	$födCFCﬁumn
(
cﬁumnFamûy
 *
cf
, *
cﬁumnName
)

196 
cfTy≥
 
ty≥
;

198 if(!
cf
 || !
cﬁumnName
 || !cf->
cﬁumn‹Su≥r
)

199  
NULL
;

200 if(
	`gëCFTy≥
(
cf
, &
ty≥
) < 0)

201  
NULL
;

203 if(
ty≥
 =
°™d¨d
){

204  
	`födCSCﬁumn
((
cﬁumnSë
 *)
cf
->
cﬁumn‹Su≥r
,

205 
cﬁumnName
);

207  
NULL
;

209 
	}
}

211 
	$˛órCﬁumnFamûy
(
cﬁumnFamûy
 *
cf
)

213 if(!
cf
) ;

215 
cf
->
cfm
 = 
NULL
;

216 
	`‰ìHópCﬁumnSë
(
cf
->
cﬁumn‹Su≥r
);

217 
cf
->
cﬁumn‹Su≥r
 = 
NULL
;

218 
	}
}

219 
	$‰ìHópCﬁumnFamûy
(
cﬁumnFamûy
 *
cf
)

221 if(!
cf
)  ;

222 
	`˛órCﬁumnFamûy
(
cf
);

223 
	`‰ì
(
cf
);

224 
	}
}

226 
	$addCFCﬁumn
(
cﬁumnFamûy
 *
cf
 , 
cﬁumn
 *
toIn£π
)

228 
cfTy≥
 
ty≥
;

230 if(!
cf
 || !cf->
cﬁumn‹Su≥r
 || !
toIn£π
){

233 if(
	`gëCFTy≥
(
cf
, &
ty≥
) < 0)

235 if(
ty≥
 =
°™d¨d
)

236  
	`addCﬁumn
((
cﬁumnSë
 *)
cf
->
cﬁumn‹Su≥r
, 
toIn£π
);

239 
	}
}

	@db/columnFamily.h

14 #i‚de‡
_COLUMNFAMILY_H_


15 
	#_COLUMNFAMILY_H_


	)

16 
	~"cﬁumn.h
"

17 
	~"su≥rCﬁumn.h
"

18 
	~"èbÀMëad©a.h
"

19 
	~"°döt.h
"

21 
	scﬁumnFamûy
{

22 *
	mcﬁumn‹Su≥r
;

23 
uöt32_t
 
	mm¨kedF‹Dñëe
;

24 
uöt32_t
 
	mloˇlDñëe
;

25 
cﬁumnFamûyMëad©a
 *
	mcfm
;

26 }
	tcﬁumnFamûy
;

29 
öôCF
(
cﬁumnFamûy
 *
cf
, 
cﬁumnFamûyMëad©a
 *
cfmd
);

30 
cﬁumnFamûy
 *
gëCF
(
cﬁumnFamûyMëad©a
 *
cfm
);

31 
˛órCﬁumnFamûy
(
cﬁumnFamûy
 *
cf
);

32 
‰ìHópCﬁumnFamûy
(
cﬁumnFamûy
 *
cf
);

34 
gëCFTy≥
(
cﬁumnFamûy
 *
cf
, 
cfTy≥
 *
v
);

35 
gëCFID
(
cﬁumnFamûy
 *
cf
, *
ID
);

36 
gëCFCﬁumnCou¡
(
cﬁumnFamûy
 *
cf
, *
cou¡
);

37 *
gëCFName
(
cﬁumnFamûy
 *
cf
);

38 *
gëCFKey•a˚
(
cﬁumnFamûy
 *
cf
);

41 
£rülizeCF
(
cﬁumnFamûy
 *
cf
, 
buf„r
 *
buff
);

42 
de£rülizeCF
(
buf„r
 *
buff
, 
cﬁumnFamûy
 *
cf
);

45 
ö£πCF
(
cﬁumnFamûy
 *
cf
, cﬁumnFamûy *
ö£πed
);

46 
addCFCﬁumn
(
cﬁumnFamûy
 *
cf
, 
cﬁumn
 *
toIn£π
);

47 
cﬁumn
 *
födCFCﬁumn
(
cﬁumnFamûy
 *
cf
, *
cﬁumName
);

	@db/columnFamilyStore.c

1 
	~"°dio.h
"

2 
	~<±hªad.h
>

3 
	~<time.h
>

4 
	~"cﬁumnFamûySt‹e.h
"

5 
	~"commôLog.h
"

6 
	~"î∫o.h
"

8 
	sÊushTask
{

9 
	m˛HódîUpd©e
;

10 
	mªfCou¡
;

11 
±hªad_muãx_t
 
	mmuãx
;

12 
±hªad_c⁄d_t
 
	msig«l
;

13 
cﬁumnFamûySt‹e
 *
	mcfs
;

14 
memTabÀ
 *
	mmt
;

15 }
	tÊushTask
;

17 
de¸FlushTask
(
ÊushTask
 *
Ê
);

18 
‰ìHópFL
(
ÊushTask
 *
Ê
);

19 
ö¸FlushTask
(
ÊushTask
 *
Ê
);

21 
ÊushTask
 *
gëFlushTask
(
cﬁumnFamûySt‹e
 *
cfs
, 
memTabÀ
 *
mt
);

22 
ÊushögH™dÀr
(*
¨g
);

23 
synFlushögTask
(*
¨g
);

25 
ÊushTask
 *
	$gëFlushTask
(
cﬁumnFamûySt‹e
 *
cfs
, 
memTabÀ
 *
mt
)

27 
ÊushTask
 *
·
 = 
NULL
;

29 if(!
cfs
 || !
mt
){

30 
	`¥ötf
("argmentÉrror\n");

31  
NULL
;

34 if(!(
·
 = 
	`ˇŒoc
((
ÊushTask
), 1))){

35 
	`LOG_WRITE
("oom\n");

36  
NULL
;

38 
·
->
ªfCou¡
 = 1;

39 
·
->
mt
 = mt;

40 
·
->
cfs
 = cfs;

41 
	`±hªad_muãx_öô
(&
·
->
muãx
, 
NULL
);

42 
	`±hªad_c⁄d_öô
(&
·
->
sig«l
, 
NULL
);

43  
·
;

44 
	}
}

46 
	$ö¸FlushTask
(
ÊushTask
 *
·
)

48 if(!
·
){

51 
·
->
ªfCou¡
++;

52 
	}
}

53 
	$de¸FlushTask
(
ÊushTask
 *
·
)

55 if(!
·
)

57 
·
->
ªfCou¡
--;

58 if(
·
->
ªfCou¡
 == 0)

59 
	`‰ìHópFL
(
·
);

60 
	}
}

61 
	$‰ìHópFL
(
ÊushTask
 *
·
)

63 if(!
·
 || ft->
ªfCou¡
 != 0){

66 
	`±hªad_muãx_de°roy
(&
·
->
muãx
);

67 
	`±hªad_c⁄d_de°roy
(&
·
->
sig«l
);

68 
	`‰ì
(
·
);

69 
	}
}

71 
	$ÊushögH™dÀr
(*
¨g
)

73 
ÊushTask
 *
·
 = 
NULL
;

74 
ssTabÀ
 *
ssWrôî
 = 
NULL
, *
ssRódî
 = NULL;

75 
keyCou¡
;

76 
time_t
 
â
;

77 
time•ec
 
timeOut
;

78 
ªtCode
 = 0;

80 if(!(
·
 = (
ÊushTask
 *)
¨g
)){

81 
	`LOG_WRITE
("args cannot be NULL in flushing\n");

85 if(!
·
->
mt
 ||
	`gëKeyCFPaúCou¡
(·->mt, &
keyCou¡
) < 0 ||

86 !
·
->
cfs
 || !·->cfs->
cfmd
 ||

87 !(
ssWrôî
 = 
	`›íWrôeSSTabÀ
(
·
->
cfs
->
cfmd
,

88 
keyCou¡
))){

90 
	`de¸FlushTask
(
·
);

98 if(
	`ÊushToDisk
(
·
->
mt
, 
ssWrôî
 ) < 0){

99 
	`de¸FlushTask
(
·
);

100 
	`de¸SSTRef
(
ssWrôî
);

104 if(!(
ssRódî
 = 
	`›íRódFromWrôe
(
ssWrôî
))){

106 
	`de¸FlushTask
(
·
);

107 
	`de¸SSTRef
(
ssWrôî
);

110 
	`de¸SSTRef
(
ssWrôî
);

113 
â
 = 
	`gëCurTime
() + 60;

114 
timeOut
.
tv_£c
 = 
â
;

115 
timeOut
.
tv_n£c
 = 0;

116 
	`±hªad_muãx_lock
(&
·
->
muãx
);

117 
·
->
˛HódîUpd©e
 == 0 &&

118 
ªtCode
 !
ETIMEDOUT
)

119 
ªtCode
 = 
	`±hªad_c⁄d_timedwaô
(&
·
->
sig«l
,

120 &
·
->
muãx
, &
timeOut
);

121 
	`±hªad_muãx_u∆ock
(&
·
->
muãx
);

123 if(
ªtCode
 !
ETIMEDOUT
 ||

124 
·
->
˛HódîUpd©e
 == 1){

125 
	`±hªad_muãx_lock
(&
·
->
cfs
->
cfsMuãx
);

126 if(
	`ssTLIn£π
(&
·
->
cfs
->
ssTL
, 
ssRódî
) < 0){

127 
	`de¸FlushTask
(
·
);

128 
	`de¸SSTRef
(
ssRódî
);

129 
	`±hªad_muãx_u∆ock
(&
·
->
cfs
->
cfsMuãx
);

132 
	`LIST_REMOVE
(
·
->
mt
, 
lök
);

133 
	`±hªad_muãx_u∆ock
(&
·
->
cfs
->
cfsMuãx
);

134 
	`‰ìHópMemTabÀ
(
·
->
mt
);

137 
	`de¸SSTRef
(
ssRódî
);

139 
	`de¸FlushTask
(
·
);

140 
	}
}

142 
	$synFlushögTask
(*
¨g
)

144 
ÊushTask
 *
·
 = (ÊushTask *)
¨g
;

145 
cﬁumnFamûyMëad©a
 *
cfmd
 = 
NULL
;

147 if(!
·
){

148 
	`LOG_WRITE
("argÉrror\n");

151 if(!
·
->
cfs
 || !(
cfmd
 = ft->cfs->cfmd)){

152 
	`LOG_WRITE
("argÉrror\n");

153 
	`de¸FlushTask
(
·
);

157 if(
	`synCommôLog
(
cfmd
) < 0){

158 
	`LOG_WRITE
("cannot syn commitLog\n");

159 
	`de¸FlushTask
(
·
);

164 
	`±hªad_muãx_lock
(&
·
->
muãx
);

165 
·
->
˛HódîUpd©e
 = 1;

166 
	`±hªad_muãx_u∆ock
(&
·
->
muãx
);

167 
	`±hªad_c⁄d_sig«l
(&
·
->
sig«l
);

168 
	`de¸FlushTask
(
·
);

169 
	}
}

173 
	scommôLogWrôî
{

174 
buf„r
 *
	mbuff
;

175 
cﬁumnFamûyMëad©a
 *
	mcfmd
;

176 }
	tcommôLogWrôî
;

178 
commôLogWrôî
 *
gëCLWrôî
(
buf„r
 *
buff
,

179 
cﬁumnFamûyMëad©a
 *
cfmd
);

180 
˛WrôîH™dÀr
(*
¨g
);

181 
‰ìHópCLWrôî
(
commôLogWrôî
 *
˛w
);

183 
	$‰ìHópCLWrôî
(
commôLogWrôî
 *
˛w
)

185 if(!
˛w
)

187 
	`‰ìHópBuf„r
(
˛w
->
buff
);

188 
	`‰ì
(
˛w
);

189 
	}
}

190 
commôLogWrôî
 *
	$gëCLWrôî
(
buf„r
 *
buff
,

191 
cﬁumnFamûyMëad©a
 *
cfmd
)

193 
commôLogWrôî
 *
˛w
 = 
NULL
;

194 if(!(
˛w
 = (
commôLogWrôî
 *)
	`mÆloc
((

195 
commôLogWrôî
)))){

196  
NULL
;

198 
˛w
->
buff
 = buff;

199 
˛w
->
cfmd
 = cfmd;

200  
˛w
;

201 
	}
}

203 
	$˛WrôîH™dÀr
(*
¨g
)

205 
commôLogWrôî
 *
˛w
 = (commôLogWrôî *)
¨g
;

206 if(
	`wrôeCommôLog
(
˛w
->
buff
, clw->
cfmd
) < 0){

207 
	`LOG_WRITE
("write commitLogwÉrror\n");

209 
	`‰ìHópCLWrôî
(
˛w
);

210 
	}
}

213 
cﬁumnFamûySt‹e
 *
	$gëCFSt‹e
(
cﬁumnFamûyMëad©a
 *
cfmd
)

215 
memTabÀ
 *
mt
 = 
NULL
;

216 
cﬁumnFamûySt‹e
 *
cfs
 = 
NULL
;

218 if(!
cfmd
)

219  
NULL
;

220 if(!(
mt
 = 
	`gëMemTabÀ
()))

221  
NULL
;

222 if(!(
cfs
 = (
cﬁumnFamûySt‹e
 *)
	`ˇŒoc
((columnFamilyStore)

224 
	`‰ìHópMemTabÀ
(
mt
);

225  
NULL
;

228 
cfs
->
curMT
 = 
mt
;

229 
cfs
->
cfmd
 = cfmd;

230 
	`±hªad_muãx_öô
(&
cfs
->
cfsMuãx
, 
NULL
);

231  
cfs
;

232 
	}
}

234 
	$‰ìHópCFSt‹e
(
cﬁumnFamûySt‹e
 *
cfs
)

236 if(!
cfs
)  ;

237 
	`‰ìHópSSTL
(&
cfs
->
ssTL
);

238 
	`‰ìHópMemTL
(&
cfs
->
ÊushögMTL
);

239 
	`‰ìHópMemTabÀ
(
cfs
->
curMT
);

240 
	`±hªad_muãx_de°roy
(&
cfs
->
cfsMuãx
);

241 
	`‰ì
(
cfs
);

242 
	}
}

247 
	$ö£πCFSt‹e
(
cﬁumnFamûySt‹e
 *
cfs
, 
rowMuèti⁄
 *
rm
)

249 
buf„r
 *
buff
 = 
NULL
;

250 
ªt
 = 0;

251 
commôLogWrôî
 *
˛w
 = 
NULL
;

253 if(!
cfs
 || !
rm
 ){

256 if(!(
buff
 = 
	`gëBuf„r
())){

261 if(
	`£rülizeRM
(
buff
, 
rm
) < 0 ||

262 (
˛w
 = 
	`gëCLWrôî
(
buff
, 
cfs
->
cfmd
)Ë=
NULL
 ||

263 
	`di•©chSège
(
COMMITLOGWRITERTHREAD
,

264 
˛WrôîH™dÀr
, 
˛w
) < 0){

265 if(
˛w
)

266 
	`‰ìHópCLWrôî
(
˛w
);

268 
	`‰ìHópBuf„r
(
buff
);

272 
	`±hªad_muãx_lock
(&
cfs
->
cfsMuãx
);

273 
ªt
 = 
	`ö£πMemTabÀ
(
cfs
->
curMT
, 
rm
);

275 if(
	`√edFlush
(
cfs
->
curMT
) == 1){

276 
ÊushTask
 *
·
 = 
NULL
;

278 if(!(
·
 = 
	`gëFlushTask
(
cfs
,cfs->
curMT
))){

279 
	`±hªad_muãx_u∆ock
(&
cfs
->
cfsMuãx
);

280 
	`LOG_WRITE
("oom\n");

284 
	`memTLIn£π
(&
cfs
->
ÊushögMTL
, cfs->
curMT
);

285 if(!(
cfs
->
curMT
 = 
	`gëMemTabÀ
(cfs->
cfmd
))){

286 
	`±hªad_muãx_u∆ock
(&
cfs
->
cfsMuãx
);

287 
	`LOG_WRITE
("error in cfsStore\n");

292 
	`ö¸FlushTask
(
·
);

293 if(
	`di•©chSège
(
FLUSHINGTHREAD
, 
ÊushögH™dÀr
, 
·
) < 0

294 || 
	`di•©chSège
(
COMMITLOGWRITERTHREAD
,

295 
synFlushögTask
, 
·
) < 0){

296 
	`±hªad_muãx_u∆ock
(&
cfs
->
cfsMuãx
);

297 
	`LOG_WRITE
("cannot dispatchÅhread\n");

298 
	`exô
(0);

301 
	`±hªad_muãx_u∆ock
(&
cfs
->
cfsMuãx
);

303  
ªt
;

304 
	}
}

309 
	$f‹˚CFSFlush
(
cﬁumnFamûySt‹e
 *
cfs
)

311 
ÊushTask
 *
·
 = 
NULL
;

313 if(!
cfs
)

316 
	`±hªad_muãx_lock
(&
cfs
->
cfsMuãx
);

317 if(!(
·
 = 
	`gëFlushTask
(
cfs
,cfs->
curMT
))){

318 
	`±hªad_muãx_u∆ock
(&
cfs
->
cfsMuãx
);

319 
	`LOG_WRITE
("oom\n");

323 
	`memTLIn£π
(&
cfs
->
ÊushögMTL
, cfs->
curMT
);

324 if(!(
cfs
->
curMT
 = 
	`gëMemTabÀ
(cfs->
cfmd
))){

325 
	`±hªad_muãx_u∆ock
(&
cfs
->
cfsMuãx
);

326 
	`LOG_WRITE
("error in cfsStore\n");

330 
	`ö¸FlushTask
(
·
);

331 if(
	`di•©chSège
(
FLUSHINGTHREAD
, 
ÊushögH™dÀr
, 
·
) < 0

332 || 
	`di•©chSège
(
COMMITLOGWRITERTHREAD
,

333 
synFlushögTask
, 
·
) < 0){

334 
	`±hªad_muãx_u∆ock
(&
cfs
->
cfsMuãx
);

335 
	`LOG_WRITE
("cannot dispatchÅhread\n");

336 
	`exô
(0);

338 
	`±hªad_muãx_u∆ock
(&
cfs
->
cfsMuãx
);

341 
	}
}

343 
cﬁumn
 *
	$gëCFSCﬁumn
(
cﬁumnFamûySt‹e
 *
cfs
, 
quîyP©h
 *
qp
)

345 
memTabÀ
 *
mt
 = 
NULL
;

346 
cﬁumn
 *
curCﬁ
 = 
NULL
;

349 if(!
cfs
 || !
qp
)

350  
NULL
;

352 
mt
 = 
cfs
->
curMT
;

353 if(
mt
)

354 
curCﬁ
 = 
	`födCﬁumn
(
mt
, 
qp
);

356  
curCﬁ
;

357 
	}
}

358 
	gÊag
 = 0;

359 
	$öôCFSThªad
()

361 if(
Êag
)

364 if(
	`ªgi°î_°age
(
FLUSHINGTHREAD
, 
NFLUSHTHREAD
) < 0 ||

365 
	`ªgi°î_°age
(
COMMITLOGWRITERTHREAD
,

366 
NCOMMITLOGWRITERTHREAD
) < 0 ||

367 
	`ªgi°î_°age
(
SSTABLEREADER
, 
NSSTABLEREADER
) < 0){

368 
	`LOG_WRITE
("cannot init cfsÅhread\n");

369 
	`exô
(0);

371 
Êag
 = 1;

372 
	}
}

374 
	$de°royCFSThªad
()

376 if(
	`dóŒocSège
(
COMMITLOGWRITERTHREAD
) < 0 ||

377 
	`dóŒocSège
(
FLUSHINGTHREAD
) < 0 ||

378 
	`dóŒocSège
(
SSTABLEREADER
) < 0){

379 
	`LOG_WRITE
("cannot stopÅheÅhread\n");

381 
	}
}

	@db/columnFamilyStore.h

1 
	~"queue.h
"

2 
	~"cﬁumnFamûy.h
"

3 
	~"°dio.h
"

4 
	~"ssTabÀ.h
"

5 
	~"rowMuèti⁄.h
"

6 
	~"quîyP©h.h
"

7 
	~"£da.h
"

9 
	#FLUSHINGTHREAD
 "ÊushögThªad"

	)

10 
	#NFLUSHTHREAD
 1

	)

11 
	#COMMITLOGWRITERTHREAD
 "commôLogThªad"

	)

12 
	#NCOMMITLOGWRITERTHREAD
 1

	)

13 
	#SSTABLEREADER
 "ssTabÀRódî"

	)

14 
	#NSSTABLEREADER
 1

	)

19 
	scﬁumnFamûySt‹e
{

20 
memTabÀ
 *
	mcurMT
;

21 
memTabÀLi°
 
	mÊushögMTL
;

22 
cﬁumnFamûyMëad©a
 *
	mcfmd
;

23 
ssTabÀLi°
 
	mssTL
;

24 
±hªad_muãx_t
 
	mcfsMuãx
;

25 }
	tcﬁumnFamûySt‹e
;

28 
cﬁumnFamûySt‹e
 *
gëCFSt‹e
(
cﬁumnFamûyMëad©a
 *
cfmd
);

29 
‰ìHópCFSt‹e
(
cﬁumnFamûySt‹e
 *
cfs
);

30 
ö£πCFSt‹e
(
cﬁumnFamûySt‹e
 *
cfs
, 
rowMuèti⁄
 *
rm
);

31 
f‹˚CFSFlush
(
cﬁumnFamûySt‹e
 *
cfs
);

32 
cﬁumn
 *
gëCFSCﬁumn
(
cﬁumnFamûySt‹e
 *
cfs
, 
quîyP©h
 *
qp
);

34 
öôCFSThªad
();

35 
de°royCFSThªad
();

	@db/commitLog.c

14 
	~"commôLog.h
"

15 
	~"°dlib.h
"

16 
	~"time.h
"

17 
	~"auxûFûe.h
"

18 
	~"¸c32.h
"

19 
	~"rowMuèti⁄.h
"

20 
	~"d©aModñ.h
"

21 
	~"èbÀMëad©a.h
"

23 
commôLog
 *
curCL
;

26 
	s˛Hódî
{

27 
	mcfCou¡
;

28 
	mbyãCou¡
;

29 *
	mdútyBô
;

30 *
	mposAt
;

31 }
	t˛Hódî
;

34 
˛Hódî
 *
gëCLHódî
(
cfCou¡
);

35 
‰ìHópCLHódî
(
˛Hódî
 *
hódî
);

38 
£tDúty
(
˛Hódî
 *
hódî
, 
íåy
);

39 
˛órDúty
(
˛Hódî
 *
hódî
, 
íåy
);

41 
£tE¡ryPos
(
˛Hódî
 *
hódî
, 
íåy
, 
posôi⁄
);

44 
isDúty
(
˛Hódî
 *
hódî
, 
íåy
);

45 
£rülizeCLH
(
˛Hódî
 *
hódî
, 
buf„r
 *
buff
);

46 
˛Hódî
 *
de£rülizeCLH
(
buf„r
 *
buff
);

47 
gëFú°DútyPos
(
˛Hódî
 *
hódî
);

49 
wrôeHódîSyn
(
commôLog
 *
˛
, );

51 
˛Hódî
 *
	$gëCLHódî
(
cfCou¡
)

53 
˛Hódî
 *
˛h
 = 
NULL
;

54 *
byãs
 = 
NULL
;

55 *
pos
 = 
NULL
;

57 if(!(
˛h
 = (
˛Hódî
 *)
	`mÆloc
((clHeader))))

58  
NULL
;

59 if(!(
pos
 = (*)
	`ˇŒoc
((), 
cfCou¡
))){

60 
	`‰ì
(
˛h
);

61  
NULL
;

63 
˛h
->
byãCou¡
 = 
cfCou¡
 / 8 + 1;

64 if(!(
byãs
 = (*)
	`ˇŒoc
((),

65 
˛h
->
byãCou¡
))){

66 
	`‰ì
(
˛h
);

67 
	`‰ì
(
pos
);

68  
NULL
;

71 
˛h
->
cfCou¡
 = cfCount;

72 
˛h
->
dútyBô
 = 
byãs
;

73 
˛h
->
posAt
 = 
pos
;

75  
˛h
;

76 
	}
}

78 
	$‰ìHópCLHódî
(
˛Hódî
 *
hódî
)

80 if(!
hódî
)

83 if(
hódî
->
dútyBô
)

84 
	`‰ì
(
hódî
->
dútyBô
);

85 if(
hódî
->
posAt
)

86 
	`‰ì
(
hódî
->
posAt
);

87 
	`‰ì
(
hódî
);

88 
	}
}

90 
	$£tDúty
(
˛Hódî
 *
hódî
, 
íåy
)

92 
ªm
, 
be
;

93 if(!
hódî
 || !hódî->
dútyBô
){

94 
	`¥ötf
("bad header\n");

98 if(
íåy
 >
hódî
->
cfCou¡
 ||Éntry < 0){

99 
	`LOG_WRITE
("entryÉrror\n");

103 
be
 = 
íåy
 / 8;

104 
ªm
 = 
íåy
 % 8;

105 
hódî
->
dútyBô
[
be
] |1 << 
ªm
;

108 
	}
}

109 
	$£tE¡ryPos
(
˛Hódî
 *
hódî
, 
íåy
, 
posôi⁄
)

111 if(!
hódî
 || hódî->
posAt
 =
NULL
)

113 if(
íåy
 >
hódî
->
cfCou¡
 ||Éntry < 0){

114 
	`LOG_WRITE
("entryÉrror\n");

117 
hódî
->
posAt
[
íåy
] = 
posôi⁄
;

120 
	}
}

121 
	$isDúty
(
˛Hódî
 *
hódî
, 
íåy
)

123 
be
, 
ª
;

125 if(!
hódî
 || !hódî->
dútyBô
){

126 
	`LOG_WRITE
("we cannot offordárgumentÉrrorn\n");

129 if(
íåy
 >
hódî
->
cfCou¡
 ||Éntry < 0){

130 
	`LOG_WRITE
("entryÉrror\n");

133 
be
 = 
íåy
 / 8;

134 
ª
 = 
íåy
 % 8;

136  (
hódî
->
dútyBô
[
be
] & (1 << 
ª
)) > 0 ?

138 
	}
}

140 
	$˛órDúty
(
˛Hódî
 *
hódî
, 
íåy
)

142 
ªm
, 
be
;

144 if(!
hódî
 || !hódî->
dútyBô
){

145 
	`LOG_WRITE
("headerÉrror\n");

148 if(
íåy
 >
hódî
->
cfCou¡
 ||Éntry < 0){

149 
	`LOG_WRITE
("entryÉrror\n");

153 
be
 = 
íåy
 / 8;

154 
ªm
 = 
íåy
 % 8;

155 
hódî
->
dútyBô
[
be
] &(~(1 << 
ªm
)) & 0xff ;

156 
	}
}

157 
	$£rülizeCLH
(
˛Hódî
 *
hódî
, 
buf„r
 *
buff
)

159 
i
;

161 if(!
hódî
 || !hódî->
dútyBô
 ||

162 !
hódî
->
posAt
|| !
buff
)

165 if(
	`wrôeI¡
(
hódî
->
cfCou¡
, 
buff
) < 0)

167 if(
	`wrôeByãs
(
hódî
->
dútyBô
, hódî->
byãCou¡
,

168 
buff
) < 0)

171 
i
 = 0; i < 
hódî
->
cfCou¡
; i++){

172 if(
	`wrôeI¡
(
hódî
->
posAt
[
i
], 
buff
) < 0)

177 
	}
}

180 
	$gëFú°DútyPos
(
˛Hódî
 *
hódî
)

182 
i
, 
Êag
 = 0;

183 
tmp
 = 0;

185 if(!
hódî
 || !hódî->
dútyBô
 || !hódî->
posAt
)

187 
i
 = 0; i < 
hódî
->
cfCou¡
; i++){

188 
dúty
 = 0;

190 
dúty
 = 
	`isDúty
(
hódî
, 
i
);

191 if(
dúty
 == 1){

192 if(
Êag
 == 1)

193 
tmp
 = (tm∞< 
hódî
->
posAt
[
i
] ?Åmp :

194 
hódî
->
posAt
[
i
]);

196 
Êag
 = 1;

197 
tmp
 = 
hódî
->
posAt
[
i
];

202 if(
Êag
 == 1){

203  
tmp
;

207 
	}
}

208 
˛Hódî
* 
	$de£rülizeCLH
(
buf„r
 *
buff
)

210 
˛Hódî
 *
cur
 = 
NULL
;

211 
cfCou¡
 = 0, 
i
;

213 if(!
buff
)

214  
NULL
;

216 
	`ª£t
(
buff
);

217 if(
	`ªadI¡
(
buff
, &
cfCou¡
) < 0){

218  
NULL
;

221 if(!(
cur
 = (
˛Hódî
 *)
	`ˇŒoc
((clHeader), 1)))

222  
NULL
;

223 if(
	`ªadByãs
(
buff
, &
cur
->
dútyBô
, &cur->
byãCou¡
) < 0){

224 
	`‰ìHópCLHódî
(
cur
);

225  
NULL
;

227 if(!(
cur
->
posAt
 = (*)
	`mÆloc
(()

228 * 
cfCou¡
))){

229 
	`‰ìHópCLHódî
(
cur
);

230  
NULL
;

233 
i
 = 0; i < 
cfCou¡
; i++){

234 if(
	`ªadI¡
(
buff
, &
cur
->
posAt
[
i
]) < 0){

235 
	`‰ìHópCLHódî
(
cur
);

236  
NULL
;

239 
cur
->
cfCou¡
 = cfCount;

241  
cur
;

242 
	}
}

245 
	$LIST_HEAD
(
˛Li°
, 
commôLog
Ë
¥eCLS
 = \

246 
	`LIST_HEAD_INITIALIZER
(
¥eCLS
);

247 
commôLog
 *
curCL
;

251 *
	$gëCommôLogFûeP©h
()

253 c⁄° *
p
 = 
NULL
;

254 
tmp
[200] = {0};

255 
time_t
 
cur
;

257 if(
	`gëD©aP©h
(&
p
) < 0)

258  
NULL
;

259 
cur
 = 
	`gëCurTime
();

260 
	`•rötf
(
tmp
, "%s/commôlog/commôlog-%lu.db", 
p
, 
cur
);

262  
	`°rdup
(
tmp
);

263 
	}
}

265 
commôLog
 *
	$gëCommôLog
(*
˝
, 
ty≥
)

267 
commôLog
 *
com
 = 
NULL
;

268 
fûeAb°ø˘
 *
Á
 = 
NULL
;

269 
˛Hódî
 *
˛h
 = 
NULL
;

270 
buf„r
 *
buff
 = 
NULL
;

271 
cfCou¡
;

273 if(
ty≥
 !
READ_COMMITLOG
 &&Åype !=

274 
WRITE_COMMITLOG
)

275  
NULL
;

277 if(
	`gëCFCou¡
(&
cfCou¡
) < 0)

278  
NULL
;

280 if(!(
com
 = (
commôLog
*)
	`ˇŒoc
((commitLog), 1))){

281  
NULL
;

284 if(
ty≥
 =
WRITE_COMMITLOG
 &&

285 
	`›íWrôeFûe
(
˝
, 
COMMITLOGBUFFERSZ
, &
Á
) < 0){

286 
	`‰ìHópCommôLog
(
com
);

287  
NULL
;

288 }if(
ty≥
 =
READ_COMMITLOG
 &&

289 
	`›íRódFûe
(
˝
, 
COMMITLOGBUFFERSZ
, &
Á
) < 0){

290 
	`‰ìHópCommôLog
(
com
);

291  
NULL
;

294 if(
ty≥
 =
WRITE_COMMITLOG
 && !(
˛h
 = 
	`gëCLHódî
(
cfCou¡
))){

295 
	`‰ìHópCommôLog
(
com
);

296 
	`‰ìHópFûe
(
Á
);

297  
NULL
;

298 }if(
ty≥
 =
READ_COMMITLOG
 && (

299 !(
buff
 = 
	`gëBuf„r
()) ||

300 
	`ªadFûe
(
Á
, 
buff
) < 0 ||

301 !(
˛h
 = 
	`de£rülizeCLH
(
buff
)))){

302 
	`‰ìHópCommôLog
(
com
);

303 
	`‰ìHópFûe
(
Á
);

304 if(
buff
)

305 
	`‰ìHópBuf„r
(
buff
);

306  
NULL
;

309 if(
buff
)

310 
	`‰ìHópBuf„r
(
buff
);

312 
com
->
Á
 = fa;

313 
com
->
˛h
 = clh;

317 if(
ty≥
 =
WRITE_COMMITLOG
 &&

318 
	`wrôeHódîSyn
(
com
 , 0) < 0){

319 
	`‰ìHópCommôLog
(
com
);

320 
	`LOG_WRITE
("cannot write header\n");

321 
	`exô
(0);

322  
NULL
;

325  
com
;

326 
	}
}

328 
commôLog
 *
	$gëCommôLogWrôî
()

330 *
˝
 = 
NULL
;

331 
commôLog
 *
˛
 = 
NULL
;

333 if(!(
˝
 = 
	`gëCommôLogFûeP©h
())){

334  
NULL
;

336 if(!(
˛
 = 
	`gëCommôLog
(
˝
, 
WRITE_COMMITLOG
))){

337 
	`‰ì
(
˝
);

338  
NULL
;

340 
	`‰ì
(
˝
);

342  
˛
;

343 
	}
}

344 
commôLog
 *
	$gëCommôLogRódî
(*
fuŒLogP©h
)

346  
	`gëCommôLog
(
fuŒLogP©h
, 
READ_COMMITLOG
);

347 
	}
}

348 
	$‰ìHópCommôLog
(
commôLog
* 
˛
)

350 if(!
˛
)

352 
	`‰ìHópFûe
(
˛
->
Á
);

353 
	`‰ìHópCLHódî
(
˛
->
˛h
);

354 
	`‰ì
(
˛
);

355 
	}
}

358 
	$gëCLPos
(
commôLog
 *
˛
)

360 if(!
˛
 || !˛->
Á
){

361 
	`LOG_WRITE
("argÉrror\n");

365  
	`gëCurFûePos
(
˛
->
Á
);

366 
	}
}

367 
	$bef‹eWrôe
()

369 
curPos
= 0;

372 if(!
curCL
){

373 if(!(
curCL
 = 
	`gëCommôLogWrôî
()))

378 if((
curPos
 = 
	`gëCLPos
(
curCL
)) < 0){

379 
	`LOG_WRITE
("cannot get curpos\n");

385 if(
curPos
 > 
COMMITLOGMAXSZ
){

386 
	`LIST_INSERT_HEAD
(&
¥eCLS
, 
curCL
, 
lök
);

387 
curCL
 = 
NULL
;

388  
	`bef‹eWrôe
();

391 
	}
}

394 
	$wrôeHódîSyn
(
commôLog
 *
˛
, 
√edSìkFûe
)

396 
pos
 = 0;

397 
buf„r
 *
buff
 = 
NULL
;

399 if(!(
buff
 = 
	`gëBuf„r
())){

402 if(
√edSìkFûe
 == 1 &&

403 (
pos
 = 
	`gëCLPos
(
˛
)) < 0){

404 
	`‰ìHópBuf„r
(
buff
);

408 if(
	`£rülizeCLH
(
˛
->
˛h
, 
buff
) < 0){

409 
	`‰ìHópBuf„r
(
buff
);

412 if(
	`f£ekToPos
(
˛
->
Á
, 0) < 0){

413 
	`‰ìHópBuf„r
(
buff
);

416 if(
	`wrôeAµídFûe
(
˛
->
Á
, 
buff
) < 0){

417 
	`‰ìHópBuf„r
(
buff
);

419 if(
√edSìkFûe
 == 1 &&

420 
	`f£ekToPos
(
˛
->
Á
, 
pos
) < 0)

421 
	`exô
(0);

425 
	`‰ìHópBuf„r
(
buff
);

426 if(
√edSìkFûe
 == 1 &&

427 
	`f£ekToPos
(
˛
->
Á
, 
pos
) < 0)

428 
	`exô
(0);

431 
	`synFûe
(
˛
->
Á
);

433 
	}
}

435 
	$wrôeCommôLog
(
buf„r
 *
rm
, c⁄° 
cﬁumnFamûyMëad©a
 *
cfmd
)

437 
cfid
;

438 
¸c32
;

439 
ªt
 = 0;

441 if(!
rm
 || !
cfmd
)

444 if(
	`gëCRC32
(
rm
, &
¸c32
) < 0)

446 
cfid
 = 
cfmd
->
cfID
;

448 if(
	`bef‹eWrôe
() < 0)

450 
ªt
 = 
	`isDúty
(
curCL
->
˛h
, 
cfid
);

451 if(
ªt
 < 0)

453 if(
ªt
 == 0){

454 
	`£tDúty
(
curCL
->
˛h
, 
cfid
);

455 
	`wrôeHódîSyn
(
curCL
, 1);

458 if(
	`wrôeUnsig√dI¡
(
¸c32
, 
rm
) < 0)

461 if(
	`wrôeAµídFûe
(
curCL
->
Á
, 
rm
) < 0)

464 
	}
}

466 
	$√edRïœy
(
rowMuèti⁄
 *
rm
, 
commôLog
 *
˛
, 
pos
)

468 
cfid
 = 0;

469 if(!
rm
 || !
˛
)

471 if(
	`gëRMCFID
(
rm
, &
cfid
) < 0)

473 if(
	`isDúty
(
˛
->
˛h
, 
cfid
) == 1 &&

474 
˛
->
˛h
 !
NULL
 &&

475 
˛
->
˛h
->
posAt
[
cfid
] <
pos
)

480 
	}
}

483 
	$ªcovîFromCurPos
(
commôLog
 *
ªadî
)

485 
buf„r
 *
buff
 = 
NULL
;

486 
rowMuèti⁄
 *
rm
 = 
NULL
;

487 
ªt
 = -1;

489 if(!
ªadî
->
Á
 || !ªadî->
˛h
 ||

490 !(
buff
 = 
	`gëBuf„r
())){

491 if(
buff
)

492 
	`‰ìHópBuf„r
(
buff
);

493  
ªt
;

496 
¸c32
;

497 
¸c
;

498 
curPos
;

500 if(!(
rm
 = (
rowMuèti⁄
 *)
	`ˇŒoc
((rowMutation), 1))){

501 
	`‰ìHópBuf„r
(
buff
);

502  
ªt
;

504 if((
curPos
 = 
	`gëCurFûePos
(
ªadî
->
Á
)) < 0 ||

505 
	`ª£t
(
buff
) < 0 ||

506 
	`ªadFûe
(
ªadî
->
Á
, 
buff
) < 0 ||

507 
	`ª£t
(
buff
) < 0 ||

508 
	`de£rülizeRM
(
buff
,
rm
) < 0 ||

509 
	`gëCRC32
(
buff
, &
¸c
) < 0 ||

510 
	`ªadUnsig√dI¡
(
buff
, &
¸c32
) < 0){

511 if(
	`ídOfFûe
(
ªadî
->
Á
) == 1)

512 
ªt
 = 0;

514 
	`‰ìHópBuf„r
(
buff
);

515 
	`‰ìHópRM
(
rm
);

516  
ªt
;

519 if(
¸c
 !
¸c32
 || (
	`√edRïœy
(
rm
, 
ªadî
, 
curPos
) == 1

520 && 
	`ö£πDM
(
rm
) < 0)){

521 
	`‰ìHópRM
(
rm
);

524 
	`‰ìHópRM
(
rm
);

528 
	}
}

529 
	$auxû¨y_ªcovî
(*
fuŒLogP©h
)

531 
commôLog
 *
ªadî
 = 
NULL
;

532 
fú°DútyPos
 = 0;

534 if(!(
ªadî
 = 
	`gëCommôLogRódî
(
fuŒLogP©h
))){

537 
fú°DútyPos
 = 
	`gëFú°DútyPos
(
ªadî
->
˛h
);

539 if(
fú°DútyPos
 < 0)

541 if(
	`f£ekToPos
(
ªadî
->
Á
, 
fú°DútyPos
) < 0){

542 
	`LOG_WRITE
("log file seekÖosÉrror\n");

546 if(
	`ªcovîFromCurPos
(
ªadî
) < 0){

547 
	`LOG_WRITE
("recoverÉrror, file isÇot untouched\n");

551 
	`LOG_WRITE
("ªcovîÜog %†suc˚ed\n", 
fuŒLogP©h
);

554 
	`‰ìHópCommôLog
(
ªadî
);

556 
	}
}

559 
	$ªcovîFromCommôLog
()

562 
	}
}

563 
	$synCommôLog
(
cﬁumnFamûyMëad©a
 *
cfmd
)

565 
cfid
 = 0;

566 
off_t
 
off£t
 = 0;

568 if(!
cfmd
)

571 
cfid
 = 
cfmd
->
cfID
;

573 if(!
curCL
->
˛h
)

575 
	`˛órDúty
(
curCL
->
˛h
, 
cfid
);

577 if((
off£t
 = 
	`gëCLPos
(
curCL
)) < 0){

578 
	`LOG_WRITE
("cannot write commitlong\n");

582 
	`£tE¡ryPos
(
curCL
->
˛h
, 
cfid
, 
off£t
);

583  
	`wrôeHódîSyn
(
curCL
, 1);

584 
	}
}

	@db/commitLog.h

1 #i‚de‡
_COMMITLOG_H_


2 
	#_COMMITLOG_H_


	)

3 
	~"°dio.h
"

4 
	~"auxûFûe.h
"

5 
	~"èbÀMëad©a.h
"

6 
	~"£rülize.h
"

7 
	~"queue.h
"

10 
	#READ_COMMITLOG
 0

	)

11 
	#WRITE_COMMITLOG
 1

	)

12 
	#COMMITLOGBUFFERSZ
 1024*1024*10

	)

13 
	#COMMITLOGMAXSZ
 1024*1024*200

	)

15 
	g˛Hódî
;

16 
	scommôLog
{

17 
fûeAb°ø˘
 *
	mÁ
;

18 
˛Hódî
 *
	m˛h
;

19 
LIST_ENTRY
(
commôLog
Ë
	mlök
;

20 }
	tcommôLog
;

22 
‰ìHópCommôLog
(
commôLog
 *
˛
);

23 
wrôeCommôLog
(
buf„r
 *
rm
,c⁄° 
cﬁumnFamûyMëad©a
 *
cfmd
);

24 
ªcovîFromCommôLog
();

25 
synCommôLog
(
cﬁumnFamûyMëad©a
 *
cfmd
);

	@db/dataModel.c

1 
	~"d©aModñ.h
"

3 
ö£πDMCFS
(
cﬁumnFamûySt‹e
 *
cfs
);

4 
	$cfsHashög
(c⁄° *
key
)

6 if(!
key
){

7 
	`LOG_WRITE
("key here cannot be NULL\n");

11 c⁄° 
cﬁumnFamûySt‹e
 *
cfs
 = (c⁄° cﬁumnFamûySt‹ê*)
key
;

12  
	`cfmdHash
(
cfs
->
cfmd
);

13 
	}
}

15 
	$cfsCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

16 c⁄° *
key2
)

18 if(!
key1
 || !
key2
){

19 
	`LOG_WRITE
("key1ánd key cannot be NULL\n");

22 c⁄° 
cﬁumnFamûySt‹e
 *
cfs1
 = (c⁄° cﬁumnFamûySt‹ê*)
key1
;

23 c⁄° 
cﬁumnFamûySt‹e
 *
cfs2
 = (c⁄° cﬁumnFamûySt‹ê*)
key2
;

25  
	`cfmdCom∑ª
(
¥ivd©a
, 
cfs1
->
cfmd
, 
cfs2
->cfmd);

26 
	}
}

28 
	$cfsKeyDe°r
(*
¥ivd©a
, *
key
)

30 
cﬁumnFamûySt‹e
 *
cfs
 = (cﬁumnFamûySt‹ê*)
key
;

31 
	`‰ìHópCFSt‹e
(
cfs
);

32 
	}
}

33 
di˘Ty≥
 
	gdmTy≥
 = {

34 
cfsHashög
,

35 
NULL
,

36 
NULL
,

37 
cfsCom∑ª
,

38 
cfsKeyDe°r
,

39 
NULL


42 
d©aModñ
 
	gg_d©aModñ
;

44 
	$¸óãAŒCFS‰omC⁄fig
()

46 
di˘E¡ry
 *
de
 = 
NULL
;

47 
di˘Iãøt‹
 *
di
 = 
NULL
;

49 if(!
g_d©aModñ
.
cfsHashTabÀ
)

52 
di
 = 
	`di˘GëIãøt‹
(
g_cfmDi˘
);

53 if(!
di
){

57 
de
 = 
	`di˘Next
(
di
);

58 
de
){

59 
cﬁumnFamûyMëad©a
 *
cfmd
 = (columnFamilyMetadata *)

60 
	`di˘GëE¡ryKey
(
de
);

61 
cﬁumnFamûySt‹e
 *
cfs
 = 
NULL
;

63 if(!
cfmd
 || !(
cfs
 = 
	`gëCFSt‹e
(cfmd))){

64 
	`di˘Rñó£Iãøt‹
(
di
);

68 if(
	`ö£πDMCFS
(
cfs
) < 0){

69 
	`di˘Rñó£Iãøt‹
(
di
);

70 
	`‰ìHópCFSt‹e
(
cfs
);

73 
de
 = 
	`di˘Next
(
di
);

75 
	`di˘Rñó£Iãøt‹
(
di
);

77 
	}
}

78 
__öô
 
	$öôDM
()

80 
öôTag
 = 0;

82 if(
öôTag
 >= 1){

83 
	`LOG_WRITE
("already init\n");

87 if(!(
g_d©aModñ
.
cfsHashTabÀ
 = 
	`di˘Cª©e
(&
dmTy≥
, 
NULL
)))

90 if(
	`¸óãAŒCFS‰omC⁄fig
() < 0){

91 
	`LOG_WRITE
("cannot create cfs\n");

94 
	`öôCFSThªad
();

95 
öôTag
 = 1;

97 
	}
}

99 
__exô
 
	$de°royDM
()

101 
	`de°royCFSThªad
();

102 
	`di˘Rñó£
(
g_d©aModñ
.
cfsHashTabÀ
);

103 
	`di˘Rñó£
(
g_cfmDi˘
);

105 
	}
}

107 
cﬁumnFamûySt‹e
 *
	$födDMCFS
(*
key•a˚Name
, *
cfName
)

109 
cﬁumnFamûySt‹e
 
cf°mp
 = {0};

110 
cﬁumnFamûyMëad©a
 
tm
 = {
key•a˚Name
, 
cfName
};

111 
di˘E¡ry
 *
de
 = 
NULL
;

113 if(!
key•a˚Name
 || !
cfName
 || !
g_d©aModñ
.
cfsHashTabÀ
){

114  
NULL
;

117 
cf°mp
.
cfmd
 = &
tm
;

119 if(!(
de
 = 
	`di˘Föd
(
g_d©aModñ
.
cfsHashTabÀ
, &
cf°mp
))){

120  
NULL
;

122  (
cﬁumnFamûySt‹e
 *)
	`di˘GëE¡ryKey
(
de
);

123 
	}
}

125 
	$ö£πDM
(
rowMuèti⁄
 *
rm
)

127 
cﬁumnFamûySt‹e
 *
cfs
 = 
NULL
;

129 if(!
rm
 || !rm->
key•a˚Name
 || !rm->
cfName
){

132 if(!(
cfs
 = 
	`födDMCFS
(
rm
->
key•a˚Name
,Ñm->
cfName
))){

135  
	`ö£πCFSt‹e
(
cfs
, 
rm
);

137 
	}
}

138 
	$ö£πDMCFS
(
cﬁumnFamûySt‹e
 *
cfs
)

140 if(!
cfs
)

142 if(
	`di˘Add
(
g_d©aModñ
.
cfsHashTabÀ
, 
cfs
, 
NULL
)

143 =
DICT_OK
)

146 
	}
}

147 
	$f‹˚FlushDM
(*
key•a˚Name
, *
cfName
)

149 
cﬁumnFamûySt‹e
 * 
cfs
 = 
NULL
;

151 if(!(
cfs
 = 
	`födDMCFS
(
key•a˚Name
, 
cfName
))){

152 
	`LOG_WRITE
("cannotÇot findÅhe %s %s cfstore\n",

153 
key•a˚Name
, 
cfName
);

156  
	`f‹˚CFSFlush
(
cfs
);

157 
	}
}

158 
cﬁumn
 *
	$gëCﬁumnDM
(
quîyP©h
 *
∑th
)

160 
cﬁumnFamûySt‹e
 *
cfs
 = 
NULL
;

162 if(!
∑th
)

163  
NULL
;

164 if(!(
cfs
 = 
	`födDMCFS
(
∑th
->
key•a˚
,Ö©h->
cfName
)))

165  
NULL
;

167  
	`gëCFSCﬁumn
(
cfs
, 
∑th
);

168 
	}
}

	@db/dataModel.h

1 #i‚de‡
_DATAMODEL_H_


2 
	#_DATAMODEL_H_


	)

3 
	~"°dio.h
"

4 
	~"rowMuèti⁄.h
"

5 
	~"cﬁumnFamûy.h
"

6 
	~"öô.h
"

7 
	~"log.h
"

8 
	~"di˘.h
"

9 
	~"cﬁumnFamûySt‹e.h
"

10 
	~"èbÀMëad©a.h
"

11 
	~"quîyP©h.h
"

13 
	sd©aModñ
{

14 
di˘
 *
	mcfsHashTabÀ
;

15 }
	td©aModñ
;

17 
__öô
 
öôDM
();

18 
__exô
 
de°royDM
();

19 
ö£πDM
(
rowMuèti⁄
 *
rm
);

20 
f‹˚FlushDM
(*
key•a˚Name
, *
cfName
);

21 
doCom∑˘DM
(*
key•a˚Name
, *
cfName
);

22 
cﬁumn
 *
gëCﬁumnDM
(
quîyP©h
 *
∑th
);

	@db/indexHelper.c

1 
	~"ödexHñ≥r.h
"

2 
	~"£rülize.h
"

4 
	$£rülizeKP
(
buf„r
 *
buff
, 
keyPosôi⁄
 *
kp
)

6 
Àn
 = 0;

7 if(!
buff
 || !
kp
)

10 
	}
}

11 
	$‰ìTempHópKeyIndex
(
keyIndex
 *
ki
)

13 if(!
ki
)

15 if(
ki
->ki)

16 
	`‰ì
(
ki
->ki);

18 
	`‰ì
(
ki
);

19 
	}
}

20 
	$‰ìIndexIndex
(
keyIndex
 *
ki
)

22 
i
;

24 if(!
ki
)

27 
i
 = 0; i < 
ki
->
pos
; i++){

28 if(
ki
->ki[
i
].
key
)

29 
	`‰ì
(
ki
->ki[
i
].
key
);

32 
	`‰ì
(
ki
->ki);

33 
	`‰ì
(
ki
);

34 
	}
}

35 
keyIndex
 *
	$gëKeyIndex
(
size
)

37 
keyIndex
 *
ki
 = 
NULL
;

39 if(
size
 <= 0)

40  
NULL
;

42 if(!(
ki
 = (
keyIndex
 *)
	`mÆloc
((*ki))))

43  
NULL
;

45 if(!(
ki
->kò(
keyIndex
 *)
	`mÆloc
((
keyPosôi⁄
Ë* 
size
))){

46 
	`‰ìHópKeyIndex
(
ki
);

47  
NULL
;

50 
ki
->
size
 = size;

51 
ki
->
pos
 = 0;

53  
ki
;

54 
	}
}

56 
	$addIndexNŸC›y
(
keyIndex
 *
ki
, *
key
, 
pos
)

58 if(
pos
 >
size
 || !
ki
 || !
key
)

61 
ki
->ki[ki->
pos
] = 
key
;

62 
ki
->ki[ki->
pos
] =Öos;

63 
ki
->
pos
++;

65 
	}
}

68 
keyIndex
 *
	$doIndexIndex
(
keyIndex
 *
ki
, 
ssTabÀ
 *
s°
)

70 
size
 = 0, 
i
, 
j
;

71 
keyIndex
 *
ödex
 = 
NULL
;

72 *
key
 = 
NULL
;

73 
buf„r
 *
buff
 = 
NULL
;

75 if(!
ki
 || ki->
pos
 !ki->
size
)

76  
NULL
;

78 
size
 = 
ki
->sizê/ 
INDEXINTERVAL
 + 2;

80 if(!(
ödex
 = 
	`gëKeyIndex
(
size
)) ||

81 !(
buff
 = 
	`gëBuf„r
()))

82  
NULL
;

84 
i
 = 0; i < 
ki
->
pos
; i++){

85 
pos
 = 0;

87 if(
i
 % 
INDEXINTERVAL
 == 0){

88 if(!(
key
 = 
	`°rdup
(
ki
->ki[
i
].key))){

89 
	`‰ìIndexIndex
(
ödex
);

90  
NULL
;

92 if(
i
 == 0)

93 
pos
 = 0;

95 
pos
 =

101 
	}
}

	@db/indexHelper.h

1 
	~"buf„r.h
"

3 
	#INDEXINTERVAL
 128

	)

4 
	skeyPosôi⁄
{

5 *
	mkey
;

6 
	mpos
;

7 }
	tkeyPosôi⁄
;

8 
£rülizeKP
(
buf„r
 *
buff
, 
keyPosôi⁄
 *
kp
);

9 
de£ølizeKP
(
buf„r
 *
buff
, 
keyPosôi⁄
 *
kp
);

11 
	skeyIndex
{

12 
	msize
;

13 
	mpos
;

14 
keyPosôi⁄
 *
	mki
;

15 }
	tkeyIndex
;

16 
‰ìTempHópKeyIndex
(
keyIndex
 *
ki
);

17 
‰ìIndexIndex
(
keyIndex
 *
ki
);

18 
keyIndex
 *
gëKeyIndex
(
size
);

19 
addIndexNŸC›y
(
keyIndex
 *
ki
, *
key
, 
pos
);

20 
keyIndex
 *
doIndexIndex
(keyIndex *
ki
);

	@db/memTable.c

1 
	~"memTabÀ.h
"

2 
	~"°rög.h
"

4 
	ss‹ãdDE
{

5 
di˘E¡ry
 **
	mï
;

6 
	msize
;

7 }
	ts‹ãdDE
;

9 
‰ìHópS‹ãdDE
(
s‹ãdDE
 *
de
);

10 
s‹ãdDE
 *
gëS‹ãdE¡ry
(
memTabÀ
 *
mt
);

12 
	$‰ìHópS‹ãdDE
(
s‹ãdDE
 *
de
)

14 if(!
de
)

16 if(
de
->
ï
)

17 
	`‰ì
(
de
->
ï
);

18 
	`‰ì
(
de
);

19 
	}
}

22 
	$keyCom∑ª
(c⁄° *
e1
, c⁄° *
e2
)

24 c⁄° 
di˘E¡ry
 **
x
 = (c⁄° di˘E¡ry**)
e1
;

25 c⁄° 
di˘E¡ry
 **
y
 = (c⁄° di˘E¡ry**)
e2
;

26  
	`°rcmp
((*)(*
x
)->
key
, (*)(*
y
)->key);

27 
	}
}

29 
gëKeyCFPaúCou¡
(
memTabÀ
 *
mt
, *
cou¡
);

30 
s‹ãdDE
 *
	$gëS‹ãdE¡ry
(
memTabÀ
 *
mt
)

32 
keyCFCou¡
 = 0, 
i
;

33 
s‹ãdDE
 *
tmp
 = 
NULL
;

34 
di˘Iãøt‹
 *
di
 = 
NULL
;

36 if(!
mt
){

37 
	`LOG_WRITE
("memÅable couldÇot beÇull\n");

38  
NULL
;

41 if(
	`gëKeyCFPaúCou¡
(
mt
, &
keyCFCou¡
) < 0){

42  
NULL
;

45 if(!(
tmp
 = (
s‹ãdDE
*)
	`ˇŒoc
((sortedDE), 1))){

46 
	`LOG_WRITE
("cannotálloc struct sorted DE\n");

47  
NULL
;

50 if(!(
tmp
->
ï
 = (
di˘E¡ry
 **)
	`mÆloc
((dictEntry *)

51 * 
keyCFCou¡
))){

52 
	`‰ìHópS‹ãdDE
(
tmp
);

53  
NULL
;

55 if(!(
di
 = 
	`di˘GëIãøt‹
(
mt
->
keyCF_∑ú
))){

56 
	`‰ìHópS‹ãdDE
(
tmp
);

57  
NULL
;

59 
tmp
->
size
 = 
keyCFCou¡
;

60 
i
 = 0; i < 
keyCFCou¡
; i++){

61 
tmp
->
ï
[
i
] = 
	`di˘Next
(
di
);

64 
	`di˘Rñó£Iãøt‹
(
di
);

65 
	`qs‹t
(
tmp
->
ï
,Åmp->
size
, (
di˘E¡ry
 *), 
keyCom∑ª
);

67  
tmp
;

68 
	}
}

72 
	$hashFunc
(c⁄° *
key
)

74 c⁄° *
°r
 = (c⁄° *)
key
;

75  
	`di˘GíHashFun˘i⁄
(
°r
, 
	`°æí
((const *)str));

76 
	}
}

78 
	$keyCF_∑úCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
)

80 c⁄° *
k1
 = (c⁄° *)
key1
;

81 c⁄° *
k2
 = (c⁄° *)
key2
;

82  
	`°rcmp
(
k1
, 
k2
) == 0;

83 
	}
}

84 
	$keyDe°ru˘‹
(*
¥ivd©a
, *
key
)

86 
	`‰ì
(
key
);

87 
	}
}

88 
	$vÆDe°ru˘‹
(*
¥ivd©a
, *
ob
)

90 
cﬁumnFamûy
 *
cf
 = (cﬁumnFamûy*)
ob
;

91 
	`‰ìHópCﬁumnFamûy
(
cf
);

92 
	}
}

94 
di˘Ty≥
 
	gmemTabÀTy≥
 = {

95 
hashFunc
,

96 
NULL
,

97 
NULL
,

98 
keyCF_∑úCom∑ª
,

99 
keyDe°ru˘‹
,

100 
vÆDe°ru˘‹


103 
memTabÀ
 *
	$gëMemTabÀ
()

105 
memTabÀ
 *
mt
 = 
NULL
;

106 
di˘
 *
key_cf
 = 
NULL
;

109 if(!(
mt
 = (
memTabÀ
*)
	`ˇŒoc
((memTable), 1))){

110  
NULL
;

113 if(!(
key_cf
 = 
	`di˘Cª©e
(&
memTabÀTy≥
, 
NULL
))){

114 
	`‰ì
(
mt
);

115 
	`LOG_WRITE
("cannot create dict\n");

116  
NULL
;

119 *
mt
 = (
memTabÀ
){
key_cf
};

120  
mt
;

121 
	}
}

123 
	$‰ìHópMemTabÀ
(
memTabÀ
 *
mt
)

125 if(!
mt
)

127 if(
mt
->
keyCF_∑ú
Ë
	`di˘Rñó£
(mt->keyCF_pair);

128 
	`‰ì
(
mt
);

129 
	}
}

131 
	$putKeyCFPaú
(
memTabÀ
 *
mt
, *
key
, 
cﬁumnFamûy
 *
cf
)

133 if(!
mt
 || !mt->
keyCF_∑ú
 || !
key
 || !
cf
)

136 if(
	`di˘Add
(
mt
->
keyCF_∑ú
, (*)
key
,

137 (*)
cf
Ë=
DICT_ERR
){

143 
	}
}

145 
cﬁumnFamûy
 * 
	$ªmoveKeyFromMT
(
memTabÀ
 *
mt
, *
key
)

147 
di˘E¡ry
 *
de
 = 
NULL
;

148 
cﬁumnFamûy
 *
cf
 = 
NULL
;

150 if(!
mt
 || !
key
 || !mt->
keyCF_∑ú
)

151  
NULL
;

153 if(!(
de
 = 
	`di˘Föd
(
mt
->
keyCF_∑ú
, (c⁄° *)
key
)))

154  
NULL
;

155 if(
	`di˘DñëeNoFªe
(
mt
->
keyCF_∑ú
, (c⁄° *)
key
) ==

156 
DICT_ERR
){

157  
NULL
;

160 
cf
 = (
cﬁumnFamûy
 *)
	`di˘GëE¡ryVÆ
(
de
);

161 
	`di˘FªeE¡ryKey
(
mt
->
keyCF_∑ú
, 
de
);

162 
	`‰ì
(
de
);

164  
cf
;

165 
	}
}

166 
	$‰ìKeyFromMt
(
memTabÀ
 *
mt
, c⁄° *
key
)

168 if(!
mt
 || !mt->
keyCF_∑ú
 || !
key
)

170 
	`di˘Dñëe
(
mt
->
keyCF_∑ú
, (*)
key
);

171 
	}
}

173 
	$ÊushToDisk
(
memTabÀ
 *
mt
, 
ssTabÀ
 *
s°
)

175 
i
;

176 
pos
;

177 
s‹ãdDE
 *
sde
 = 
NULL
;

178 
buf„r
 *
d©a
 = 
NULL
, *
ödex
 = NULL;

180 if(!
mt
 || !
s°
)

182 if(!
s°
->
d©aFûe
 || !s°->
ödexFûe
 ||

183 !
s°
->
bloomFûãrFûe
)

186 if(!(
sde
 = 
	`gëS‹ãdE¡ry
(
mt
)))

189 if(!(
d©a
 = 
	`gëBuf„r
()) ||

190 !(
ödex
 = 
	`gëBuf„r
())){

191 
	`‰ìHópS‹ãdDE
(
sde
);

192 
	`‰ìHópBuf„r
(
d©a
);

193 
	`‰ìHópBuf„r
(
ödex
);

196 
i
 = 0; i < 
sde
->
size
; i++){

197 *
key
 = (*)
sde
->
ï
[
i
]->key;

198 
cﬁumnFamûy
 *
cf
 = (cﬁumnFamûy*)
sde
->
ï
[
i
]->
vÆ
;

200 if(
	`wrôeByãs
(
key
, 
	`°æí
(keyË+ 1, 
d©a
) < 0 ||

201 
	`£rülizeCF
(
cf
, 
d©a
) < 0 ||

202 (
pos
 = 
	`wrôeSSTabÀD©a
(
d©a
, 
s°
)) < 0){

203 
	`‰ìHópS‹ãdDE
(
sde
);

204 
	`‰ìHópBuf„r
(
d©a
);

205 
	`‰ìHópBuf„r
(
ödex
);

209 if(
	`wrôeByãs
(
key
, 
	`°æí
(keyË+ 1, 
ödex
) < 0 ||

210 
	`wrôeL⁄g
(
pos
, 
ödex
) < 0 ||

211 
	`addSSTBF
(
key
, 
	`°æí
(key), 
s°
) < 0){

212 
	`‰ìHópS‹ãdDE
(
sde
);

213 
	`‰ìHópBuf„r
(
d©a
);

214 
	`‰ìHópBuf„r
(
ödex
);

217 
	`ª£t
(
d©a
);

219 
	`‰ìHópS‹ãdDE
(
sde
);

220 
	`‰ìHópBuf„r
(
d©a
);

222 if((
pos
 = 
	`wrôeSSTabÀIndex
(
ödex
, 
s°
)) < 0){

223 
	`‰ìHópBuf„r
(
ödex
);

227 
	`‰ìHópBuf„r
(
ödex
);

229 
	}
}

233 
	$ö£πMemTabÀ
(
memTabÀ
 *
mt
, 
rowMuèti⁄
 *
rm
)

235 
di˘E¡ry
 *
de
 = 
NULL
;

236 
cﬁumnFamûy
 *
cf
 = 
NULL
;

237 
cﬁumnAdd
 = 0;

239 if(!
mt
 || !mt->
keyCF_∑ú
 || !
rm
 ||

240 !
rm
->
key
 || !rm->
cf
)

244 
	`gëCFCﬁumnCou¡
(
rm
->
cf
, &
cﬁumnAdd
);

245 if(
	`putKeyCFPaú
(
mt
, 
rm
->
key
,Ñm->
cf
Ë=
DICT_OK
){

246 
rm
->
key
 = 
NULL
;

247 
rm
->
cf
 = 
NULL
;

248 
mt
->
cﬁumnCou¡
 +
cﬁumnAdd
;

249  
cﬁumnAdd
;

252 if(!(
de
 = 
	`di˘Föd
(
mt
->
keyCF_∑ú
, 
rm
->
key
))){

255 
cf
 = (
cﬁumnFamûy
 *)
	`di˘GëE¡ryVÆ
(
de
);

256 
cﬁumnAdd
 = 
	`ö£πCF
(
cf
, 
rm
->cf);

257 
mt
->
cﬁumnCou¡
 +
cﬁumnAdd
;

258  
cﬁumnAdd
;

259 
	}
}

261 
	$gëMTCﬁumnCou¡
(
memTabÀ
 *
mt
)

263 if(!
mt
 || !mt->
keyCF_∑ú
)

265  
mt
->
cﬁumnCou¡
;

268 
	}
}

269 
	$gëKeyCFPaúCou¡
(
memTabÀ
 *
mt
, *
cou¡
)

271 if(!
mt
 || !
cou¡
)

273 if(!
mt
->
keyCF_∑ú
)

275 *
cou¡
 = 
	`di˘Size
(
mt
->
keyCF_∑ú
);

277 
	}
}

280 
	$√edFlush
(
memTabÀ
 *
mt
)

282 
cou¡
;

284 if(!
mt
)

286 if((
cou¡
 = 
	`gëMTCﬁumnCou¡
(
mt
)) < 0)

288 if(
cou¡
 > 
COLUMNCOUNTTHRESHOLD
)

291 
	}
}

293 
cﬁumnFamûy
 *
	$födMTCF
(
memTabÀ
 *
mt
, 
quîyP©h
 *
qp
)

295 
di˘E¡ry
 *
de
 = 
NULL
;

297 if(!
mt
 || !
qp
 || !mt->
keyCF_∑ú
)

298  
NULL
;

300 
de
 = 
	`di˘Föd
(
mt
->
keyCF_∑ú
, 
qp
->
key
);

301 if(
de
)

302  (
cﬁumnFamûy
 *)
	`di˘GëE¡ryVÆ
(
de
);

303  
NULL
;

304 
	}
}

305 
cﬁumn
 *
	$födCﬁumn
(
memTabÀ
 *
mt
, 
quîyP©h
 *
qp
)

307 
cﬁumnFamûy
 *
cf
 = 
NULL
;

309 if(!
mt
 || !
qp
)

310  
NULL
;

311 if(!(
cf
 = 
	`födMTCF
(
mt
, 
qp
)))

312  
NULL
;

314  
	`födCFCﬁumn
(
cf
, 
qp
->
cﬁumnName
);

315 
	}
}

317 
	$memTLIn£π
(
memTabÀLi°
 *
mé
, 
memTabÀ
 *
mt
)

319 if(!
mé
 || !
mt
){

320 
	`LOG_WRITE
("argÉrror\n");

323 
	`LIST_INSERT_HEAD
(
mé
, 
mt
, 
lök
);

325 
	}
}

326 
memTabÀ
 *
	$gëFú°MT
(
memTabÀLi°
 *
mé
)

328 if(!
mé
){

329  
NULL
;

331 if(
	`LIST_EMPTY
(
mé
)){

332  
NULL
;

334  
	`LIST_FIRST
(
mé
);

335 
	}
}

337 
	$ªmoveMTFromLi°
(
memTabÀ
 *
mt
)

340 if(!
mt
){

343 
	`LIST_REMOVE
(
mt
, 
lök
);

344 
	}
}

345 
	$‰ìHópMemTL
(
memTabÀLi°
 *
mé
)

347 
memTabÀ
 *
tmp
 = 
NULL
;

348 if(!
mé
){

351 
tmp
 = 
	`gëFú°MT
(
mé
);

352 
tmp
 !
NULL
){

353 
	`ªmoveMTFromLi°
(
tmp
);

354 
	`‰ìHópMemTabÀ
(
tmp
);

355 
tmp
 = 
	`gëFú°MT
(
mé
);

357 
	}
}

	@db/memTable.h

1 #i‚de‡
_MEMTABLE_H_


2 
	#_MEMTABLE_H_


	)

3 
	~"cﬁumnFamûy.h
"

4 
	~"±hªad.h
"

5 
	~"di˘.h
"

6 
	~"ssTabÀ.h
"

7 
	~"rowMuèti⁄.h
"

8 
	~"queue.h
"

9 
	~"quîyP©h.h
"

11 
	#INSERTEDMAX
 10000

	)

12 
	#INSERTEDCOMPLETELYCF
 
INSERTEDMAX


	)

13 
	#INSERTEDFAILED
 -1

	)

14 
	#COLUMNCOUNTTHRESHOLD
 4000

	)

16 
	gssTabÀ
;

17 
	smemTabÀ
{

18 
di˘
 *
	mkeyCF_∑ú
;

19 
	mcﬁumnCou¡
;

20 
	m‰oze
;

21 
LIST_ENTRY
(
memTabÀ
Ë
	mlök
;

22 }
	tmemTabÀ
;

24 
memTabÀ
 *
gëMemTabÀ
();

25 
‰ìHópMemTabÀ
(
memTabÀ
 *
mt
);

26 
ö£πMemTabÀ
(
memTabÀ
 *
mt
, 
rowMuèti⁄
 *
rm
);

27 
cﬁumn
 *
födCﬁumn
(
memTabÀ
 *
mt
, 
quîyP©h
 *
qp
);

28 
gëKeyCFPaúCou¡
(
memTabÀ
 *
mt
, *
cou¡
);

29 
√edFlush
(
memTabÀ
 *
mt
);

30 
ÊushToDisk
(
memTabÀ
 *
mt
, 
ssTabÀ
 *
s°
);

33 
	$LIST_HEAD
(
	tmemTabÀLi°
, 
	tmemTabÀ
) memTableList;

35 
	`memTLIn£π
(
memTabÀLi°
 *
mé
, 
memTabÀ
 *
mt
);

36 
memTabÀ
 *
	`gëFú°MT
(
memTabÀLi°
 *
mé
);

37 
	`ªmoveMTFromLi°
(
memTabÀ
 *
mt
);

38 
	`‰ìHópMemTL
(
memTabÀLi°
 *
mé
);

40 
cﬁumnFamûy
 * 
	`ªmoveKeyFromMT
(
memTabÀ
 *
mt
, *
key
);

41 
	`‰ìKeyFromMt
(
memTabÀ
 *
mt
, c⁄° *
key
);

	@db/queryPath.c

1 
	~"quîyP©h.h
"

3 
	$‰ìHópQP
(
quîyP©h
 *
qp
)

5 if(
qp
)

8 if(
qp
->
key•a˚
)

9 
	`‰ì
(
qp
->
key•a˚
);

10 if(
qp
->
cfName
)

11 
	`‰ì
(
qp
->
cfName
);

12 if(
qp
->
key
)

13 
	`‰ì
(
qp
->
key
);

14 if(
qp
->
su≥rCﬁumnName
)

15 
	`‰ì
(
qp
->
su≥rCﬁumnName
);

16 if(
qp
->
cﬁumnName
)

17 
	`‰ì
(
qp
->
cﬁumnName
);

19 
	`‰ì
(
qp
);

20 
	}
}

	@db/queryPath.h

1 #i‚de‡
_QUERYPATH_H_


2 
	#_QUERYPATH_H_


	)

3 
	~"°dio.h
"

4 
	~"£rülize.h
"

6 
	squîyP©h
{

7 *
	mkey•a˚
;

8 *
	mcfName
;

9 *
	mkey
;

10 *
	msu≥rCﬁumnName
;

11 *
	mcﬁumnName
;

12 
	mbef‹e
;

13 }
	tquîyP©h
;

15 
‰ìHópQP
(
quîyP©h
 *
qp
);

17 
£rülizeQP©h
(
buf„r
 *
buff
, 
quîyP©h
 *
qp
);

18 
de£rülizeQP©h
(
buf„r
 *
buff
, 
quîyP©h
 **
qp
);

	@db/rowMutation.c

1 
	~"rowMuèti⁄.h
"

4 
rowMuèti⁄
 *
	$gëRM
()

6 
rowMuèti⁄
 *
rm
 = 
NULL
;

7 if(!(
rm
 = (
rowMuèti⁄
*)
	`mÆloc
((rowMutation)))){

8 
	`LOG_WRITE
("oom\n");

9  
NULL
;

13 *
rm
 = (
rowMuèti⁄
){
NULL
, NULL, NULL, NULL};

14  
rm
;

15 
	}
}

18 
	$‰ìHópRM
(
rowMuèti⁄
 *
rm
)

20 if(!
rm
)  ;

21 if(
rm
->
key•a˚Name
Ë
	`‰ì
(rm->keyspaceName);

22 if(
rm
->
key
Ë
	`‰ì
(rm->key);

23 if(
rm
->
cfName
Ë
	`‰ì
(rm->cfName);

24 if(
rm
->
cf
Ë
	`‰ìHópCﬁumnFamûy
(rm->cf);

25 
	`‰ì
(
rm
);

26 
	}
}

28 
	$£rülizeRM
(
buf„r
 *
b
, 
rowMuèti⁄
 *
rm
)

30 if(!
b
 || !
rm
 || !rm->
cf
)

34 if(
	`wrôeByãs
(
rm
->
key•a˚Name
, 
	`°æí
‘m->key•a˚NameË+ 1, 
b
) < 0 ||

35 
	`wrôeByãs
(
rm
->
key
, 
	`°æí
‘m->keyË+ 1, 
b
) < 0 ||

36 
	`wrôeByãs
(
rm
->
cfName
, 
	`°æí
‘m->cfNameË+ 1, 
b
) < 0 ||

37 
	`£rülizeCF
(
rm
->
cf
, 
b
) < 0){

41 
	}
}

42 
	$de£rülizeRM
(
buf„r
 *
b
, 
rowMuèti⁄
 *
rm
)

44 *
key
 = 
NULL
, *
cfName
 = NULL, *
key•a˚Name
 = NULL;

46 if(!
rm
)

49 if(
	`ªadByãs
(
b
, &
key•a˚Name
, 
NULL
) < 0 ||

50 
	`ªadByãs
(
b
, &
key
, 
NULL
) < 0 ||

51 
	`ªadByãs
(
b
, &
cfName
, 
NULL
) < 0){

52 if(
key
Ë
	`‰ì
(key);

53 if(
cfName
Ë
	`‰ì
(cfName);

54 if(
key•a˚Name
Ë
	`‰ì
(keyspaceName);

58 
rm
->
key
 = key;

59 
rm
->
cfName
 = cfName;

60 
rm
->
key•a˚Name
 = keyspaceName;

62 
cﬁumnFamûyMëad©a
 *
cfm
 = 
	`födCFMëaD©a
(
key•a˚Name
, 
cfName
);

64 if(!
cfm
){

67 
cﬁumnFamûy
 *
cf
 = 
NULL
;

68 if(!(
cf
 = 
	`gëCF
(
cfm
)))  -1;

70 
rm
->
cf
 = cf;

71 if(
	`de£rülizeCF
(
b
, 
rm
->
cf
) < 0){

75 
	}
}

78 
	$gëRMCFID
(
rowMuèti⁄
 *
rm
, *
id
)

80 if(!
rm
 || !rm->
cf
)

82  
	`gëCFID
(
rm
->
cf
, 
id
);

83 
	}
}

	@db/rowMutation.h

14 #i‚de‡
_ROWMUTATION_H_


15 
	#_ROWMUTATION_H_


	)

16 
	~"°dio.h
"

17 
	~"£rülize.h
"

18 
	~"cﬁumnFamûy.h
"

19 
	~"èbÀMëad©a.h
"

21 
	$RB_HEAD
(
	tcﬁumnFamûySë
, 
	tcﬁumnFamûy
) columnFamilySet;

23 
	srowMuèti⁄
{

24 *
key•a˚Name
;

25 *
key
;

26 *
cfName
;

27 
cﬁumnFamûy
 *
cf
;

28 }
	trowMuèti⁄
;

31 
rowMuèti⁄
 *
	`gëRM
();

32 
	`‰ìHópRM
(
rowMuèti⁄
 *
rm
);

34 
	`£rülizeRM
(
buf„r
 *
b
, 
rowMuèti⁄
 *
rm
);

35 
	`de£rülizeRM
(
buf„r
 *
b
, 
rowMuèti⁄
 *
rm
);

36 
	`gëRMCFID
(
rowMuèti⁄
 *
rm
, *
id
);

38 
	`ö£πRM
(
rowMuèti⁄
 *
rm
);

	@db/ssTable.c

1 
	~"ssTabÀ.h
"

2 
	~"buf„r.h
"

3 
	~"èbÀMëad©a.h
"

4 
	~"cﬁumnFamûy.h
"

7 
±hªad_muãx_t
 
	gs°Muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

8 
	gcurSSTSN
 = 0;

10 
‰ìHópSST
(
ssTabÀ
 *
s°
);

12 
	$£tCurSSTSN
(
¢
)

14 if(
¢
 < 0){

15 
	`LOG_WRITE
("error SSTSN\n");

18 
	`±hªad_muãx_lock
(&
s°Muãx
);

19 
curSSTSN
 = 
¢
;

20 
	`±hªad_muãx_u∆ock
(&
s°Muãx
);

22 
	}
}

24 
	$öcSSTSN
()

26 
	`±hªad_muãx_lock
(&
s°Muãx
);

27 
curSSTSN
++;

28 
	`±hªad_muãx_u∆ock
(&
s°Muãx
);

30 
	}
}

36 
	$makeSSTabÀP©h
(c⁄° *
d©aP©h
, *
key•a˚
,

37 *
cfName
, *
suffix
, **
∑th
)

39 *
p
 = 
NULL
;

40 
a
[10] = {0};

43 if(!
key•a˚
 || !
cfName
 || !
suffix
 || !
∑th
)

45 if(!(
p
 = (*)
	`mÆloc
(200)))

48 
	`°r˝y
(
p
, 
d©aP©h
);

49 
	`°rˇt
(
p
, "/data/");

50 
	`°rˇt
(
p
, 
key•a˚
);

51 
	`°rˇt
(
p
, "/");

52 
	`°rˇt
(
p
, 
cfName
);

53 
	`±hªad_muãx_lock
(&
s°Muãx
);

54 
	`•rötf
(
a
, "-%d-", 
curSSTSN
);

55 
	`±hªad_muãx_u∆ock
(&
s°Muãx
);

56 
	`°rˇt
(
p
, 
a
);

57 
	`°rˇt
(
p
, 
suffix
);

59 *
∑th
 = 
p
;

61 
	}
}

63 
	$de¸SSTRef
(
ssTabÀ
 *
s°
)

65 if(!
s°
)

67 
	`±hªad_muãx_lock
(&
s°Muãx
);

68 
s°
->
ªfCou¡
--;

69 if(!
s°
->
ªfCou¡
)

70 
	`‰ìHópSST
(
s°
);

71 
	`±hªad_muãx_u∆ock
(&
s°Muãx
);

72 
	}
}

73 
	$ö¸SSTRef
(
ssTabÀ
 *
s°
)

75 if(!
s°
)

77 
	`±hªad_muãx_lock
(&
s°Muãx
);

78 
s°
->
ªfCou¡
++;

79 
	`±hªad_muãx_u∆ock
(&
s°Muãx
);

80 
	}
}

82 
	$‰ìHópSST
(
ssTabÀ
 *
s°
)

84 if(!
s°
) ;

86 if(
s°
->
d©aFûe
Ë
	`‰ìHópFûe
(sst->dataFile);

87 if(
s°
->
ödexFûe
Ë
	`‰ìHópFûe
(sst->indexFile);

88 if(
s°
->
bloomFûãrFûe
Ë
	`‰ìHópFûe
(sst->bloomFilterFile);

89 if(
s°
->
bf
Ë
	`‰ìHópBF
(sst->bf);

91 
	`‰ì
(
s°
);

92 
	}
}

93 
ssTabÀ
 *
	$›íWrôeSSTabÀ
(
cﬁumnFamûyMëad©a
 *
cfmd
, 
keyCou¡
)

95 *
key•a˚
 = 
NULL
;

96 *
cfName
 = 
NULL
;

97 c⁄° *
d©aP©h
 = 
NULL
;

98 *
d∑th
 = 
NULL
, *
I≈©h
 = NULL,*
fûãΩ©h
 = NULL;

99 
ssTabÀ
 *
s°emp
 = 
NULL
;

101 if(!
cfmd
 || 
keyCou¡
 <=0 ){

102 
	`LOG_WRITE
("argÉrror \n");

103  
NULL
;

106 
key•a˚
 = 
cfmd
->
key•a˚Name
;

107 
cfName
 = 
cfmd
->cfName;

109 if(
cfmd
 =
NULL
)

110  
NULL
;

112 if(
	`gëD©aP©h
(&
d©aP©h
) < 0){

113  
NULL
;

116 if(!(
s°emp
 = (
ssTabÀ
 *)
	`ˇŒoc
((ssTable), 1)))

117  
NULL
;

119 if(
	`makeSSTabÀP©h
(
d©aP©h
, 
key•a˚
, 
cfName
, "Data.db",

120 &
d∑th
) < 0||

121 
	`makeSSTabÀP©h
(
d©aP©h
, 
key•a˚
, 
cfName
, "Index.db",

122 &
I≈©h
) < 0||

123 
	`makeSSTabÀP©h
(
d©aP©h
, 
key•a˚
, 
cfName
, "Filter.db",

124 &
fûãΩ©h
) < 0){

125 
	`de¸SSTRef
(
s°emp
);

126 if(
d∑th
Ë
	`‰ì
(dpath);

127 if(
I≈©h
Ë
	`‰ì
(Inpath);

128 if(
fûãΩ©h
Ë
	`‰ì
(filterpath);

129  
NULL
;

133 if(
	`›íWrôeFûe
(
d∑th
, 
DATABUFFERSZ
, &
s°emp
->
d©aFûe
) < 0 ||

134 
	`›íWrôeFûe
(
I≈©h
, 
INDEXBUFFERSZ
, &
s°emp
->
ödexFûe
) < 0 ||

135 
	`›íWrôeFûe
(
fûãΩ©h
, 
FILTERBUFFERSZ
,

136 &
s°emp
->
bloomFûãrFûe
) < 0 ||

137 
	`gëBloomFûãr
(
KEYHASHCOUNT
, 
keyCou¡
, &
s°emp
->
bf
) < 0){

138 
	`de¸SSTRef
(
s°emp
);

139 
	`‰ì
(
d∑th
);

140 
	`‰ì
(
I≈©h
);

141 
	`‰ì
(
fûãΩ©h
);

142  
NULL
;

145 
	`öcSSTSN
();

146 
	`‰ì
(
d∑th
);

147 
	`‰ì
(
I≈©h
);

148 
	`‰ì
(
fûãΩ©h
);

150 
s°emp
->
ty≥
 = 
WRITE_TYPE
;

151 
s°emp
->
ªfCou¡
++;

152 
s°emp
->
ªfCou¡
 = 1;

154  
s°emp
;

155 
	}
}

157 
	$wrôeSSTabÀD©a
(
buf„r
 *
cf
, 
ssTabÀ
 *
s°
)

159 
curPos
 = 0;

161 if(!
cf
 || !
s°
)

163 if(!
s°
->
d©aFûe
 || !s°->
ödexFûe
)

165 if((
curPos
 = 
	`gëCurFûePos
(
s°
->
d©aFûe
))

169 if(
	`wrôeAµídFûe
(
s°
->
d©aFûe
, 
cf
) < 0)

172  
curPos
;

173 
	}
}

175 
	$wrôeSSTabÀIndex
(
buf„r
 *
ödex
, 
ssTabÀ
 *
s°
)

177 
curPos
 = 0;

178 if(!
ödex
 || !
s°
)

180 if(!
s°
->
ödexFûe
)

182 if((
curPos
 = 
	`gëCurFûePos
(
s°
->
ödexFûe
))

185 if(
	`wrôeAµídFûe
(
s°
->
ödexFûe
, 
ödex
) < 0)

187  
curPos
;

188 
	}
}

189 
	$wrôeSSTabÀBF
(
buf„r
 *
bf
, 
ssTabÀ
 *
s°
)

191 if(!
bf
 || !
s°
)

193 if(!
s°
->
bloomFûãrFûe
)

195 if(
	`wrôeAµídFûe
(
s°
->
bloomFûãrFûe
, 
bf
)

199 
	}
}

201 
	$addSSTBF
(*
key
, 
Àn
, 
ssTabÀ
 *
s°
)

203 if(!
s°
 || !s°->
bf
)  -1;

204  
	`addToBF
(
s°
->
bf
, 
key
, 
Àn
);

205 
	}
}

207 
ssTabÀ
 *
	$›íRódFromWrôe
(
ssTabÀ
 *
s°W
)

209 
buf„r
 *
buff
 = 
NULL
;

210 
ssTabÀ
 *
tmp
 = 
NULL
;

212 if(!
s°W
 || s°W->
ty≥
 !
WRITE_TYPE
 ||

213 !
s°W
->
d©aFûe
 ||

214 !
s°W
->
ödexFûe
 || !s°W->
bloomFûãrFûe
 ||

215 !
s°W
->
bf
)

216  
NULL
;

218 if(!(
buff
 = 
	`gëBuf„r
())){

219  
NULL
;

222 if(
	`£rülizeBF
(
buff
, 
s°W
->
bf
) < 0 ||

223 
	`wrôeSSTabÀBF
(
buff
, 
s°W
) < 0){

224 
	`‰ìHópBuf„r
(
buff
);

225  
NULL
;

227 
	`‰ìHópBuf„r
(
buff
);

229 if(!(
tmp
 = (
ssTabÀ
 *)
	`ˇŒoc
((ssTable), 1)) ||

230 
	`›íRódîFûeFromExi°
(
s°W
->
d©aFûe
,
DATABUFFERSZ
,

231 &
tmp
->
d©aFûe
) < 0 ||

232 
	`›íRódîFûeFromExi°
(
s°W
->
ödexFûe
, 
INDEXBUFFERSZ
,

233 &
tmp
->
ödexFûe
Ë< 0 || !—mp->
bf
 =

234 
	`dupBloomFûãr
(
s°W
->
bf
))){

235 if(
tmp
)

236 
	`de¸SSTRef
(
tmp
);

237  
NULL
;

240 
tmp
->
ty≥
 = 
READ_TYPE
;

241 
tmp
->
ªfCou¡
 = 1;

242  
tmp
;

243 
	}
}

244 
	$ssTLIn£π
(
ssTabÀLi°
 *
s°l
, 
ssTabÀ
 *
s°
)

246 if(!
s°l
 || !
s°
)

249 
	`LIST_INSERT_HEAD
(
s°l
, 
s°
, 
lök
);

251 
	}
}

252 
	$gëFú°SSTL
(
ssTabÀLi°
 *
s°l
, 
ssTabÀ
 **
s°
)

254 if(!
s°l
 || !
s°
)

256 if(
	`LIST_EMPTY
(
s°l
))

259 *
s°
 = 
	`LIST_FIRST
(
s°l
);

261 
	}
}

262 
	$ªmoveFú°SSTL
(
ssTabÀLi°
 *
s°l
, 
ssTabÀ
 **
s°
)

264 
ssTabÀ
 *
curs°
 = 
NULL
;

265 if(!
s°l
)

267 if(
	`gëFú°SSTL
(
s°l
, &
curs°
) < 0)

269 if(
s°
){

270 *
s°
 = 
curs°
;

272 
	`de¸SSTRef
(
curs°
);

275 
	}
}

277 
	$‰ìHópSSTL
(
ssTabÀLi°
 *
s°l
)

279 
	`ªmoveFú°SSTL
(
s°l
, 
NULL
) == 0)

281 
	}
}

	@db/ssTable.h

1 #i‚de‡
_SSTABLE_H_


2 
	#_SSTABLE_H_


	)

3 
	~"uni°d.h
"

4 
	~"°dio.h
"

5 
	~"queue.h
"

6 
	~"log.h
"

7 
	~"£rülize.h
"

8 
	~"sys/ty≥s.h
"

9 
	~"±hªad.h
"

10 
	~"°dlib.h
"

11 
	~"f˙é.h
"

12 
	~"sys/°©.h
"

13 
	~"auxûFûe.h
"

14 
	~"bloomFûãr.h
"

15 
	~"èbÀMëad©a.h
"

16 
	~"cﬁumnFamûy.h
"

17 
	~"memTabÀ.h
"

18 
	~"°döt.h
"

20 
	#K_1
 1024

	)

21 
	#M_1
 1024*
K_1


	)

22 
	#DATABUFFERSZ
 
M_1


	)

23 
	#INDEXBUFFERSZ
 
M_1


	)

24 
	#FILTERBUFFERSZ
 20*
K_1


	)

26 
	#READ_TYPE
 1

	)

27 
	#WRITE_TYPE
 2

	)

28 
	gmemTabÀ
;

29 
£tCurSSTSN
(
¢
);

31 
	sssTabÀ
{

32 
fûeAb°ø˘
 *
	md©aFûe
;

33 
fûeAb°ø˘
 *
	mödexFûe
;

34 
fûeAb°ø˘
 *
	mbloomFûãrFûe
;

35 
bloomFûãr
 *
	mbf
;

36 
	mty≥
;

37 
uöt32_t
 
	mªfCou¡
;

38 
LIST_ENTRY
(
ssTabÀ
Ë
	mlök
;

39 }
	tssTabÀ
;

41 
de¸SSTRef
(
ssTabÀ
 *
s°
);

42 
ö¸SSTRef
(
ssTabÀ
 *
s°
);

43 
ssTabÀ
 *
›íWrôeSSTabÀ
(
cﬁumnFamûyMëad©a
 *
cfmd
, 
keyCou¡
);

45 
wrôeSSTabÀD©a
(
buf„r
 *
cf
, 
ssTabÀ
 *
s°
);

46 
wrôeSSTabÀIndex
(
buf„r
 *
ödex
, 
ssTabÀ
 *
s°
);

47 
wrôeSSTabÀBF
(
buf„r
 *
bf
, 
ssTabÀ
 *
s°
);

49 
ÊushMemToSST
(
memTabÀ
 *
mt
, 
ssTabÀ
 *
s°
);

50 
ssTabÀ
 *
›íRódFromWrôe
(ssTabÀ *
s°W
);

51 
addSSTBF
(*
key
, 
Àn
, 
ssTabÀ
 *
s°
);

56 
m¨kDñëe
(
ssTabÀ
 *
s°
);

58 
dñëeSSTabÀ
(
ssTabÀ
 *
s°
);

59 
gëSSTabÀFromCFMD
(
ssTabÀ
 **
s°
, 
cﬁumnFamûyMëad©a
 *
cfmd
);

61 
	$LIST_HEAD
(
	tssTabÀLi°
, 
	tssTabÀ
) ssTableList;

62 
	`ssTLIn£π
(
ssTabÀLi°
 *
s°l
, 
ssTabÀ
 *
s°
);

63 
	`gëFú°SSTL
(
ssTabÀLi°
 *
s°l
, 
ssTabÀ
 **
s°
);

64 
	`ªmoveFú°SSTL
(
ssTabÀLi°
 *
s°l
, 
ssTabÀ
 **
s°
);

65 
	`‰ìHópSSTL
(
ssTabÀLi°
 *
s°l
);

	@db/superColumn.c

1 
	~"su≥rCﬁumn.h
"

4 
ölöe
 
	$su≥rCﬁumnComp
(
su≥rCﬁumn
 *
x
, su≥rCﬁum¿*
y
)

6 
	`POINTER_NOT_NULL
(
x
);

7 
	`POINTER_NOT_NULL
(
y
);

8  
	`°rcmp
(
x
->
«me
, 
y
->name);

9 
	}
}

11 
RB_PROTOTYPE
(
su≥rCﬁumnSë
, 
su≥rCﬁumn
, 
lök
, 
su≥rCﬁumnComp
);

12 
RB_GENERATE
(
su≥rCﬁumnSë
, 
su≥rCﬁumn
, 
lök
, 
su≥rCﬁumnComp
);

	@db/superColumn.h

1 #i‚de‡
_SUPERCOLUMN_H_


2 
	#_SUPERCOLUMN_H_


	)

3 
	~"cﬁumn.h
"

4 
	#MAX
(
x
, 
y
Ë((xË> (yË? (xË: (y))

	)

6 
	ssu≥rCﬁumn
{

7 *
	m«me
;

8 
	mm¨kedF‹Dñëe
;

9 
	mloˇlDñëe
;

10 
	mcﬁumnCou¡
;

11 
cﬁumnSë
 
	mcﬁumns
;

12 
RB_ENTRY
(
su≥rCﬁumn
Ë
	mlök
;

13 }
	tsu≥rCﬁumn
;

16 
	$RB_HEAD
(
	tsu≥rCﬁumnSë
,
	tsu≥rCﬁumn
) superColumnSet;

	@db/test.c

1 
	~"auxiRBåì.h
"

2 
	~"°dio.h
"

3 
	~"cﬁumn.h
"

4 
	~"ssTabÀ.h
"

5 
	~"èbÀMëad©a.h
"

6 
	~"c⁄fig.h
"

7 
	~"d©aModñ.h
"

8 
	~"cﬁumnFamûy.h
"

9 
	~"commôLog.h
"

11 *
	gc⁄fig
 = "./cassandra.conf";

13 
	$maö
()

15 
rowMuèti⁄
 *
rm
 = 
NULL
;

16 
cﬁumnFamûy
 *
cf
 = 
NULL
;

17 
cﬁumn
 *
x
 = 
NULL
;

18 
quîyP©h
 
qp
 = {"Te°", "cf1", "key0", 
NULL
, "name", 0};

21 if(
	`lﬂdC⁄fig
(
c⁄fig
) < 0 ){

22 
	`LOG_WRITE
("cannotÜoad configure ");

25 
	`¥ötTabÀMëad©a
();

26 if(
	`öôDM
() < 0){

27 
	`LOG_WRITE
("INIT dataModelÉrror\n");

30 
i
;

31 
i
 = 0; i < 100000; i++){

32 
keytmp
[300];

34 
	`•rötf
(
keytmp
, "key%d", 
i
);

36 if(!(
rm
 = (
rowMuèti⁄
 *)
	`ˇŒoc
((rowMutation), 1))){

40 
rm
->
key•a˚Name
 = 
	`°rdup
("Test");

41 
rm
->
key
 = 
	`°rdup
(
keytmp
);

42 
rm
->
cfName
 = 
	`°rdup
("cf1");

43 
cﬁumnFamûyMëad©a
 *
cfmd
 = 
	`födCFMëaD©a
(
rm
->
key•a˚Name
,

44 
rm
->
cfName
);

46 if(!
cfmd
 || !(
cf
 = 
	`gëCF
(cfmd))){

49 
cf
->
loˇlDñëe
 = 2000;

50 
cf
->
m¨kedF‹Dñëe
= 2000;

52 
x
 = 
	`gëCﬁumn
();

53 if(!
x
){

56 
x
->
«me
 = 
	`°rdup
("name");

57 
x
->
vÆue
 = 
	`°rdup
("ydx");

58 
x
->
time°amp
 = 20000;

61 if(
	`addCFCﬁumn
(
cf
, 
x
) < 0){

62 
	`LOG_WRITE
("cannotádd columnÅo cf\n");

63 
	`de¸CﬁumnRef
(
x
);

64 
x
 = 
NULL
;

67 
rm
->
cf
 = cf;

69 if(
	`ö£πDM
(
rm
) < 0){

70 
	`LOG_WRITE
("insertÉrror\n");

71 
	`‰ìHópRM
(
rm
);

75 
	`‰ìHópRM
(
rm
);

89 
	}
}

	@db/tree.h

27 #i‚def 
_SYS_TREE_H_


28 
	#_SYS_TREE_H_


	)

73 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

74 
	s«me
 { \

75 
ty≥
 *
•h_roŸ
; \

76 }

	)

78 
	#SPLAY_INITIALIZER
(
roŸ
) \

79 { 
NULL
 }

	)

81 
	#SPLAY_INIT
(
roŸ
) do { \

82 (
roŸ
)->
•h_roŸ
 = 
NULL
; \

83 } 0)

	)

85 
	#SPLAY_ENTRY
(
ty≥
) \

87 
ty≥
 *
•e_À·
; \

88 
ty≥
 *
•e_right
; \

89 }

	)

91 
	#SPLAY_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_À·


	)

92 
	#SPLAY_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_right


	)

93 
	#SPLAY_ROOT
(
hód
Ë(hód)->
•h_roŸ


	)

94 
	#SPLAY_EMPTY
(
hód
Ë(
	`SPLAY_ROOT
(hódË=
NULL
)

	)

97 
	#SPLAY_ROTATE_RIGHT
(
hód
, 
tmp
, 
fõld
) do { \

98 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
tmp
, field); \

99 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

100 (
hód
)->
•h_roŸ
 = 
tmp
; \

101 } 0)

	)

103 
	#SPLAY_ROTATE_LEFT
(
hód
, 
tmp
, 
fõld
) do { \

104 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
tmp
, field); \

105 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

106 (
hód
)->
•h_roŸ
 = 
tmp
; \

107 } 0)

	)

109 
	#SPLAY_LINKLEFT
(
hód
, 
tmp
, 
fõld
) do { \

110 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

111 
tmp
 = (
hód
)->
•h_roŸ
; \

112 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
); \

113 } 0)

	)

115 
	#SPLAY_LINKRIGHT
(
hód
, 
tmp
, 
fõld
) do { \

116 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

117 
tmp
 = (
hód
)->
•h_roŸ
; \

118 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
); \

119 } 0)

	)

121 
	#SPLAY_ASSEMBLE
(
hód
, 
node
, 
À·
, 
right
, 
fõld
) do { \

122 
	`SPLAY_RIGHT
(
À·
, 
fõld
Ë
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, field); \

123 
	`SPLAY_LEFT
(
right
, 
fõld
Ë
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, field);\

124 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
node
, field); \

125 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
node
, field); \

126 } 0)

	)

130 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

131 
«me
##
	`_SPLAY
(«mê*, 
ty≥
 *); \

132 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

133 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

134 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

137 
__ölöe
 
ty≥
 * \

138 
«me
##
	`_SPLAY_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

140 i‡(
	`SPLAY_EMPTY
(
hód
)) \

141 (
NULL
); \

142 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

143 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) \

144  (
hód
->
•h_roŸ
); \

145  (
NULL
); \

148 
__ölöe
 
ty≥
 * \

149 
«me
##
	`_SPLAY_NEXT
(«mê*
hód
, 
ty≥
 *
ñm
) \

151 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

152 i‡(
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë!
NULL
) { \

153 
ñm
 = 
	`SPLAY_RIGHT
”lm, 
fõld
); \

154 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë!
NULL
) { \

155 
ñm
 = 
	`SPLAY_LEFT
”lm, 
fõld
); \

158 
ñm
 = 
NULL
; \

159  (
ñm
); \

162 
__ölöe
 
ty≥
 * \

163 
«me
##
	`_SPLAY_MIN_MAX
(«mê*
hód
, 
vÆ
) \

165 
«me
##
	`_SPLAY_MINMAX
(
hód
, 
vÆ
); \

166  (
	`SPLAY_ROOT
(
hód
)); \

167 }

	)

172 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

173 
ty≥
 * \

174 
«me
##
	`_SPLAY_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

176 i‡(
	`SPLAY_EMPTY
(
hód
)) { \

177 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë
	`SPLAY_RIGHT
”lm, fõldË
NULL
; \

179 
__comp
; \

180 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

181 
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
); \

182 if(
__comp
 < 0) { \

183 
	`SPLAY_LEFT
(
ñm
, 
fõld
ËSPLAY_LEFT((
hód
)->
•h_roŸ
, field);\

184 
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

185 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

186 } i‡(
__comp
 > 0) { \

187 
	`SPLAY_RIGHT
(
ñm
, 
fõld
ËSPLAY_RIGHT((
hód
)->
•h_roŸ
, field);\

188 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

189 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

191  ((
hód
)->
•h_roŸ
); \

193 (
hód
)->
•h_roŸ
 = (
ñm
); \

194  (
NULL
); \

197 
ty≥
 * \

198 
«me
##
	`_SPLAY_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

200 
ty≥
 *
__tmp
; \

201 i‡(
	`SPLAY_EMPTY
(
hód
)) \

202  (
NULL
); \

203 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

204 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) { \

205 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) { \

206 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
);\

208 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

209 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
);\

210 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

211 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
__tmp
; \

213  (
ñm
); \

215  (
NULL
); \

219 
«me
##
	`_SPLAY
(«mê*
hód
, 
ty≥
 *
ñm
) \

221 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

222 
__comp
; \

224 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

225 
__À·
 = 
__right
 = &
__node
; \

227 (
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
))) { \

228 i‡(
__comp
 < 0) { \

229 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

230 i‡(
__tmp
 =
NULL
) \

232 i‡((
cmp
)(
ñm
, 
__tmp
) < 0){ \

233 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

234 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

237 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

238 } i‡(
__comp
 > 0) { \

239 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

240 i‡(
__tmp
 =
NULL
) \

242 i‡((
cmp
)(
ñm
, 
__tmp
) > 0){ \

243 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

244 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

247 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

250 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

256 
«me
##
	`_SPLAY_MINMAX
(«mê*
hód
, 
__comp
) \

258 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

260 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

261 
__À·
 = 
__right
 = &
__node
; \

264 i‡(
__comp
 < 0) { \

265 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

266 i‡(
__tmp
 =
NULL
) \

268 i‡(
__comp
 < 0){ \

269 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

270 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

273 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

274 } i‡(
__comp
 > 0) { \

275 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

276 i‡(
__tmp
 =
NULL
) \

278 i‡(
__comp
 > 0) { \

279 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

280 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

283 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

286 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

287 }

	)

289 
	#SPLAY_NEGINF
 -1

	)

290 
	#SPLAY_INF
 1

	)

292 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_INSERT
(x, y)

	)

293 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_REMOVE
(x, y)

	)

294 
	#SPLAY_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_FIND
(x, y)

	)

295 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_NEXT
(x, y)

	)

296 
	#SPLAY_MIN
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

297 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

298 
	#SPLAY_MAX
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

299 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

301 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hód
) \

302 (
x
Ë
	`SPLAY_MIN
(
«me
, 
hód
); \

303 (
x
Ë!
NULL
; \

304 (
x
Ë
	`SPLAY_NEXT
(
«me
, 
hód
, x))

	)

307 
	#RB_HEAD
(
«me
, 
ty≥
) \

308 
	s«me
 { \

309 
ty≥
 *
rbh_roŸ
; \

310 }

	)

312 
	#RB_INITIALIZER
(
roŸ
) \

313 { 
NULL
 }

	)

315 
	#RB_INIT
(
roŸ
) do { \

316 (
roŸ
)->
rbh_roŸ
 = 
NULL
; \

317 } 0)

	)

319 
	#RB_BLACK
 0

	)

320 
	#RB_RED
 1

	)

321 
	#RB_ENTRY
(
ty≥
) \

323 
ty≥
 *
rbe_À·
; \

324 
ty≥
 *
rbe_right
; \

325 
ty≥
 *
rbe_∑ª¡
; \

326 
rbe_cﬁ‹
; \

327 }

	)

329 
	#RB_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_À·


	)

330 
	#RB_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_right


	)

331 
	#RB_PARENT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_∑ª¡


	)

332 
	#RB_COLOR
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_cﬁ‹


	)

333 
	#RB_ROOT
(
hód
Ë(hód)->
rbh_roŸ


	)

334 
	#RB_EMPTY
(
hód
Ë(
	`RB_ROOT
(hódË=
NULL
)

	)

336 
	#RB_SET
(
ñm
, 
∑ª¡
, 
fõld
) do { \

337 
	`RB_PARENT
(
ñm
, 
fõld
Ë
∑ª¡
; \

338 
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
”lm, fõldË
NULL
; \

339 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_RED
; \

340 } 0)

	)

342 
	#RB_SET_BLACKRED
(
bœck
, 
ªd
, 
fõld
) do { \

343 
	`RB_COLOR
(
bœck
, 
fõld
Ë
RB_BLACK
; \

344 
	`RB_COLOR
(
ªd
, 
fõld
Ë
RB_RED
; \

345 } 0)

	)

347 #i‚de‡
RB_AUGMENT


348 
	#RB_AUGMENT
(
x
)

	)

351 
	#RB_ROTATE_LEFT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

352 (
tmp
Ë
	`RB_RIGHT
(
ñm
, 
fõld
); \

353 i‡((
	`RB_RIGHT
(
ñm
, 
fõld
Ë
	`RB_LEFT
(
tmp
, field))) { \

354 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË(
ñm
); \

356 
	`RB_AUGMENT
(
ñm
); \

357 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

358 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

359 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

361 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

363 (
hód
)->
rbh_roŸ
 = (
tmp
); \

364 
	`RB_LEFT
(
tmp
, 
fõld
Ë(
ñm
); \

365 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

366 
	`RB_AUGMENT
(
tmp
); \

367 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

368 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

369 } 0)

	)

371 
	#RB_ROTATE_RIGHT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

372 (
tmp
Ë
	`RB_LEFT
(
ñm
, 
fõld
); \

373 i‡((
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
(
tmp
, field))) { \

374 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË(
ñm
); \

376 
	`RB_AUGMENT
(
ñm
); \

377 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

378 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

379 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

381 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

383 (
hód
)->
rbh_roŸ
 = (
tmp
); \

384 
	`RB_RIGHT
(
tmp
, 
fõld
Ë(
ñm
); \

385 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

386 
	`RB_AUGMENT
(
tmp
); \

387 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

388 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

389 } 0)

	)

392 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

393 
«me
##
	`_RB_INSERT_COLOR
(«mê*, 
ty≥
 *); \

394 
«me
##
	`_RB_REMOVE_COLOR
(«mê*, 
ty≥
 *, type *);\

395 
ty≥
 *
«me
##
	`_RB_REMOVE
(name *, type *); \

396 
ty≥
 *
«me
##
	`_RB_INSERT
(name *, type *); \

397 
ty≥
 *
«me
##
	`_RB_FIND
(name *, type *); \

398 
ty≥
 *
«me
##
	`_RB_NEXT
(type *); \

399 
ty≥
 *
«me
##
	`_RB_MINMAX
(name *, ); \

401 

	)

405 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

407 
«me
##
	`_RB_INSERT_COLOR
(«mê*
hód
, 
ty≥
 *
ñm
) \

409 
ty≥
 *
∑ª¡
, *
g∑ª¡
, *
tmp
; \

410 (
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
)) && \

411 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë=
RB_RED
) { \

412 
g∑ª¡
 = 
	`RB_PARENT
(
∑ª¡
, 
fõld
); \

413 i‡(
∑ª¡
 =
	`RB_LEFT
(
g∑ª¡
, 
fõld
)) { \

414 
tmp
 = 
	`RB_RIGHT
(
g∑ª¡
, 
fõld
); \

415 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

416 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

417 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

418 
ñm
 = 
g∑ª¡
; \

421 i‡(
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

422 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

423 
tmp
 = 
∑ª¡
; \

424 
∑ª¡
 = 
ñm
; \

425 
ñm
 = 
tmp
; \

427 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

428 
	`RB_ROTATE_RIGHT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

430 
tmp
 = 
	`RB_LEFT
(
g∑ª¡
, 
fõld
); \

431 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

432 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

433 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

434 
ñm
 = 
g∑ª¡
; \

437 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

438 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

439 
tmp
 = 
∑ª¡
; \

440 
∑ª¡
 = 
ñm
; \

441 
ñm
 = 
tmp
; \

443 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

444 
	`RB_ROTATE_LEFT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

447 
	`RB_COLOR
(
hód
->
rbh_roŸ
, 
fõld
Ë
RB_BLACK
; \

451 
«me
##
	`_RB_REMOVE_COLOR
(«mê*
hód
, 
ty≥
 *
∑ª¡
, ty≥ *
ñm
) \

453 
ty≥
 *
tmp
; \

454 (
ñm
 =
NULL
 || 
	`RB_COLOR
”lm, 
fõld
Ë=
RB_BLACK
) && \

455 
ñm
 !
	`RB_ROOT
(
hód
)) { \

456 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

457 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

458 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

459 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

460 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

461 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

463 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

464 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

465 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

466 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

467 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

468 
ñm
 = 
∑ª¡
; \

469 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

471 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

472 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

473 
ty≥
 *
ﬁe·
; \

474 i‡((
ﬁe·
 = 
	`RB_LEFT
(
tmp
, 
fõld
)))\

475 
	`RB_COLOR
(
ﬁe·
, 
fõld
Ë
RB_BLACK
;\

476 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

477 
	`RB_ROTATE_RIGHT
(
hód
, 
tmp
, 
ﬁe·
, 
fõld
);\

478 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

480 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

481 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

482 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
)) \

483 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

484 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

485 
ñm
 = 
	`RB_ROOT
(
hód
); \

489 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

490 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

491 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

492 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

493 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

495 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

496 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

497 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

498 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

499 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

500 
ñm
 = 
∑ª¡
; \

501 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

503 i‡(
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

504 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

505 
ty≥
 *
‹ight
; \

506 i‡((
‹ight
 = 
	`RB_RIGHT
(
tmp
, 
fõld
)))\

507 
	`RB_COLOR
(
‹ight
, 
fõld
Ë
RB_BLACK
;\

508 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

509 
	`RB_ROTATE_LEFT
(
hód
, 
tmp
, 
‹ight
, 
fõld
);\

510 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

512 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

513 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

514 i‡(
	`RB_LEFT
(
tmp
, 
fõld
)) \

515 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

516 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

517 
ñm
 = 
	`RB_ROOT
(
hód
); \

522 i‡(
ñm
) \

523 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_BLACK
; \

526 
ty≥
 * \

527 
«me
##
	`_RB_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

529 
ty≥
 *
chûd
, *
∑ª¡
, *
ﬁd
 = 
ñm
; \

530 
cﬁ‹
; \

531 i‡(
	`RB_LEFT
(
ñm
, 
fõld
Ë=
NULL
) \

532 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

533 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
Ë=
NULL
) \

534 
chûd
 = 
	`RB_LEFT
(
ñm
, 
fõld
); \

536 
ty≥
 *
À·
; \

537 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

538 (
À·
 = 
	`RB_LEFT
(
ñm
, 
fõld
))) \

539 
ñm
 = 
À·
; \

540 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

541 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

542 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

543 i‡(
chûd
) \

544 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

545 i‡(
∑ª¡
) { \

546 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

547 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

549 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

550 
	`RB_AUGMENT
(
∑ª¡
); \

552 
	`RB_ROOT
(
hód
Ë
chûd
; \

553 i‡(
	`RB_PARENT
(
ñm
, 
fõld
Ë=
ﬁd
) \

554 
∑ª¡
 = 
ñm
; \

555 (
ñm
)->
fõld
 = (
ﬁd
)->field; \

556 i‡(
	`RB_PARENT
(
ﬁd
, 
fõld
)) { \

557 i‡(
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), field) == old)\

558 
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

560 
	`RB_RIGHT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

561 
	`RB_AUGMENT
(
	`RB_PARENT
(
ﬁd
, 
fõld
)); \

563 
	`RB_ROOT
(
hód
Ë
ñm
; \

564 
	`RB_PARENT
(
	`RB_LEFT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

565 i‡(
	`RB_RIGHT
(
ﬁd
, 
fõld
)) \

566 
	`RB_PARENT
(
	`RB_RIGHT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

567 i‡(
∑ª¡
) { \

568 
À·
 = 
∑ª¡
; \

570 
	`RB_AUGMENT
(
À·
); \

571 } (
À·
 = 
	`RB_PARENT
÷e·, 
fõld
))); \

573 
cﬁ‹
; \

575 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

576 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

577 i‡(
chûd
) \

578 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

579 i‡(
∑ª¡
) { \

580 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

581 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

583 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

584 
	`RB_AUGMENT
(
∑ª¡
); \

586 
	`RB_ROOT
(
hód
Ë
chûd
; \

587 
cﬁ‹
: \

588 i‡(
cﬁ‹
 =
RB_BLACK
) \

589 
«me
##
	`_RB_REMOVE_COLOR
(
hód
, 
∑ª¡
, 
chûd
); \

590  (
ﬁd
); \

594 
ty≥
 * \

595 
«me
##
	`_RB_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

597 
ty≥
 *
tmp
; \

598 
ty≥
 *
∑ª¡
 = 
NULL
; \

599 
comp
 = 0; \

600 
tmp
 = 
	`RB_ROOT
(
hód
); \

601 
tmp
) { \

602 
∑ª¡
 = 
tmp
; \

603 
comp
 = (
cmp
)(
ñm
, 
∑ª¡
); \

604 i‡(
comp
 < 0) \

605 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

606 i‡(
comp
 > 0) \

607 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

609  (
tmp
); \

611 
	`RB_SET
(
ñm
, 
∑ª¡
, 
fõld
); \

612 i‡(
∑ª¡
 !
NULL
) { \

613 i‡(
comp
 < 0) \

614 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
ñm
; \

616 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
ñm
; \

617 
	`RB_AUGMENT
(
∑ª¡
); \

619 
	`RB_ROOT
(
hód
Ë
ñm
; \

620 
«me
##
	`_RB_INSERT_COLOR
(
hód
, 
ñm
); \

621  (
NULL
); \

625 
ty≥
 * \

626 
«me
##
	`_RB_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

628 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

629 
comp
; \

630 
tmp
) { \

631 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

632 i‡(
comp
 < 0) \

633 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

634 i‡(
comp
 > 0) \

635 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

637  (
tmp
); \

639  (
NULL
); \

642 
ty≥
 * \

643 
«me
##
	`_RB_NEXT
(
ty≥
 *
ñm
) \

645 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
)) { \

646 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

647 
	`RB_LEFT
(
ñm
, 
fõld
)) \

648 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

650 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

651 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

652 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

654 
	`RB_PARENT
(
ñm
, 
fõld
) && \

655 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field)))\

656 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

657 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

660  (
ñm
); \

663 
ty≥
 * \

664 
«me
##
	`_RB_MINMAX
(«mê*
hód
, 
vÆ
) \

666 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

667 
ty≥
 *
∑ª¡
 = 
NULL
; \

668 
tmp
) { \

669 
∑ª¡
 = 
tmp
; \

670 i‡(
vÆ
 < 0) \

671 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

673 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

675  (
∑ª¡
); \

676 }

	)

678 
	#RB_NEGINF
 -1

	)

679 
	#RB_INF
 1

	)

681 
	#RB_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_INSERT
(x, y)

	)

682 
	#RB_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_RB_REMOVE
(x, y)

	)

683 
	#RB_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_FIND
(x, y)

	)

684 
	#RB_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NEXT
(y)

	)

685 
	#RB_MIN
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

686 
	#RB_MAX
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

688 
	#RB_FOREACH
(
x
, 
«me
, 
hód
) \

689 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

690 (
x
Ë!
NULL
; \

691 (
x
Ë
«me
##
	`_RB_NEXT
(x))

	)

	@debug/log.c

14 
	~"log.h
"

17 
FILE
 *
	gÂ
 = 
NULL
;

18 *
	g«me
 = 
NULL
;

20 
›í_fûe
(*
«
);

23 
	$£t_log
(*
n
)

25 
ªt
 = 0;

26 if(
n
=
NULL
 || 
	`°æí
(n) == 0)

29 
«me
 = (*)
	`mÆloc
(
	`°æí
(
n
)+1);

30 if(
«me
 =
NULL
){

31 
	`¥ötf
("we haveÇotÉnough memory\n");

35 
	`°r˝y
(
«me
, 
n
);

37 
ªt
 = 
	`›í_fûe
(
«me
);

39 if(
ªt
 < 0){

40 
	`‰ì
(
«me
);

41 
Â
 = 
NULL
;

42 
«me
 = 
NULL
;

48 
	}
}

50 
	$˛o£_fûe
()

52 if(
Â
)

53  
	`f˛o£
(
Â
);

56 
	}
}

58 
	$›í_fûe
(*
«
)

60 
Â
 = 
	`f›í
(
«
, "a");

62 if(
Â
 =
NULL
){

63 
	`Ârötf
(
°dîr
, "openÜog failed\n");

68 
	}
}

74 
	$wrôe_fûe
(*
°r
)

76 if(
Â
 !
NULL
){

77 
	`Ârötf
(
Â
, "%s", 
°r
);

78 
	`fÊush
(
Â
);

83  
	`Ârötf
(
°dîr
, "%s", 
°r
);

86 
	}
}

88 
	$˛o£_log
()

90  
	`˛o£_fûe
();

91 
	}
}

92 
	$_log_wrôe
(*
fûe
, 
löe
, c⁄° *
fmt
,...)

94 
ªt
 = 0;

95 
buf„r
[1000];

96 
va_li°
 
≠
;

97 
time_t
 
cur_time
;

98 
tm
 
tm_now
;

99 
time°amp
[20];

105 
	`mem£t
(
buf„r
, 0, (buffer));

107 
	`mem£t
(
time°amp
, 0, (timestamp));

108 
	`time
(&
cur_time
);

109 
	`loˇ…ime_r
(&
cur_time
, &
tm_now
);

110 
	`°r·ime
(
time°amp
, 20, "%Y-%m-%d %H:%M:%S", &
tm_now
);

111 
	`•rötf
(
buf„r
, "%s: ", 
time°amp
);

112 
ªt
 = 
	`°æí
(
buf„r
);

113 
	`•rötf
(
buf„r
 + 
ªt
, "%s:%d ", 
fûe
, 
löe
);

115 
ªt
 = 
	`°æí
(
buf„r
);

116 
	`va_°¨t
(
≠
, 
fmt
);

117 
	`v•rötf
(
buf„r
 + 
ªt
, 
fmt
, 
≠
);

118 
	`va_íd
(
≠
);

120  
	`wrôe_fûe
(
buf„r
);

121 
	}
}

	@debug/log.h

1 #i‚de‡
_LOG_H_


2 
	#_LOG_H_


	)

3 
	~<°dio.h
>

4 
	~<°d¨g.h
>

5 
	~<°rög.h
>

6 
	~<time.h
>

7 
	~<°dlib.h
>

8 #ifdef 
__˝lu•lus


13 
˛o£_log
();

14 
£t_log
(*
«me
);

15 
_log_wrôe
(*
fûe
, 
löe
, c⁄° *
fmt
,...);

16 #ifde‡
DEBUG


17 
	#LOG_WRITE
(...Ë
	`_log_wrôe
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

19 
	#POINTER_NOT_NULL
(
POINTER
) if(!POINTER){ \

20 
	`LOG_WRITE
("POINTER %s shouldÇot NULL", #POINTER); \

22 }

	)

24 
	#NOT_LESS_THAN
(
v¨
, 
THRESHOLD
) if(var < THRESHOLD){ \

25 
	`LOG_WRITE
("%†shouldÇŸÜes†th™ %d\n", #v¨, 
THRESHOLD
); \

27 }

	)

29 
	#FILE_DES_VALID
(
fû
) if(fil < 3){ \

30 
	`LOG_WRITE
("fûênum:%d\n", 
fû
); \

32 }

	)

34 
	#LOG_WRITE
(...)

	)

35 
	#POINTER_NOT_NULL
(
POINTER
)

	)

38 #ifde‡
__˝lu•lus


	@debug/test.c

1 
	~"°dio.h
"

2 
	$maö
()

6 
	}
}

	@include/init.h

1 #i‚de‡
_INIT_H_


2 
	#_INIT_H_


	)

4 
	#__öô


	)

5 
	#__exô


	)

7 
	#__c⁄°ru˘


	)

8 
	#__dóŒoc


	)

	@include/seda.h

1 #i‚de‡
_SEDA_H


2 
	#_SEDA_H


	)

4 #ifde‡
__˝lu•lus


8 
	~<±hªad.h
>

9 
	~"åì.h
"

10 
	~"queue.h
"

11 
	~"thªad.h
"

12 
	~"h™dÀr.h
"

13 
	~"°age.h
"

16 
RB_HEAD
(
	t°age_hód
, 
	t°age
Ë
	t°age_£t
;

17 
	s°age_m™agî
{

18 
°age_£t
 
°ages
;

19 
±hªad_muãx_t
 
lock
;

20 }
	t°age_m™agî
;

22 
ªgi°î_°age
(*
°ageName
, 
nThªad
);

23 
dóŒocSège
(*
«me
);

24 
di•©chSège
(*
«me
, (*
h™dÀr
)(*), *
¨g
);

26 #ifde‡
__˝lu•lus


	@mem/mem.h

1 
	~"°dio.h
"

3 
	#MALLOC_EXIT_NULL
(
poöãr
, 
size
, 
ty≥
) \

4 if(!(
poöãr
 = (
ty≥
)
	`mÆloc
(
size
))){ \

5 
	`LOG_WRITE
("OUT OF MEMORY\n"); \

6 
	`exô
(0); \

7 }

	)

	@mem/test.c

1 
	~"°dio.h
"

3 
	$maö
()

7 
	}
}

	@seda/handler.c

1 
	~<°dlib.h
>

2 
	~"h™dÀr.h
"

4 
h™dÀr_öfo
 * 
	$gë_h™dÀr_öfo
(
h™dÀr
 
h
, *
¨g
)

6 
h™dÀr_öfo
 *
hi
 = 
NULL
;

7 
hi
 = (
h™dÀr_öfo
 *)
	`ˇŒoc
((handler_info), 1);

9 if(
hi
 =
NULL
)

10  
NULL
;

11 
hi
->
¨g
 =árg;

12 
hi
->
h
 = h;

14  
hi
;

15 
	}
}

	@seda/handler.h

1 #i‚de‡
_HANDLER_H_


2 
	#_HANDLER_H_


	)

3 
	~"queue.h
"

5 (*
	th™dÀr
)(*
	t¨g
);

6 
	sh™dÀr_öfo
{

7 *
¨g
;

8 
h™dÀr
 
h
;

9 
	`TAILQ_ENTRY
(
h™dÀr_öfo
Ë
lök
;

10 }
	th™dÀr_öfo
;

12 
h™dÀr_öfo
 * 
	`gë_h™dÀr_öfo
(
h™dÀr
 
h
, *
¨g
);

	@seda/queue.h

32 #i‚def 
_SYS_QUEUE_H_


33 
	#_SYS_QUEUE_H_


	)

84 
	#LIST_HEAD
(
«me
, 
ty≥
) \

85 
	s«me
 { \

86 
ty≥
 *
lh_fú°
; \

87 }

	)

89 
	#LIST_HEAD_INITIALIZER
(
hód
) \

90 { 
NULL
 }

	)

92 
	#LIST_ENTRY
(
ty≥
) \

94 
ty≥
 *
À_√xt
; \

95 
ty≥
 **
À_¥ev
; \

96 }

	)

101 
	#LIST_INIT
(
hód
) do { \

102 (
hód
)->
lh_fú°
 = 
NULL
; \

103 }  0)

	)

105 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

106 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->fõld.À_√xtË!
NULL
) \

107 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

108 &(
ñm
)->
fõld
.
À_√xt
; \

109 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

110 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

111 }  0)

	)

113 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

114 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

115 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

116 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

117 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

118 }  0)

	)

120 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

121 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
NULL
) \

122 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

123 (
hód
)->
lh_fú°
 = (
ñm
); \

124 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

125 }  0)

	)

127 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

128 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

129 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

130 (
ñm
)->
fõld
.
À_¥ev
; \

131 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

132 }  0)

	)

134 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

135 (
v¨
Ë((
hód
)->
lh_fú°
); \

136 (
v¨
); \

137 (
v¨
Ë((v¨)->
fõld
.
À_√xt
))

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

143 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

144 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

150 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

151 
	s«me
 { \

152 
ty≥
 *
¶h_fú°
; \

153 }

	)

155 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

156 { 
NULL
 }

	)

158 
	#SLIST_ENTRY
(
ty≥
) \

160 
ty≥
 *
¶e_√xt
; \

161 }

	)

166 
	#SLIST_INIT
(
hód
) do { \

167 (
hód
)->
¶h_fú°
 = 
NULL
; \

168 }  0)

	)

170 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

171 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

172 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

173 }  0)

	)

175 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

176 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

177 (
hód
)->
¶h_fú°
 = (
ñm
); \

178 }  0)

	)

180 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

181 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

182 }  0)

	)

184 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

185 i‡((
hód
)->
¶h_fú°
 =(
ñm
)) { \

186 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

189 
ty≥
 *
cuªlm
 = (
hód
)->
¶h_fú°
; \

190 
cuªlm
->
fõld
.
¶e_√xt
 !(
ñm
)) \

191 
cuªlm
 = cuªlm->
fõld
.
¶e_√xt
; \

192 
cuªlm
->
fõld
.
¶e_√xt
 = \

193 
cuªlm
->
fõld
.
¶e_√xt
->field.sle_next; \

195 }  0)

	)

197 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

198 (
v¨
Ë(
hód
)->
¶h_fú°
; (v¨); (v¨Ë(v¨)->
fõld
.
¶e_√xt
)

	)

203 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

204 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

205 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

211 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

212 
	s«me
 { \

213 
ty≥
 *
°qh_fú°
; \

214 
ty≥
 **
°qh_œ°
; \

215 }

	)

217 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

218 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

220 
	#STAILQ_ENTRY
(
ty≥
) \

222 
ty≥
 *
°qe_√xt
; \

223 }

	)

228 
	#STAILQ_INIT
(
hód
) do { \

229 (
hód
)->
°qh_fú°
 = 
NULL
; \

230 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

231 }  0)

	)

233 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

234 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
hód
)->
°qh_fú°
Ë=
NULL
) \

235 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

236 (
hód
)->
°qh_fú°
 = (
ñm
); \

237 }  0)

	)

239 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

240 (
ñm
)->
fõld
.
°qe_√xt
 = 
NULL
; \

241 *(
hód
)->
°qh_œ°
 = (
ñm
); \

242 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

243 }  0)

	)

245 
	#STAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

246 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
li°ñm
)->fõld.°qe_√xtË=
NULL
)\

247 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

248 (
li°ñm
)->
fõld
.
°qe_√xt
 = (
ñm
); \

249 }  0)

	)

251 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

252 i‡(((
hód
)->
°qh_fú°
 = (hód)->°qh_fú°->
fõld
.
°qe_√xt
Ë=
NULL
) \

253 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

254 }  0)

	)

256 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

257 i‡((
hód
)->
°qh_fú°
 =(
ñm
)) { \

258 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

260 
ty≥
 *
cuªlm
 = (
hód
)->
°qh_fú°
; \

261 
cuªlm
->
fõld
.
°qe_√xt
 !(
ñm
)) \

262 
cuªlm
 = cuªlm->
fõld
.
°qe_√xt
; \

263 i‡((
cuªlm
->
fõld
.
°qe_√xt
 = \

264 
cuªlm
->
fõld
.
°qe_√xt
->fõld.°qe_√xtË=
NULL
) \

265 (
hód
)->
°qh_œ°
 = &(
cuªlm
)->
fõld
.
°qe_√xt
; \

267 }  0)

	)

269 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

270 (
v¨
Ë((
hód
)->
°qh_fú°
); \

271 (
v¨
); \

272 (
v¨
Ë((v¨)->
fõld
.
°qe_√xt
))

	)

274 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

275 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

276 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

277 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

278 
	`STAILQ_INIT
((
hód2
)); \

280 }  0)

	)

285 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

286 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

287 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

293 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

294 
	s«me
 { \

295 
ty≥
 *
sqh_fú°
; \

296 
ty≥
 **
sqh_œ°
; \

297 }

	)

299 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

300 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

302 
	#SIMPLEQ_ENTRY
(
ty≥
) \

304 
ty≥
 *
sqe_√xt
; \

305 }

	)

310 
	#SIMPLEQ_INIT
(
hód
) do { \

311 (
hód
)->
sqh_fú°
 = 
NULL
; \

312 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

313 }  0)

	)

315 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

316 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

317 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

318 (
hód
)->
sqh_fú°
 = (
ñm
); \

319 }  0)

	)

321 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

322 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

323 *(
hód
)->
sqh_œ°
 = (
ñm
); \

324 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

325 }  0)

	)

327 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

328 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

329 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

330 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

331 }  0)

	)

333 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

334 i‡(((
hód
)->
sqh_fú°
 = (hód)->sqh_fú°->
fõld
.
sqe_√xt
Ë=
NULL
) \

335 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

336 }  0)

	)

338 
	#SIMPLEQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

339 i‡((
hód
)->
sqh_fú°
 =(
ñm
)) { \

340 
	`SIMPLEQ_REMOVE_HEAD
((
hód
), 
fõld
); \

342 
ty≥
 *
cuªlm
 = (
hód
)->
sqh_fú°
; \

343 
cuªlm
->
fõld
.
sqe_√xt
 !(
ñm
)) \

344 
cuªlm
 = cuªlm->
fõld
.
sqe_√xt
; \

345 i‡((
cuªlm
->
fõld
.
sqe_√xt
 = \

346 
cuªlm
->
fõld
.
sqe_√xt
->fõld.sqe_√xtË=
NULL
) \

347 (
hód
)->
sqh_œ°
 = &(
cuªlm
)->
fõld
.
sqe_√xt
; \

349 }  0)

	)

351 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

352 (
v¨
Ë((
hód
)->
sqh_fú°
); \

353 (
v¨
); \

354 (
v¨
Ë((v¨)->
fõld
.
sqe_√xt
))

	)

359 
	#SIMPLEQ_EMPTY
(
hód
Ë((hód)->
sqh_fú°
 =
NULL
)

	)

360 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

361 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

367 
	#_TAILQ_HEAD
(
«me
, 
ty≥
, 
quÆ
) \

368 
	s«me
 { \

369 
quÆ
 
ty≥
 *
tqh_fú°
; \

370 
quÆ
 
ty≥
 *quÆ *
tqh_œ°
; \

371 }

	)

372 
	#TAILQ_HEAD
(
«me
, 
ty≥
Ë
	`_TAILQ_HEAD
“ame, ty≥,)

	)

374 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

375 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

377 
	#_TAILQ_ENTRY
(
ty≥
, 
quÆ
) \

379 
quÆ
 
ty≥
 *
tqe_√xt
; \

380 
quÆ
 
ty≥
 *quÆ *
tqe_¥ev
; \

381 }

	)

382 
	#TAILQ_ENTRY
(
ty≥
Ë
	`_TAILQ_ENTRY
(ty≥,)

	)

387 
	#TAILQ_INIT
(
hód
) do { \

388 (
hód
)->
tqh_fú°
 = 
NULL
; \

389 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

390 }  0)

	)

392 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

393 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
NULL
) \

394 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

395 &(
ñm
)->
fõld
.
tqe_√xt
; \

397 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

398 (
hód
)->
tqh_fú°
 = (
ñm
); \

399 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

400 }  0)

	)

402 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

403 (
ñm
)->
fõld
.
tqe_√xt
 = 
NULL
; \

404 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

405 *(
hód
)->
tqh_œ°
 = (
ñm
); \

406 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

407 }  0)

	)

409 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

410 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->fõld.tqe_√xtË!
NULL
)\

411 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

412 &(
ñm
)->
fõld
.
tqe_√xt
; \

414 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

415 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

416 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

417 }  0)

	)

419 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

420 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

421 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

422 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

423 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

424 }  0)

	)

426 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

427 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
NULL
) \

428 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

429 (
ñm
)->
fõld
.
tqe_¥ev
; \

431 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

432 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

433 }  0)

	)

435 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

436 (
v¨
Ë((
hód
)->
tqh_fú°
); \

437 (
v¨
); \

438 (
v¨
Ë((v¨)->
fõld
.
tqe_√xt
))

	)

440 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

441 (
v¨
Ë(*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_last)); \

442 (
v¨
); \

443 (
v¨
Ë(*(((
hód«me
 *)((v¨)->
fõld
.
tqe_¥ev
))->
tqh_œ°
)))

	)

445 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

446 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

447 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

448 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

449 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

450 
	`TAILQ_INIT
((
hód2
)); \

452 }  0)

	)

457 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

458 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

459 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

461 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

462 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

463 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

464 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

470 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

471 
	s«me
 { \

472 
ty≥
 *
cqh_fú°
; \

473 
ty≥
 *
cqh_œ°
; \

474 }

	)

476 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

477 { (*)&
hód
, (*)&hód }

	)

479 
	#CIRCLEQ_ENTRY
(
ty≥
) \

481 
ty≥
 *
cqe_√xt
; \

482 
ty≥
 *
cqe_¥ev
; \

483 }

	)

488 
	#CIRCLEQ_INIT
(
hód
) do { \

489 (
hód
)->
cqh_fú°
 = (*)(head); \

490 (
hód
)->
cqh_œ°
 = (*)(head); \

491 }  0)

	)

493 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

494 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

495 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

496 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

497 (
hód
)->
cqh_œ°
 = (
ñm
); \

499 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

500 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

501 }  0)

	)

503 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

504 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

505 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

506 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

507 (
hód
)->
cqh_fú°
 = (
ñm
); \

509 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

510 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

511 }  0)

	)

513 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

514 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

515 (
ñm
)->
fõld
.
cqe_¥ev
 = (*)(
hód
); \

516 i‡((
hód
)->
cqh_œ°
 == (*)(head)) \

517 (
hód
)->
cqh_œ°
 = (
ñm
); \

519 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

520 (
hód
)->
cqh_fú°
 = (
ñm
); \

521 }  0)

	)

523 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

524 (
ñm
)->
fõld
.
cqe_√xt
 = (*)(
hód
); \

525 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

526 i‡((
hód
)->
cqh_fú°
 == (*)(head)) \

527 (
hód
)->
cqh_fú°
 = (
ñm
); \

529 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

530 (
hód
)->
cqh_œ°
 = (
ñm
); \

531 }  0)

	)

533 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

534 i‡((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

535 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

537 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

538 (
ñm
)->
fõld
.
cqe_¥ev
; \

539 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

540 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

542 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

543 (
ñm
)->
fõld
.
cqe_√xt
; \

544 }  0)

	)

546 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

547 (
v¨
Ë((
hód
)->
cqh_fú°
); \

548 (
v¨
Ë!(c⁄° *)(
hód
); \

549 (
v¨
Ë((v¨)->
fõld
.
cqe_√xt
))

	)

551 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

552 (
v¨
Ë((
hód
)->
cqh_œ°
); \

553 (
v¨
Ë!(c⁄° *)(
hód
); \

554 (
v¨
Ë((v¨)->
fõld
.
cqe_¥ev
))

	)

559 
	#CIRCLEQ_EMPTY
(
hód
Ë((hód)->
cqh_fú°
 =(*)(hód))

	)

560 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

561 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

562 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

563 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

565 
	#CIRCLEQ_LOOP_NEXT
(
hód
, 
ñm
, 
fõld
) \

566 (((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

567 ? ((
hód
)->
cqh_fú°
) \

568 : (
ñm
->
fõld
.
cqe_√xt
))

	)

569 
	#CIRCLEQ_LOOP_PREV
(
hód
, 
ñm
, 
fõld
) \

570 (((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

571 ? ((
hód
)->
cqh_œ°
) \

572 : (
ñm
->
fõld
.
cqe_¥ev
))

	)

	@seda/seda.h

1 #i‚de‡
_SEDA_H


2 
	#_SEDA_H


	)

4 #ifde‡
__˝lu•lus


8 
	~<±hªad.h
>

9 
	~"åì.h
"

10 
	~"queue.h
"

11 
	~"thªad.h
"

12 
	~"h™dÀr.h
"

13 
	~"°age.h
"

16 
RB_HEAD
(
	t°age_hód
, 
	t°age
Ë
	t°age_£t
;

17 
	s°age_m™agî
{

18 
°age_£t
 
°ages
;

19 
±hªad_muãx_t
 
lock
;

20 }
	t°age_m™agî
;

22 
ªgi°î_°age
(*
°ageName
, 
nThªad
);

23 
dóŒocSège
(*
«me
);

24 
di•©chSège
(*
«me
, (*
h™dÀr
)(*), *
¨g
);

26 #ifde‡
__˝lu•lus


	@seda/stage.c

1 
	~"°age.h
"

2 
	~"h™dÀr.h
"

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

6 
°age
 *
	$gë_°age
(
thªad_num
, *
°age_«me
)

8 
thªad_öfo
 *
ti
 = 
NULL
;

9 
°age
 *
s
 = 
NULL
;

10 
i
 = 0, 
ªt
 = 0;

12 if(
°age_«me
 =
NULL
 || 
thªad_num
 <= 0){

13 
	`¥ötf
("error in init_stage");

14  
NULL
;

17 if(!(
s
 = (
°age
 *)
	`ˇŒoc
((stage), 1))){

18 
	`¥ötf
("error in get stage\n");

19  
NULL
;

22 if(!(
ti
 = (
thªad_öfo
 *)
	`ˇŒoc
((thread_info),

23 
thªad_num
))){

24 
	`¥ötf
("error in init_stage");

25 
	`‰ì
(
s
);

26  
NULL
;

29 
i
 = 0; i < 
thªad_num
; i++){

30 
ªt
 = 
	`öô_thªad_öfo
(&
ti
[
i
]);

31 if(
ªt
 < 0){

32 
j
 = 0;

34 
j
 = 0; j < 
i
; j++)

35 
	`ˇn˚l_thªad_ß„
(&
ti
[
j
]);

36 
	`‰ì
(
s
);

37 
	`‰ì
(
ti
);

38 
	`¥ötf
("error in init_stage");

39  
NULL
;

44 
s
->
«me
 = 
	`°rdup
(
°age_«me
);

45 
s
->
thªad_num
 =Åhread_num;

46 
s
->
ti
 =Åi;

47 
s
->
di•©ch_num
 = 0;

48  
s
;

49 
	}
}

51 
	$di•©ch_°age
(
h™dÀr_öfo
 *
hi
, 
°age
 *
s
)

53 
ªt
 = 0;

54 if(
hi
 =
NULL
 || 
s
 == NULL){

55 
	`¥ötf
("error in dispatch stage\n");

59 if(
s
->
di•©ch_num
 >s->
thªad_num
)

60 
s
->
di•©ch_num
 = 0;

62 
ªt
 = 
	`di•©ch_thªad
(&
s
->
ti
[s->
di•©ch_num
++],

63 
hi
);

64 if(
ªt
 < 0){

65 
	`¥ötf
("error in dispatch stage\n");

69 
	}
}

70 
	$ãrmö©e_thªads
(
°age
 *
s
)

72 
i
;

73 
îr
;

74 *
åë
;

75 
ªt
 = 0;

77 if(
s
 =
NULL
)

79 
i
 = 0; i < 
s
->
thªad_num
; i++)

80 
	`ˇn˚l_thªad_ß„
(&
s
->
ti
[
i
]);

82 
i
 = 0; i< 
s
->
thªad_num
; i++){

83 if((
îr
 = 
	`±hªad_joö
(
s
->
ti
[
i
].
id
,

84 &
åë
)) != 0){

85 
	`¥ötf
("pthread joinÉrror\n");

86 
ªt
 = 1;

89 
s
->
thªad_num
 = 0;

90  
ªt
;

91 
	}
}

93 
	$dóŒocSègeSåu˘
(
°age
 *
s
)

95 if(!
s
)

97 
	`ãrmö©e_thªads
(
s
);

98 if(
s
->
«me
)

99 
	`‰ì
(
s
->
«me
);

100 if(
s
->
ti
)

101 
	`‰ì
(
s
->
ti
);

102 
	`‰ì
(
s
);

103 
	}
}

	@seda/stage.h

1 #i‚de‡
_STAGE_H_


2 
	#_STAGE_H_


	)

3 
	~"h™dÀr.h
"

4 
	~"thªad.h
"

5 
	~"±hªad.h
"

6 
	~"åì.h
"

7 
	~"°rög.h
"

10 
	s°age
{

11 *
	m«me
;

12 
	mthªad_num
;

13 
thªad_öfo
 *
	mti
;

14 
	mdi•©ch_num
;

15 
RB_ENTRY
(
°age
Ë
	mlök
;

16 }
	t°age
;

18 
°age
 *
gë_°age
(
thªad_num
, *
°age_«me
);

19 
di•©ch_°age
(
h™dÀr_öfo
 *
hi
, 
°age
 *
s
);

21 
dóŒocSègeSåu˘
(
°age
 *
s
);

	@seda/stage_manager.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<±hªad.h
>

4 
	~"°dlib.h
"

5 
	~"£da.h
"

7 
	göô
 = 0;

8 
°age_m™agî
 
	gsm™gî
;

10 
	$°age_cmp
(
°age
 *
l
, sègê*
r
)

12 if(
l
 =
NULL
 || 
r
 == NULL){

13 
	`¥ötf
("error in stage_cmp\n");

16  
	`°rcmp
(
l
->
«me
, 
r
->name);

17 
	}
}

18 
RB_PROTOTYPE
(
°age_hód
, 
°age
, 
lök
, 
°age_cmp
);

19 
RB_GENERATE
(
°age_hód
, 
°age
, 
lök
, 
°age_cmp
);

21 
	$öô_°age_m™agî
()

23 if(
öô
)

25 
	`RB_INIT
(&
sm™gî
.
°ages
);

26 
	`±hªad_muãx_öô
(&
sm™gî
.
lock
, 
NULL
);

27 
öô
 = 1;

30 
	}
}

32 
	$ªgi°î_°age
(*
°ageName
, 
nThªad
)

34 
°age
 *
ªt
 = 
NULL
;

35 
°age
 *
s
 = 
NULL
;

37 if(!
öô
){

38 
	`öô_°age_m™agî
();

42 if(!(
s
 = 
	`gë_°age
(
nThªad
, 
°ageName
))){

43 
	`¥ötf
("cannot get stage, oom\n");

46 
	`±hªad_muãx_lock
(&
sm™gî
.
lock
);

47 
ªt
 = 
	`RB_INSERT
(
°age_hód
, &
sm™gî
.
°ages
, 
s
);

48 
	`±hªad_muãx_u∆ock
(&
sm™gî
.
lock
);

50 if(
ªt
 =
NULL
)

53 
	`dóŒocSègeSåu˘
(
s
);

56 
	}
}

57 
	$dóŒocSège
(*
«me
)

59 
°age
 
tmp
, *
s
 = 
NULL
;

61 if(
«me
 =
NULL
){

62 
	`¥ötf
("error in unregister_stage\n");

66 
tmp
.
«me
 =Çame;

67 
	`±hªad_muãx_lock
(&
sm™gî
.
lock
);

68 
s
 = 
	`RB_FIND
(
°age_hód
, &
sm™gî
.
°ages
, &
tmp
);

70 if(
s
 =
NULL
){

71 
	`±hªad_muãx_u∆ock
(&
sm™gî
.
lock
);

74 
	`RB_REMOVE
(
°age_hód
, &
sm™gî
.
°ages
, 
s
);

75 
	`±hªad_muãx_u∆ock
(&
sm™gî
.
lock
);

76 
	`dóŒocSègeSåu˘
(
s
);

80 
	}
}

82 
°age
 *
	$föd_°age
(*
«me
)

84 
°age
 *
s
 = 
NULL
, 
tmp
;

85 if(
«me
 =
NULL
){

86 
	`¥ötf
("error in get_stage\n");

87  
NULL
;

90 
tmp
.
«me
 =Çame;

91 
	`±hªad_muãx_lock
(&
sm™gî
.
lock
);

92 
s
 = 
	`RB_FIND
(
°age_hód
, &
sm™gî
.
°ages
, &
tmp
);

93 
	`±hªad_muãx_u∆ock
(&
sm™gî
.
lock
);

94  
s
;

95 
	}
}

97 
di•©chSège
(*
«me
, (*
h™dÀr
)(*),

98 *
¨g
)

100 
°age
 *
s
 = 
NULL
;

101 
h™dÀr_öfo
 *
h
;

102 
ªt
;

104 if(
h™dÀr
=
NULL
){

105 
	`¥ötf
("handler NULL \n");

109 
s
 = 
	`föd_°age
(
«me
);

110 if(
s
 =
NULL
){

111 
	`¥ötf
("cannot find stage\n");

115 if(!(
h
 = 
	`gë_h™dÀr_öfo
(
h™dÀr
, 
¨g
))){

116 
	`¥ötf
("cannot get handler\n");

120 
ªt
 = 
	`di•©ch_°age
(
h
, 
s
);

122 if(
ªt
 < 0){

123 
	`¥ötf
("dispatchÉrror\n");

124 
	`‰ì
(
h
);

129 
	}
}

	@seda/test_seda.c

1 
	~"£da.h
"

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

6 
	$ã°_fun
(*
¨g
)

8 
i
, 
k
 = ()
¨g
;

9 
sum
 = 0;

12 
	`¥ötf
("¨g = %d\n", 
k
);

15 
i
 = 0; i < (
k
+1) * 100; i++)

17 
sum
 +
i
;

20 
	`¥ötf
("sum = %d\n", 
sum
);

21 
	}
}

22 
	$maö
()

24 
i
;

26 if(
	`ªgi°î_°age
("test1", 2) < 0 ||

27 
	`ªgi°î_°age
("test2", 3) < 0){

28 
	`¥ötf
("registerÉrror\n");

32 
i
 = 0; i < 1000; i++){

33 
	`di•©chSège
("ã°2", 
ã°_fun
, (*)
i
);

36 
	`dóŒocSège
("test1");

37 
	`dóŒocSège
("test2");

38 
	`gëch¨
();

40 
	}
}

	@seda/thread.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<uni°d.h
>

4 
	~<î∫o.h
>

5 
	~<°dlib.h
>

6 
	~"thªad.h
"

8 
	#TRUE
 1

	)

9 
	#FALSE
 2

	)

11 * 
	$thªad_fun
(*
¨g
)

13 
thªad_öfo
 *
ti
 = (thªad_öfÿ*)
¨g
;

15 if(
ti
 =
NULL
){

16 
	`¥ötf
("thread_funÉrror\n");

17  
NULL
;

20 
TRUE
){

21 
buf„r
[100] = {0};

22 
ªt
 = 0;

23 * 
pos_X
=
NULL
;

24 
ãrmöÆ
 = 0;

26 
	`mem£t
(
buf„r
, 0, (buffer));

30 
ªt
 = 
	`ªad
(
ti
->
pùe
[0], 
buf„r
,

31 (
buf„r
));

33 if(
ªt
 < 0){

34 
	`¥ötf
("%s\n", 
	`°ªº‹
(
î∫o
));

37 
pos_X
 = 
	`°rchr
(
buf„r
, 'X');

39 if(
pos_X
 >
buf„r
 &&Öos_X < buffer + 100

40 && *
pos_X
 == 'X'){

41 
ãrmöÆ
 = 1;

42 
	`˛o£
(
ti
->
pùe
[0]);

43 
	`˛o£
(
ti
->
pùe
[1]);

46 
TRUE
){

47 
h™dÀr_öfo
 *
hi
;

49 
	`±hªad_muãx_lock
(&
ti
->
lockQ
);

50 
hi
 = 
	`TAILQ_FIRST
(&
ti
->
queue
);

51 if(
hi
)

52 
	`TAILQ_REMOVE
(&
ti
->
queue
,

53 
hi
, 
lök
);

54 
	`±hªad_muãx_u∆ock
(&
ti
->
lockQ
);

55 if(
hi
 =
NULL
)

57 
hi
->
	`h
(hi->
¨g
);

58 
	`‰ì
(
hi
);

61 if(
ãrmöÆ
 == 1)

62 
	`±hªad_exô
(0);

64  
NULL
;

65 
	}
}

67 
	$öô_thªad_öfo
(
thªad_öfo
 *
ti
)

69 
ªt
 = 0;

71 if(
ti
 =
NULL
)

74 
	`TAILQ_INIT
(&
ti
->
queue
);

75 
	`±hªad_muãx_öô
(&
ti
->
lockQ
, 
NULL
);

77 
ªt
 = 
	`pùe
(
ti
->
pùe
);

78 if(
ªt
 == -1){

79 
	`¥ötf
("createÖipeÉrror\n");

83 
ªt
 = 
	`±hªad_¸óã
(&
ti
->
id
, 
NULL
, 
thªad_fun
,

84 (*)
ti
);

85 if(
ªt
 != 0){

86 
	`¥ötf
("%s\n", 
	`°ªº‹
(
î∫o
));

87 
	`˛o£
(
ti
->
pùe
[0]);

88 
	`˛o£
(
ti
->
pùe
[1]);

93 
	}
}

95 
	$di•©ch_thªad
(
thªad_öfo
 *
ti
, 
h™dÀr_öfo
 *
hi
)

97 
ªt
 = 0;

99 if(
ti
 =
NULL
 || 
hi
 == NULL){

100 
	`¥ötf
("ti == NULL||hi == NULL");

103 
	`±hªad_muãx_lock
(&
ti
->
lockQ
);

104 
	`TAILQ_INSERT_TAIL
(&
ti
->
queue
, 
hi
, 
lök
);

105 
	`±hªad_muãx_u∆ock
(&
ti
->
lockQ
);

108 
ªt
 = 
	`wrôe
(
ti
->
pùe
[1], "a", 1);

110 if(
ªt
 < 0){

111 
	`¥ötf
("threadÇotifyÉrror\n");

116 
	}
}

117 
	$ˇn˚l_thªad_ß„
(
thªad_öfo
 *
ti
)

119 if(
ti
 =
NULL
)

121 
	`wrôe
(
ti
->
pùe
[1], "X", 1);

124 
	}
}

	@seda/thread.h

1 #i‚de‡
_THREAD_H_


2 
	#_THREAD_H_


	)

3 
	~"queue.h
"

4 
	~"h™dÀr.h
"

5 
	~"±hªad.h
"

7 
TAILQ_HEAD
(
h™dÀr_li°
, 
h™dÀr_öfo
);

8 
	sthªad_öfo
{

9 
±hªad_t
 
	mid
;

10 
±hªad_muãx_t
 
	mlockQ
;

11 
h™dÀr_li°
 
	mqueue
;

12 
	mpùe
[2];

13 }
	tthªad_öfo
;

15 
öô_thªad_öfo
(
thªad_öfo
 *
ti
);

16 
di•©ch_thªad
(
thªad_öfo
 *
ti
, 
h™dÀr_öfo
 *
hi
);

17 
ˇn˚l_thªad_ß„
(
thªad_öfo
 *
ti
);

	@seda/tree.h

27 #i‚def 
_SYS_TREE_H_


28 
	#_SYS_TREE_H_


	)

73 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

74 
	s«me
 { \

75 
ty≥
 *
•h_roŸ
; \

76 }

	)

78 
	#SPLAY_INITIALIZER
(
roŸ
) \

79 { 
NULL
 }

	)

81 
	#SPLAY_INIT
(
roŸ
) do { \

82 (
roŸ
)->
•h_roŸ
 = 
NULL
; \

83 } 0)

	)

85 
	#SPLAY_ENTRY
(
ty≥
) \

87 
ty≥
 *
•e_À·
; \

88 
ty≥
 *
•e_right
; \

89 }

	)

91 
	#SPLAY_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_À·


	)

92 
	#SPLAY_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_right


	)

93 
	#SPLAY_ROOT
(
hód
Ë(hód)->
•h_roŸ


	)

94 
	#SPLAY_EMPTY
(
hód
Ë(
	`SPLAY_ROOT
(hódË=
NULL
)

	)

97 
	#SPLAY_ROTATE_RIGHT
(
hód
, 
tmp
, 
fõld
) do { \

98 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
tmp
, field); \

99 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

100 (
hód
)->
•h_roŸ
 = 
tmp
; \

101 } 0)

	)

103 
	#SPLAY_ROTATE_LEFT
(
hód
, 
tmp
, 
fõld
) do { \

104 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
tmp
, field); \

105 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

106 (
hód
)->
•h_roŸ
 = 
tmp
; \

107 } 0)

	)

109 
	#SPLAY_LINKLEFT
(
hód
, 
tmp
, 
fõld
) do { \

110 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

111 
tmp
 = (
hód
)->
•h_roŸ
; \

112 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
); \

113 } 0)

	)

115 
	#SPLAY_LINKRIGHT
(
hód
, 
tmp
, 
fõld
) do { \

116 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

117 
tmp
 = (
hód
)->
•h_roŸ
; \

118 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
); \

119 } 0)

	)

121 
	#SPLAY_ASSEMBLE
(
hód
, 
node
, 
À·
, 
right
, 
fõld
) do { \

122 
	`SPLAY_RIGHT
(
À·
, 
fõld
Ë
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, field); \

123 
	`SPLAY_LEFT
(
right
, 
fõld
Ë
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, field);\

124 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
node
, field); \

125 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
node
, field); \

126 } 0)

	)

130 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

131 
«me
##
	`_SPLAY
(«mê*, 
ty≥
 *); \

132 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

133 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

134 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

137 
__ölöe
 
ty≥
 * \

138 
«me
##
	`_SPLAY_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

140 i‡(
	`SPLAY_EMPTY
(
hód
)) \

141 (
NULL
); \

142 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

143 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) \

144  (
hód
->
•h_roŸ
); \

145  (
NULL
); \

148 
__ölöe
 
ty≥
 * \

149 
«me
##
	`_SPLAY_NEXT
(«mê*
hód
, 
ty≥
 *
ñm
) \

151 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

152 i‡(
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë!
NULL
) { \

153 
ñm
 = 
	`SPLAY_RIGHT
”lm, 
fõld
); \

154 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë!
NULL
) { \

155 
ñm
 = 
	`SPLAY_LEFT
”lm, 
fõld
); \

158 
ñm
 = 
NULL
; \

159  (
ñm
); \

162 
__ölöe
 
ty≥
 * \

163 
«me
##
	`_SPLAY_MIN_MAX
(«mê*
hód
, 
vÆ
) \

165 
«me
##
	`_SPLAY_MINMAX
(
hód
, 
vÆ
); \

166  (
	`SPLAY_ROOT
(
hód
)); \

167 }

	)

172 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

173 
ty≥
 * \

174 
«me
##
	`_SPLAY_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

176 i‡(
	`SPLAY_EMPTY
(
hód
)) { \

177 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë
	`SPLAY_RIGHT
”lm, fõldË
NULL
; \

179 
__comp
; \

180 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

181 
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
); \

182 if(
__comp
 < 0) { \

183 
	`SPLAY_LEFT
(
ñm
, 
fõld
ËSPLAY_LEFT((
hód
)->
•h_roŸ
, field);\

184 
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

185 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

186 } i‡(
__comp
 > 0) { \

187 
	`SPLAY_RIGHT
(
ñm
, 
fõld
ËSPLAY_RIGHT((
hód
)->
•h_roŸ
, field);\

188 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

189 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

191  ((
hód
)->
•h_roŸ
); \

193 (
hód
)->
•h_roŸ
 = (
ñm
); \

194  (
NULL
); \

197 
ty≥
 * \

198 
«me
##
	`_SPLAY_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

200 
ty≥
 *
__tmp
; \

201 i‡(
	`SPLAY_EMPTY
(
hód
)) \

202  (
NULL
); \

203 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

204 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) { \

205 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) { \

206 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
);\

208 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

209 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
);\

210 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

211 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
__tmp
; \

213  (
ñm
); \

215  (
NULL
); \

219 
«me
##
	`_SPLAY
(«mê*
hód
, 
ty≥
 *
ñm
) \

221 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

222 
__comp
; \

224 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

225 
__À·
 = 
__right
 = &
__node
; \

227 (
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
))) { \

228 i‡(
__comp
 < 0) { \

229 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

230 i‡(
__tmp
 =
NULL
) \

232 i‡((
cmp
)(
ñm
, 
__tmp
) < 0){ \

233 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

234 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

237 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

238 } i‡(
__comp
 > 0) { \

239 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

240 i‡(
__tmp
 =
NULL
) \

242 i‡((
cmp
)(
ñm
, 
__tmp
) > 0){ \

243 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

244 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

247 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

250 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

256 
«me
##
	`_SPLAY_MINMAX
(«mê*
hód
, 
__comp
) \

258 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

260 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

261 
__À·
 = 
__right
 = &
__node
; \

264 i‡(
__comp
 < 0) { \

265 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

266 i‡(
__tmp
 =
NULL
) \

268 i‡(
__comp
 < 0){ \

269 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

270 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

273 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

274 } i‡(
__comp
 > 0) { \

275 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

276 i‡(
__tmp
 =
NULL
) \

278 i‡(
__comp
 > 0) { \

279 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

280 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

283 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

286 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

287 }

	)

289 
	#SPLAY_NEGINF
 -1

	)

290 
	#SPLAY_INF
 1

	)

292 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_INSERT
(x, y)

	)

293 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_REMOVE
(x, y)

	)

294 
	#SPLAY_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_FIND
(x, y)

	)

295 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_NEXT
(x, y)

	)

296 
	#SPLAY_MIN
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

297 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

298 
	#SPLAY_MAX
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

299 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

301 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hód
) \

302 (
x
Ë
	`SPLAY_MIN
(
«me
, 
hód
); \

303 (
x
Ë!
NULL
; \

304 (
x
Ë
	`SPLAY_NEXT
(
«me
, 
hód
, x))

	)

307 
	#RB_HEAD
(
«me
, 
ty≥
) \

308 
	s«me
 { \

309 
ty≥
 *
rbh_roŸ
; \

310 }

	)

312 
	#RB_INITIALIZER
(
roŸ
) \

313 { 
NULL
 }

	)

315 
	#RB_INIT
(
roŸ
) do { \

316 (
roŸ
)->
rbh_roŸ
 = 
NULL
; \

317 } 0)

	)

319 
	#RB_BLACK
 0

	)

320 
	#RB_RED
 1

	)

321 
	#RB_ENTRY
(
ty≥
) \

323 
ty≥
 *
rbe_À·
; \

324 
ty≥
 *
rbe_right
; \

325 
ty≥
 *
rbe_∑ª¡
; \

326 
rbe_cﬁ‹
; \

327 }

	)

329 
	#RB_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_À·


	)

330 
	#RB_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_right


	)

331 
	#RB_PARENT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_∑ª¡


	)

332 
	#RB_COLOR
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_cﬁ‹


	)

333 
	#RB_ROOT
(
hód
Ë(hód)->
rbh_roŸ


	)

334 
	#RB_EMPTY
(
hód
Ë(
	`RB_ROOT
(hódË=
NULL
)

	)

336 
	#RB_SET
(
ñm
, 
∑ª¡
, 
fõld
) do { \

337 
	`RB_PARENT
(
ñm
, 
fõld
Ë
∑ª¡
; \

338 
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
”lm, fõldË
NULL
; \

339 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_RED
; \

340 } 0)

	)

342 
	#RB_SET_BLACKRED
(
bœck
, 
ªd
, 
fõld
) do { \

343 
	`RB_COLOR
(
bœck
, 
fõld
Ë
RB_BLACK
; \

344 
	`RB_COLOR
(
ªd
, 
fõld
Ë
RB_RED
; \

345 } 0)

	)

347 #i‚de‡
RB_AUGMENT


348 
	#RB_AUGMENT
(
x
)

	)

351 
	#RB_ROTATE_LEFT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

352 (
tmp
Ë
	`RB_RIGHT
(
ñm
, 
fõld
); \

353 i‡((
	`RB_RIGHT
(
ñm
, 
fõld
Ë
	`RB_LEFT
(
tmp
, field))) { \

354 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË(
ñm
); \

356 
	`RB_AUGMENT
(
ñm
); \

357 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

358 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

359 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

361 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

363 (
hód
)->
rbh_roŸ
 = (
tmp
); \

364 
	`RB_LEFT
(
tmp
, 
fõld
Ë(
ñm
); \

365 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

366 
	`RB_AUGMENT
(
tmp
); \

367 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

368 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

369 } 0)

	)

371 
	#RB_ROTATE_RIGHT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

372 (
tmp
Ë
	`RB_LEFT
(
ñm
, 
fõld
); \

373 i‡((
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
(
tmp
, field))) { \

374 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË(
ñm
); \

376 
	`RB_AUGMENT
(
ñm
); \

377 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

378 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

379 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

381 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

383 (
hód
)->
rbh_roŸ
 = (
tmp
); \

384 
	`RB_RIGHT
(
tmp
, 
fõld
Ë(
ñm
); \

385 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

386 
	`RB_AUGMENT
(
tmp
); \

387 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

388 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

389 } 0)

	)

392 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

393 
«me
##
	`_RB_INSERT_COLOR
(«mê*, 
ty≥
 *); \

394 
«me
##
	`_RB_REMOVE_COLOR
(«mê*, 
ty≥
 *, type *);\

395 
ty≥
 *
«me
##
	`_RB_REMOVE
(name *, type *); \

396 
ty≥
 *
«me
##
	`_RB_INSERT
(name *, type *); \

397 
ty≥
 *
«me
##
	`_RB_FIND
(name *, type *); \

398 
ty≥
 *
«me
##
	`_RB_NEXT
(type *); \

399 
ty≥
 *
«me
##
	`_RB_MINMAX
(name *, ); \

401 

	)

405 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

407 
«me
##
	`_RB_INSERT_COLOR
(«mê*
hód
, 
ty≥
 *
ñm
) \

409 
ty≥
 *
∑ª¡
, *
g∑ª¡
, *
tmp
; \

410 (
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
)) && \

411 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë=
RB_RED
) { \

412 
g∑ª¡
 = 
	`RB_PARENT
(
∑ª¡
, 
fõld
); \

413 i‡(
∑ª¡
 =
	`RB_LEFT
(
g∑ª¡
, 
fõld
)) { \

414 
tmp
 = 
	`RB_RIGHT
(
g∑ª¡
, 
fõld
); \

415 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

416 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

417 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

418 
ñm
 = 
g∑ª¡
; \

421 i‡(
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

422 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

423 
tmp
 = 
∑ª¡
; \

424 
∑ª¡
 = 
ñm
; \

425 
ñm
 = 
tmp
; \

427 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

428 
	`RB_ROTATE_RIGHT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

430 
tmp
 = 
	`RB_LEFT
(
g∑ª¡
, 
fõld
); \

431 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

432 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

433 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

434 
ñm
 = 
g∑ª¡
; \

437 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

438 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

439 
tmp
 = 
∑ª¡
; \

440 
∑ª¡
 = 
ñm
; \

441 
ñm
 = 
tmp
; \

443 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

444 
	`RB_ROTATE_LEFT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

447 
	`RB_COLOR
(
hód
->
rbh_roŸ
, 
fõld
Ë
RB_BLACK
; \

451 
«me
##
	`_RB_REMOVE_COLOR
(«mê*
hód
, 
ty≥
 *
∑ª¡
, ty≥ *
ñm
) \

453 
ty≥
 *
tmp
; \

454 (
ñm
 =
NULL
 || 
	`RB_COLOR
”lm, 
fõld
Ë=
RB_BLACK
) && \

455 
ñm
 !
	`RB_ROOT
(
hód
)) { \

456 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

457 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

458 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

459 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

460 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

461 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

463 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

464 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

465 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

466 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

467 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

468 
ñm
 = 
∑ª¡
; \

469 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

471 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

472 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

473 
ty≥
 *
ﬁe·
; \

474 i‡((
ﬁe·
 = 
	`RB_LEFT
(
tmp
, 
fõld
)))\

475 
	`RB_COLOR
(
ﬁe·
, 
fõld
Ë
RB_BLACK
;\

476 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

477 
	`RB_ROTATE_RIGHT
(
hód
, 
tmp
, 
ﬁe·
, 
fõld
);\

478 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

480 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

481 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

482 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
)) \

483 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

484 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

485 
ñm
 = 
	`RB_ROOT
(
hód
); \

489 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

490 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

491 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

492 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

493 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

495 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

496 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

497 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

498 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

499 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

500 
ñm
 = 
∑ª¡
; \

501 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

503 i‡(
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

504 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

505 
ty≥
 *
‹ight
; \

506 i‡((
‹ight
 = 
	`RB_RIGHT
(
tmp
, 
fõld
)))\

507 
	`RB_COLOR
(
‹ight
, 
fõld
Ë
RB_BLACK
;\

508 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

509 
	`RB_ROTATE_LEFT
(
hód
, 
tmp
, 
‹ight
, 
fõld
);\

510 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

512 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

513 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

514 i‡(
	`RB_LEFT
(
tmp
, 
fõld
)) \

515 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

516 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

517 
ñm
 = 
	`RB_ROOT
(
hód
); \

522 i‡(
ñm
) \

523 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_BLACK
; \

526 
ty≥
 * \

527 
«me
##
	`_RB_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

529 
ty≥
 *
chûd
, *
∑ª¡
, *
ﬁd
 = 
ñm
; \

530 
cﬁ‹
; \

531 i‡(
	`RB_LEFT
(
ñm
, 
fõld
Ë=
NULL
) \

532 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

533 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
Ë=
NULL
) \

534 
chûd
 = 
	`RB_LEFT
(
ñm
, 
fõld
); \

536 
ty≥
 *
À·
; \

537 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

538 (
À·
 = 
	`RB_LEFT
(
ñm
, 
fõld
))) \

539 
ñm
 = 
À·
; \

540 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

541 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

542 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

543 i‡(
chûd
) \

544 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

545 i‡(
∑ª¡
) { \

546 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

547 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

549 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

550 
	`RB_AUGMENT
(
∑ª¡
); \

552 
	`RB_ROOT
(
hód
Ë
chûd
; \

553 i‡(
	`RB_PARENT
(
ñm
, 
fõld
Ë=
ﬁd
) \

554 
∑ª¡
 = 
ñm
; \

555 (
ñm
)->
fõld
 = (
ﬁd
)->field; \

556 i‡(
	`RB_PARENT
(
ﬁd
, 
fõld
)) { \

557 i‡(
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), field) == old)\

558 
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

560 
	`RB_RIGHT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

561 
	`RB_AUGMENT
(
	`RB_PARENT
(
ﬁd
, 
fõld
)); \

563 
	`RB_ROOT
(
hód
Ë
ñm
; \

564 
	`RB_PARENT
(
	`RB_LEFT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

565 i‡(
	`RB_RIGHT
(
ﬁd
, 
fõld
)) \

566 
	`RB_PARENT
(
	`RB_RIGHT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

567 i‡(
∑ª¡
) { \

568 
À·
 = 
∑ª¡
; \

570 
	`RB_AUGMENT
(
À·
); \

571 } (
À·
 = 
	`RB_PARENT
÷e·, 
fõld
))); \

573 
cﬁ‹
; \

575 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

576 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

577 i‡(
chûd
) \

578 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

579 i‡(
∑ª¡
) { \

580 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

581 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

583 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

584 
	`RB_AUGMENT
(
∑ª¡
); \

586 
	`RB_ROOT
(
hód
Ë
chûd
; \

587 
cﬁ‹
: \

588 i‡(
cﬁ‹
 =
RB_BLACK
) \

589 
«me
##
	`_RB_REMOVE_COLOR
(
hód
, 
∑ª¡
, 
chûd
); \

590  (
ﬁd
); \

594 
ty≥
 * \

595 
«me
##
	`_RB_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

597 
ty≥
 *
tmp
; \

598 
ty≥
 *
∑ª¡
 = 
NULL
; \

599 
comp
 = 0; \

600 
tmp
 = 
	`RB_ROOT
(
hód
); \

601 
tmp
) { \

602 
∑ª¡
 = 
tmp
; \

603 
comp
 = (
cmp
)(
ñm
, 
∑ª¡
); \

604 i‡(
comp
 < 0) \

605 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

606 i‡(
comp
 > 0) \

607 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

609  (
tmp
); \

611 
	`RB_SET
(
ñm
, 
∑ª¡
, 
fõld
); \

612 i‡(
∑ª¡
 !
NULL
) { \

613 i‡(
comp
 < 0) \

614 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
ñm
; \

616 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
ñm
; \

617 
	`RB_AUGMENT
(
∑ª¡
); \

619 
	`RB_ROOT
(
hód
Ë
ñm
; \

620 
«me
##
	`_RB_INSERT_COLOR
(
hód
, 
ñm
); \

621  (
NULL
); \

625 
ty≥
 * \

626 
«me
##
	`_RB_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

628 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

629 
comp
; \

630 
tmp
) { \

631 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

632 i‡(
comp
 < 0) \

633 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

634 i‡(
comp
 > 0) \

635 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

637  (
tmp
); \

639  (
NULL
); \

642 
ty≥
 * \

643 
«me
##
	`_RB_NEXT
(
ty≥
 *
ñm
) \

645 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
)) { \

646 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

647 
	`RB_LEFT
(
ñm
, 
fõld
)) \

648 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

650 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

651 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

652 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

654 
	`RB_PARENT
(
ñm
, 
fõld
) && \

655 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field)))\

656 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

657 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

660  (
ñm
); \

663 
ty≥
 * \

664 
«me
##
	`_RB_MINMAX
(«mê*
hód
, 
vÆ
) \

666 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

667 
ty≥
 *
∑ª¡
 = 
NULL
; \

668 
tmp
) { \

669 
∑ª¡
 = 
tmp
; \

670 i‡(
vÆ
 < 0) \

671 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

673 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

675  (
∑ª¡
); \

676 }

	)

678 
	#RB_NEGINF
 -1

	)

679 
	#RB_INF
 1

	)

681 
	#RB_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_INSERT
(x, y)

	)

682 
	#RB_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_RB_REMOVE
(x, y)

	)

683 
	#RB_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_FIND
(x, y)

	)

684 
	#RB_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NEXT
(y)

	)

685 
	#RB_MIN
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

686 
	#RB_MAX
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

688 
	#RB_FOREACH
(
x
, 
«me
, 
hód
) \

689 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

690 (
x
Ë!
NULL
; \

691 (
x
Ë
«me
##
	`_RB_NEXT
(x))

	)

	@serialize/buffer.c

1 
	~"buf„r.h
"

3 
buf„r
 *
	$gëBuf„r
()

5 
size
 = 64;

6 *
byã
 = (*)
	`mÆloc
(
size
);

7 
buf„r
 *
buf
 = (buf„∏*)
	`mÆloc
((buffer));

9 if(!
byã
 || !
buf
){

10 if(
byã
Ë
	`‰ì
(byte);

11 if(
buf
Ë
	`‰ì
(buf);

12  
NULL
;

15 
buf
->
pos
 = 0;

16 
buf
->
size
 = size;

17 
buf
->
buff
 = 
byã
;

18  
buf
;

19 
	}
}

20 
	$ª£rve
(
buf„r
 *
buff
, 
Àn
)

22 
	`POINTER_NOT_NULL
(
buff
);

23 if(
buff
->
size
 - buff->
pos
 > 
Àn
)

26 
√wSize
 = 
buff
->
size
 + 
Àn
 + 64;

27 *
byã
 = (*)
	`ªÆloc
(
buff
->buff,

28 
√wSize
);

30 if(!
byã
){

33 
buff
->
size
 = 
√wSize
;

34 
buff
->buf‡
byã
;

36 
	}
}

37 
	$‰ìHópBuf„r
(
buf„r
 *
buff
)

39 if(!
buff
) ;

41 if(
buff
->buff){

42 
	`‰ì
(
buff
->buff);

44 
	`‰ì
(
buff
);

45 
	}
}

46 
	$ª£t
(
buf„r
 *
buff
)

48 
	`POINTER_NOT_NULL
(
buff
);

49 
buff
->
pos
 = 0;

51 
	}
}

54 
	$gëBuf„rByãs
(
buf„r
 *
buff
, **
byãs
)

56 if(!
buff
 || !
byãs
)  -1;

58 *
byãs
 = 
buff
->buff;

60 
	}
}

61 
	$b£ekToPos
(
buf„r
 *
buff
, 
pos
)

63 if(!
buff
)  -1;

64 if(
pos
 > 
buff
->pos)  -1;

65 
buff
->
pos
 =Öos;

67 
	}
}

68 
	$gëByãsCou¡
(
buf„r
 *
buff
, *
cou¡
)

70 if(!
buff
 || !
cou¡
)  -1;

72 *
cou¡
 = 
buff
->
pos
;

74 
	}
}

	@serialize/buffer.h

1 #i‚de‡
_BUFFER_H_


2 
	#_BUFFER_H_


	)

3 
	~"°rög.h
"

4 
	~"°dio.h
"

5 
	~"log.h
"

6 
	~"°dlib.h
"

9 
	sbuf„r
{

10 *
	mbuff
;

11 
	msize
;

12 
	mpos
;

13 }
	tbuf„r
;

15 
buf„r
 *
gëBuf„r
();

17 
ª£rve
(
buf„r
 *
buff
, 
Àn
);

19 
‰ìHópBuf„r
(
buf„r
 *
buff
);

20 
ª£t
(
buf„r
 *
buff
);

21 
gëBuf„rByãs
(
buf„r
 *
buff
, **
byãs
);

22 
gëByãsCou¡
(
buf„r
 *
buff
, *
cou¡
);

23 
b£ekToPos
(
buf„r
 *
buff
, 
pos
);

	@serialize/serialize.c

1 
	~"°dio.h
"

2 
	~"£rülize.h
"

3 
	~"log.h
"

4 
	~"°rög.h
"

7 
	$wrôeI¡
(
d©a
, 
buf„r
 *
buff
)

9 
i
;

11 if(!
buff
){

12 
	`LOG_WRITE
("pointer buffer shouldÇot be NULL\n");

15 if(
	`ª£rve
(
buff
, 
INTLEN
) < 0){

16 
	`LOG_WRITE
("OUT of Mem\n");

20 
i
 = 0; i < 4; i++){

21 
buff
->buff[buff->
pos
++] = 
	`GET_BYTE
(
d©a
, 
i
);

25 
	}
}

26 
	$ªadI¡
(
buf„r
 *
buff
, *
v
)

28 
	`POINTER_NOT_NULL
(
buff
);

29 
	`NOT_LESS_THAN
(
buff
->
size
, buff->
pos
 + 4);

31 
ªt
 = 0;

33 
ªt
 +
	`PUT_BYTE
(
buff
->buff[buff->
pos
++], 0);

34 
ªt
 +
	`PUT_BYTE
(
buff
->buff[buff->
pos
++], 1);

35 
ªt
 +
	`PUT_BYTE
(
buff
->buff[buff->
pos
++], 2);

36 
ªt
 +
	`PUT_BYTE
(
buff
->buff[buff->
pos
++], 3);

37 if(
v
Ë*v = 
ªt
;

39 
	}
}

41 
	$wrôeL⁄g
(
d©a
, 
buf„r
 *
buff
)

44 
	`POINTER_NOT_NULL
(
buff
);

45 if(
	`ª£rve
(
buff
, 
INTLEN
) < 0){

46 
	`LOG_WRITE
("OUT of Mem\n");

50 
i
;

51 
i
 = 0; i < 4; i++){

52 
buff
->buff[buff->
pos
++] = 
	`GET_BYTE
(
d©a
, 
i
);

56 
	}
}

57 
	$ªadL⁄g
(
buf„r
 *
buff
, *
v
)

59 
	`POINTER_NOT_NULL
(
buff
);

60 
	`NOT_LESS_THAN
(
buff
->
size
, buff->
pos
 + 4);

62 
ªt
 = 0;

64 
ªt
 +
	`PUT_BYTE
(
buff
->buff[buff->
pos
++], 0);

65 
ªt
 +
	`PUT_BYTE
(
buff
->buff[buff->
pos
++], 1);

66 
ªt
 +
	`PUT_BYTE
(
buff
->buff[buff->
pos
++], 2);

67 
ªt
 +
	`PUT_BYTE
(
buff
->buff[buff->
pos
++], 3);

68 if(
v
Ë*v = 
ªt
;

70 
	}
}

71 
	$wrôeUnsig√dI¡
(
d©a
, 
buf„r
 *
buff
)

73 
	`POINTER_NOT_NULL
(
buff
);

74 if(
	`ª£rve
(
buff
, 
INTLEN
) < 0){

75 
	`LOG_WRITE
("OUT of Mem\n");

79 
i
;

80 
i
 = 0; i < 4; i++){

81 
buff
->buff[buff->
pos
++] = 
	`GET_BYTE
(
d©a
, 
i
);

85 
	}
}

86 
	$ªadUnsig√dI¡
(
buf„r
 *
buff
, *
v
)

88 
	`POINTER_NOT_NULL
(
buff
);

89 
	`NOT_LESS_THAN
(
buff
->
size
, buff->
pos
 + 4);

91 
ªt
 = 0;;

93 
ªt
 +
	`PUT_BYTE
(
buff
->buff[buff->
pos
++], 0);

94 
ªt
 +
	`PUT_BYTE
(
buff
->buff[buff->
pos
++], 1);

95 
ªt
 +
	`PUT_BYTE
(
buff
->buff[buff->
pos
++], 2);

96 
ªt
 +
	`PUT_BYTE
(
buff
->buff[buff->
pos
++], 3);

97 if(
v
Ë*v = 
ªt
;

99 
	}
}

102 
	$wrôeByãs
(*
°r
, 
Àn
, 
buf„r
 *
buff
)

104 if(!
buff
){

105 
	`LOG_WRITE
("buffer shouldÇot be NULL\n");

109 if(
	`ª£rve
(
buff
, 
Àn
 + 
INTLEN
)){

110 
	`LOG_WRITE
("out of mem\n");

113 
	`wrôeI¡
(
Àn
, 
buff
);

114 
	`mem˝y
(
buff
->buf‡+ buff->
pos
 , 
°r
, 
Àn
);

115 
buff
->
pos
 +
Àn
;

117 
	}
}

122 
	$ªadByãs
(
buf„r
 *
buff
, **
v
, *
Ànv
)

124 
	`POINTER_NOT_NULL
(
buff
);

125 
	`NOT_LESS_THAN
(
buff
->
size
, buff->
pos
 + 4);

126 
Àn
;

127 
	`ªadI¡
(
buff
, &
Àn
);

129 *
byãs
 = (*)
	`mÆloc
(
Àn
);

130 if(!
byãs
)  -1;

132 
	`mem˝y
(
byãs
, 
buff
->buf‡+ buff->
pos
, 
Àn
);

133 
buff
->
pos
 +
Àn
;

135 if(
v
)

136 *
v
 = 
byãs
;

138 
	`‰ì
(
byãs
);

140 if(
Ànv
)

141 *
Ànv
 = 
Àn
;

143 
	}
}

145 
	$wrôeByã
(
byã
, 
buf„r
 *
buff
)

147 
	`POINTER_NOT_NULL
(
buff
);

148 if(
	`ª£rve
(
buff
, 1)){

149 
	`LOG_WRITE
("out of mem\n");

152 
buff
->buff[buff->
pos
++] = 
byã
;

154 
	}
}

155 
	$ªadByã
(
buf„r
 *
buff
, *
v
)

157 
	`POINTER_NOT_NULL
(
buff
);

158 
	`NOT_LESS_THAN
(
buff
->
size
, buff->
pos
 + 1);

159 
byã
 = 
buff
->buff[buff->
pos
++];

160 if(
v
Ë*v = 
byã
;

162 
	}
}

	@serialize/serialize.h

16 
	~"°rög.h
"

17 
	~"buf„r.h
"

19 
	#INTLEN
 4

	)

20 
	#LONGLEN
 4

	)

21 
	#UNSIGNLEN
 4

	)

22 
	#BYTELEN
 1

	)

23 
	#BYTESHEADLEN
 4

	)

24 
	#COLUMNHEADLEN
 4

	)

28 
	#GET_BYTE
(
DATA
, 
INDEX
Ë(DATA >> (INDEX * 8Ë& 0xFF)

	)

29 
	#PUT_BYTE
(
BYTE
, 
INDEX
Ë(()BYTE << (INDEX * 8))

	)

33 
wrôeI¡
(
d©a
, 
buf„r
 *
buff
);

34 
ªadI¡
(
buf„r
 *
buff
, *
v
);

35 
wrôeByãs
(*
°r
, 
Àn
, 
buf„r
 *
buff
);

36 
ªadByãs
(
buf„r
 *
buff
, **
v
, *
Àn
);

37 
wrôeL⁄g
(
d©a
, 
buf„r
 *
buff
);

38 
ªadL⁄g
(
buf„r
 *
buff
, *
v
);

39 
wrôeUnsig√dI¡
(
d©a
, 
buf„r
 *
buff
);

40 
ªadUnsig√dI¡
(
buf„r
 *
buff
, *
v
);

41 
wrôeByã
(
byã
, 
buf„r
 *
buff
);

42 
ªadByã
(
buf„r
 *
buff
, *
v
);

	@serialize/test.c

1 
	~"°dio.h
"

2 
	~"°rög.h
"

3 
	~"time.h
"

4 
	~"£rülize.h
"

7 
	$maö
()

9 *
°r
 = "what isÅhis doing\n";

10 
k
 = 'a';

12 
buf„r
 *
b
 = 
	`gëBuf„r
();

13 
	`¥ötf
("ªtu∫ %d\n", 
	`wrôeByã
(
k
, 
b
));

14 
v
;

15 
	`ª£t
(
b
);

16 
	`¥ötf
("ªtu∫ %d\n", 
	`ªadByã
(
b
, &
v
));

17 
	`¥ötf
("wrôeI¡ %¯ªadI¡ %¯<F8>\n", 
k
, 
v
);

18 
	`ª£t
(
b
);

19 
	`wrôeByãs
(
°r
, 
b
);

20 
	`ª£t
(
b
);

21 *
ss
;

22 
	`ªadByãs
(
b
, &
ss
);

23 
	`¥ötf
("wrôeI¡ %†ªadI¡ %s\n", 
°r
,
ss
);

34 
	}
}

	@splay_rb_tree/auxiRBtree.h

1 
	~"åì.h
"

2 
	~"°dio.h
"

9 
	#AUXIL_RB_TREE
(
d©a_ty≥
, 
hód_ty≥
, 
lök
, 
cmp
) \

10 
	`RB_HEAD
(
hód_ty≥
, 
d©a_ty≥
); \

11 
	`RB_PROTOTYPE
(
hód_ty≥
, 
d©a_ty≥
, 
lök
, 
cmp
);\

12 
	`RB_GENERATE
(
hód_ty≥
, 
d©a_ty≥
, 
lök
, 
cmp
);

	)

14 
	#GENERATE_OPS_DATA
(
›sSë_ty≥
, 
hód_ty≥
, 
hód_«me
, 
d©a_ty≥
, 
lök
, 
cmp
) \

15 
	s›sSë_ty≥
{ \

16 
hód_ty≥
 
hód_«me
; \

17 
d©a_ty≥
 *(*
ªmove
)(
hód_ty≥
 *, data_type *); \

18 
d©a_ty≥
 *(*
ö£π
)(
hód_ty≥
 *, data_type *); \

19 
d©a_ty≥
 *(*
föd
)(
hód_ty≥
 *, data_type *); \

20 
d©a_ty≥
 *(*
√xt
)(data_type *); \

21 
d©a_ty≥
 *(*
mömax
)(
hód_ty≥
 *, ); \

22 }
	t›sSë_ty≥
;

	)

24 
	#RB_TREE_GENERATE
(
›sSë_ty≥
, 
›sSë_«me
, 
d©a_ty≥
, 
hód_ty≥
, 
hód_«me
, 
lök
, 
cmp
) \

25 
	`AUXIL_RB_TREE
(
d©a_ty≥
, 
hód_ty≥
, 
lök
, 
cmp
) \

26 
	`GENERATE_OPS_DATA
(
›sSë_ty≥
, 
hód_ty≥
, 
hód_«me
, 
d©a_ty≥
, 
lök
, 
cmp
) \

27 
›sSë_ty≥
 
›sSë_«me
 = { {
NULL
}, \

28 
hód_ty≥
##
_RB_REMOVE
, \

29 
hód_ty≥
##
_RB_INSERT
,\

30 
hód_ty≥
##
_RB_FIND
, \

31 
hód_ty≥
##
_RB_NEXT
,\

32 
hód_ty≥
##
_RB_MINMAX
,\

33 }

	)

	@splay_rb_tree/test.c

1 
	~"auxiRBåì.h
"

2 
	~"°dio.h
"

5 
	sI¡
{

6 
	mi
;

7 
RB_ENTRY
(
I¡
Ë
	mlök
;

9 
	$cmp
(
I¡
 *
x
, I¡ *
y
)

11  
x
->
i
 - 
y
->i;

12 
	}
}

14 
RB_TREE_GENERATE
(
I›s_ty≥
, 
I›s
, 
I¡
, 
hód
, hód, 
lök
, 
cmp
);

16 
	$maö
()

18 
	`¥ötf
("%p", &
I›s
.
hód
);

20 
	}
}

	@splay_rb_tree/test_tree.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~"åì.h
"

4 
	sINT
{

5 
	md©a
;

6 
SPLAY_ENTRY
(
INT
Ë
	mlök
;

8 
ölöe
 
	$cmp
(
INT
 *
x
, INT *
y
)

10  
x
->
d©a
 - 
y
->data;

11 
	}
}

12 
	$SPLAY_HEAD
(
INT_hód
, 
INT
Ë
roŸ
 = 
	`SPLAY_INITIALIZER
(root);

13 
	`SPLAY_PROTOTYPE
(
INT_hód
, 
INT
, 
lök
, 
cmp
);

14 
	`SPLAY_GENERATE
(
INT_hód
, 
INT
, 
lök
, 
cmp
);

15 
	$ã°_•œy_åì
()

17 
i
, 
j
;

18 
INT
 *
x
, *
y
, 
f
;

20 
i
 = 0; i < 10; i++){

21 
x
 = (
INT
 *)
	`ˇŒoc
(1, (INT));

22 
x
->
d©a
 = 
i
 + 10;

23 
	`SPLAY_INSERT
(
INT_hód
, &
roŸ
, 
x
);

25 
	`SPLAY_FOREACH
(
y
, 
INT_hód
, &
roŸ
){

26 
	`¥ötf
("%d \t", 
y
->
d©a
);

28 
	`¥ötf
("\n\n");

29 
f
.
d©a
 = 15;

30 
	`¥ötf
("before search\n");

31 
	`¥ötf
("roŸ %d\n", 
roŸ
.
•h_roŸ
->
d©a
);

32 
y
 = 
	`SPLAY_FIND
(
INT_hód
, &
roŸ
, &
f
);

33 
	`¥ötf
("roŸ %d\n", 
roŸ
.
•h_roŸ
->
d©a
);

34 
	`¥ötf
("%∞%p\n", 
y
->
lök
.
•e_À·
, y->lök.
•e_right
);

35 
y
 = 
	`SPLAY_FIND
(
INT_hód
, &
roŸ
, &
f
);

36 
	`¥ötf
("%∞%p\n", 
y
->
lök
.
•e_À·
, y->lök.
•e_right
);

37 
y
 = 
	`SPLAY_FIND
(
INT_hód
, &
roŸ
, &
f
);

38 
y
 = 
	`SPLAY_FIND
(
INT_hód
, &
roŸ
, &
f
);

39 
y
 = 
	`SPLAY_NEXT
(
INT_hód
, &
roŸ
, y);

40 if(
y
)

41 
	`¥ötf
("\¿thê√xào‡‡i†%d\n", 
y
->
d©a
);

43 
	`¥ötf
("not findÇext\n");

44 
y
 = 
	`SPLAY_MIN
(
INT_hód
, &
roŸ
);

45 
	`¥ötf
("\¿mö :%d\n", 
y
->
d©a
);

46 
y
 = 
	`SPLAY_MAX
(
INT_hód
, &
roŸ
);

47 
	`¥ötf
("\nmax:%d\n", 
y
->
d©a
);

48 if(
y
 =
NULL
)

49 
	`¥ötf
("elemÇot find\n");

50 
	`¥ötf
("föd %d\t", 
y
->
d©a
);

52 
	`¥ötf
("\n\n");

53 
	`SPLAY_FOREACH
(
y
, 
INT_hód
, &
roŸ
){

54 
	`¥ötf
("%d \t", 
y
->
d©a
);

58 
y
 = 
	`SPLAY_REMOVE
(
INT_hód
, &
roŸ
, &
f
);

60 if(
y
)

61 
	`¥ötf
("\¿thê√xào‡‡i†%d\n", 
y
->
d©a
);

63 
	`¥ötf
("not findÇext\n");

64 
y
 = 
	`SPLAY_FIND
(
INT_hód
, &
roŸ
, &
f
);

65 if(
y
 =
NULL
)

66 
	`¥ötf
("elemÇot find\n");

68 
	`¥ötf
("\n\n");

70 
	}
}

77 
	sRBINT
{

78 
	md©a
;

79 
RB_ENTRY
(
RBINT
Ë
	mlök
;

81 
ölöe
 
	$rb_cmp
(
RBINT
 *
x
, RBINT *
y
)

83  
x
->
d©a
 - 
y
->data;

84 
	}
}

85 
	$RB_HEAD
(
RBINT_hód
, 
RBINT
Ë
roŸ1
 = 
	`RB_INITIALIZER
(root1);

86 
	`RB_PROTOTYPE
(
RBINT_hód
, 
RBINT
, 
lök
, 
rb_cmp
);

87 
	`RB_GENERATE
(
RBINT_hód
, 
RBINT
, 
lök
, 
rb_cmp
);

88 
	$ã°_rb_åì
()

90 
i
, 
j
;

91 
RBINT
 *
x
, *
y
, 
f
;

93 
i
 = 0; i < 10; i++){

94 
x
 = (
RBINT
 *)
	`ˇŒoc
(1, (RBINT));

95 
x
->
d©a
 = 
i
 + 10;

96 
	`RB_INSERT
(
RBINT_hód
, &
roŸ1
, 
x
);

98 
	`RB_FOREACH
(
y
, 
RBINT_hód
, &
roŸ1
){

99 
	`¥ötf
("%d \t", 
y
->
d©a
);

101 
	`¥ötf
("\n\n");

102 
f
.
d©a
 = 15;

103 
	`¥ötf
("before search\n");

104 
	`¥ötf
("roŸ %d\n", 
roŸ1
.
rbh_roŸ
->
d©a
);

105 
y
 = 
	`RB_FIND
(
RBINT_hód
, &
roŸ1
, &
f
);

106 
	`¥ötf
("roŸ %d\n", 
roŸ1
.
rbh_roŸ
->
d©a
);

107 
	`¥ötf
("%∞%p\n", 
y
->
lök
.
rbe_À·
, y->lök.
rbe_right
);

108 
y
 = 
	`RB_FIND
(
RBINT_hód
, &
roŸ1
, &
f
);

109 
	`¥ötf
("%∞%p\n", 
y
->
lök
.
rbe_À·
, y->lök.
rbe_right
);

110 
y
 = 
	`RB_FIND
(
RBINT_hód
, &
roŸ1
, &
f
);

111 
y
 = 
	`RB_FIND
(
RBINT_hód
, &
roŸ1
, &
f
);

112 
y
 = 
	`RB_NEXT
(
RBINT_hód
, &
roŸ1
, y);

113 if(
y
)

114 
	`¥ötf
("\¿thê√xào‡‡i†%d\n", 
y
->
d©a
);

116 
	`¥ötf
("not findÇext\n");

117 
y
 = 
	`RB_MIN
(
RBINT_hód
, &
roŸ1
);

118 
	`¥ötf
("\¿mö :%d\n", 
y
->
d©a
);

119 
y
 = 
	`RB_MAX
(
RBINT_hód
, &
roŸ1
);

120 
	`¥ötf
("\nmax:%d\n", 
y
->
d©a
);

121 if(
y
 =
NULL
)

122 
	`¥ötf
("elemÇot find\n");

123 
	`¥ötf
("föd %d\t", 
y
->
d©a
);

125 
	`¥ötf
("\n\n");

126 
	`RB_FOREACH
(
y
, 
RBINT_hód
, &
roŸ1
){

127 
	`¥ötf
("%d \t", 
y
->
d©a
);

133 if(
y
)

134 
	`¥ötf
("\¿thê√xào‡‡i†%d\n", 
y
->
d©a
);

136 
	`¥ötf
("not findÇext\n");

137 
y
 = 
	`RB_FIND
(
RBINT_hód
, &
roŸ1
, &
f
);

138 if(
y
 =
NULL
)

139 
	`¥ötf
("elemÇot find\n");

141 
	`¥ötf
("\n\n");

143 
	}
}

144 
	$maö
()

147 
	`ã°_rb_åì
();

149 
	}
}

	@splay_rb_tree/tree.h

27 #i‚def 
_SYS_TREE_H_


28 
	#_SYS_TREE_H_


	)

73 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

74 
	s«me
 { \

75 
ty≥
 *
•h_roŸ
; \

76 }

	)

78 
	#SPLAY_INITIALIZER
(
roŸ
) \

79 { 
NULL
 }

	)

81 
	#SPLAY_INIT
(
roŸ
) do { \

82 (
roŸ
)->
•h_roŸ
 = 
NULL
; \

83 } 0)

	)

85 
	#SPLAY_ENTRY
(
ty≥
) \

87 
ty≥
 *
•e_À·
; \

88 
ty≥
 *
•e_right
; \

89 }

	)

91 
	#SPLAY_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_À·


	)

92 
	#SPLAY_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_right


	)

93 
	#SPLAY_ROOT
(
hód
Ë(hód)->
•h_roŸ


	)

94 
	#SPLAY_EMPTY
(
hód
Ë(
	`SPLAY_ROOT
(hódË=
NULL
)

	)

97 
	#SPLAY_ROTATE_RIGHT
(
hód
, 
tmp
, 
fõld
) do { \

98 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
tmp
, field); \

99 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

100 (
hód
)->
•h_roŸ
 = 
tmp
; \

101 } 0)

	)

103 
	#SPLAY_ROTATE_LEFT
(
hód
, 
tmp
, 
fõld
) do { \

104 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
tmp
, field); \

105 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

106 (
hód
)->
•h_roŸ
 = 
tmp
; \

107 } 0)

	)

109 
	#SPLAY_LINKLEFT
(
hód
, 
tmp
, 
fõld
) do { \

110 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

111 
tmp
 = (
hód
)->
•h_roŸ
; \

112 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
); \

113 } 0)

	)

115 
	#SPLAY_LINKRIGHT
(
hód
, 
tmp
, 
fõld
) do { \

116 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

117 
tmp
 = (
hód
)->
•h_roŸ
; \

118 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
); \

119 } 0)

	)

121 
	#SPLAY_ASSEMBLE
(
hód
, 
node
, 
À·
, 
right
, 
fõld
) do { \

122 
	`SPLAY_RIGHT
(
À·
, 
fõld
Ë
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, field); \

123 
	`SPLAY_LEFT
(
right
, 
fõld
Ë
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, field);\

124 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
node
, field); \

125 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
node
, field); \

126 } 0)

	)

130 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

131 
«me
##
	`_SPLAY
(«mê*, 
ty≥
 *); \

132 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

133 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

134 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

137 
__ölöe
 
ty≥
 * \

138 
«me
##
	`_SPLAY_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

140 i‡(
	`SPLAY_EMPTY
(
hód
)) \

141 (
NULL
); \

142 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

143 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) \

144  (
hód
->
•h_roŸ
); \

145  (
NULL
); \

148 
__ölöe
 
ty≥
 * \

149 
«me
##
	`_SPLAY_NEXT
(«mê*
hód
, 
ty≥
 *
ñm
) \

151 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

152 i‡(
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë!
NULL
) { \

153 
ñm
 = 
	`SPLAY_RIGHT
”lm, 
fõld
); \

154 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë!
NULL
) { \

155 
ñm
 = 
	`SPLAY_LEFT
”lm, 
fõld
); \

158 
ñm
 = 
NULL
; \

159  (
ñm
); \

162 
__ölöe
 
ty≥
 * \

163 
«me
##
	`_SPLAY_MIN_MAX
(«mê*
hód
, 
vÆ
) \

165 
«me
##
	`_SPLAY_MINMAX
(
hód
, 
vÆ
); \

166  (
	`SPLAY_ROOT
(
hód
)); \

167 }

	)

172 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

173 
ty≥
 * \

174 
«me
##
	`_SPLAY_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

176 i‡(
	`SPLAY_EMPTY
(
hód
)) { \

177 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë
	`SPLAY_RIGHT
”lm, fõldË
NULL
; \

179 
__comp
; \

180 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

181 
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
); \

182 if(
__comp
 < 0) { \

183 
	`SPLAY_LEFT
(
ñm
, 
fõld
ËSPLAY_LEFT((
hód
)->
•h_roŸ
, field);\

184 
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

185 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

186 } i‡(
__comp
 > 0) { \

187 
	`SPLAY_RIGHT
(
ñm
, 
fõld
ËSPLAY_RIGHT((
hód
)->
•h_roŸ
, field);\

188 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

189 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

191  ((
hód
)->
•h_roŸ
); \

193 (
hód
)->
•h_roŸ
 = (
ñm
); \

194  (
NULL
); \

197 
ty≥
 * \

198 
«me
##
	`_SPLAY_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

200 
ty≥
 *
__tmp
; \

201 i‡(
	`SPLAY_EMPTY
(
hód
)) \

202  (
NULL
); \

203 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

204 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) { \

205 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) { \

206 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
);\

208 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

209 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
);\

210 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

211 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
__tmp
; \

213  (
ñm
); \

215  (
NULL
); \

219 
«me
##
	`_SPLAY
(«mê*
hód
, 
ty≥
 *
ñm
) \

221 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

222 
__comp
; \

224 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

225 
__À·
 = 
__right
 = &
__node
; \

227 (
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
))) { \

228 i‡(
__comp
 < 0) { \

229 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

230 i‡(
__tmp
 =
NULL
) \

232 i‡((
cmp
)(
ñm
, 
__tmp
) < 0){ \

233 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

234 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

237 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

238 } i‡(
__comp
 > 0) { \

239 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

240 i‡(
__tmp
 =
NULL
) \

242 i‡((
cmp
)(
ñm
, 
__tmp
) > 0){ \

243 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

244 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

247 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

250 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

256 
«me
##
	`_SPLAY_MINMAX
(«mê*
hód
, 
__comp
) \

258 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

260 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

261 
__À·
 = 
__right
 = &
__node
; \

264 i‡(
__comp
 < 0) { \

265 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

266 i‡(
__tmp
 =
NULL
) \

268 i‡(
__comp
 < 0){ \

269 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

270 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

273 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

274 } i‡(
__comp
 > 0) { \

275 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

276 i‡(
__tmp
 =
NULL
) \

278 i‡(
__comp
 > 0) { \

279 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

280 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

283 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

286 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

287 }

	)

289 
	#SPLAY_NEGINF
 -1

	)

290 
	#SPLAY_INF
 1

	)

292 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_INSERT
(x, y)

	)

293 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_REMOVE
(x, y)

	)

294 
	#SPLAY_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_FIND
(x, y)

	)

295 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_NEXT
(x, y)

	)

296 
	#SPLAY_MIN
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

297 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

298 
	#SPLAY_MAX
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

299 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

301 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hód
) \

302 (
x
Ë
	`SPLAY_MIN
(
«me
, 
hód
); \

303 (
x
Ë!
NULL
; \

304 (
x
Ë
	`SPLAY_NEXT
(
«me
, 
hód
, x))

	)

307 
	#RB_HEAD
(
«me
, 
ty≥
) \

308 
	s«me
 { \

309 
ty≥
 *
rbh_roŸ
; \

310 }

	)

312 
	#RB_INITIALIZER
(
roŸ
) \

313 { 
NULL
 }

	)

315 
	#RB_INIT
(
roŸ
) do { \

316 (
roŸ
)->
rbh_roŸ
 = 
NULL
; \

317 } 0)

	)

319 
	#RB_BLACK
 0

	)

320 
	#RB_RED
 1

	)

321 
	#RB_ENTRY
(
ty≥
) \

323 
ty≥
 *
rbe_À·
; \

324 
ty≥
 *
rbe_right
; \

325 
ty≥
 *
rbe_∑ª¡
; \

326 
rbe_cﬁ‹
; \

327 }

	)

329 
	#RB_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_À·


	)

330 
	#RB_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_right


	)

331 
	#RB_PARENT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_∑ª¡


	)

332 
	#RB_COLOR
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_cﬁ‹


	)

333 
	#RB_ROOT
(
hód
Ë(hód)->
rbh_roŸ


	)

334 
	#RB_EMPTY
(
hód
Ë(
	`RB_ROOT
(hódË=
NULL
)

	)

336 
	#RB_SET
(
ñm
, 
∑ª¡
, 
fõld
) do { \

337 
	`RB_PARENT
(
ñm
, 
fõld
Ë
∑ª¡
; \

338 
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
”lm, fõldË
NULL
; \

339 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_RED
; \

340 } 0)

	)

342 
	#RB_SET_BLACKRED
(
bœck
, 
ªd
, 
fõld
) do { \

343 
	`RB_COLOR
(
bœck
, 
fõld
Ë
RB_BLACK
; \

344 
	`RB_COLOR
(
ªd
, 
fõld
Ë
RB_RED
; \

345 } 0)

	)

347 #i‚de‡
RB_AUGMENT


348 
	#RB_AUGMENT
(
x
)

	)

351 
	#RB_ROTATE_LEFT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

352 (
tmp
Ë
	`RB_RIGHT
(
ñm
, 
fõld
); \

353 i‡((
	`RB_RIGHT
(
ñm
, 
fõld
Ë
	`RB_LEFT
(
tmp
, field))) { \

354 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË(
ñm
); \

356 
	`RB_AUGMENT
(
ñm
); \

357 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

358 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

359 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

361 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

363 (
hód
)->
rbh_roŸ
 = (
tmp
); \

364 
	`RB_LEFT
(
tmp
, 
fõld
Ë(
ñm
); \

365 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

366 
	`RB_AUGMENT
(
tmp
); \

367 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

368 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

369 } 0)

	)

371 
	#RB_ROTATE_RIGHT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

372 (
tmp
Ë
	`RB_LEFT
(
ñm
, 
fõld
); \

373 i‡((
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
(
tmp
, field))) { \

374 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË(
ñm
); \

376 
	`RB_AUGMENT
(
ñm
); \

377 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

378 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

379 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

381 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

383 (
hód
)->
rbh_roŸ
 = (
tmp
); \

384 
	`RB_RIGHT
(
tmp
, 
fõld
Ë(
ñm
); \

385 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

386 
	`RB_AUGMENT
(
tmp
); \

387 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

388 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

389 } 0)

	)

392 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

393 
«me
##
	`_RB_INSERT_COLOR
(«mê*, 
ty≥
 *); \

394 
«me
##
	`_RB_REMOVE_COLOR
(«mê*, 
ty≥
 *, type *);\

395 
ty≥
 *
«me
##
	`_RB_REMOVE
(name *, type *); \

396 
ty≥
 *
«me
##
	`_RB_INSERT
(name *, type *); \

397 
ty≥
 *
«me
##
	`_RB_FIND
(name *, type *); \

398 
ty≥
 *
«me
##
	`_RB_NEXT
(type *); \

399 
ty≥
 *
«me
##
	`_RB_MINMAX
(name *, ); \

401 

	)

405 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

407 
«me
##
	`_RB_INSERT_COLOR
(«mê*
hód
, 
ty≥
 *
ñm
) \

409 
ty≥
 *
∑ª¡
, *
g∑ª¡
, *
tmp
; \

410 (
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
)) && \

411 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë=
RB_RED
) { \

412 
g∑ª¡
 = 
	`RB_PARENT
(
∑ª¡
, 
fõld
); \

413 i‡(
∑ª¡
 =
	`RB_LEFT
(
g∑ª¡
, 
fõld
)) { \

414 
tmp
 = 
	`RB_RIGHT
(
g∑ª¡
, 
fõld
); \

415 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

416 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

417 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

418 
ñm
 = 
g∑ª¡
; \

421 i‡(
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

422 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

423 
tmp
 = 
∑ª¡
; \

424 
∑ª¡
 = 
ñm
; \

425 
ñm
 = 
tmp
; \

427 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

428 
	`RB_ROTATE_RIGHT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

430 
tmp
 = 
	`RB_LEFT
(
g∑ª¡
, 
fõld
); \

431 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

432 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

433 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

434 
ñm
 = 
g∑ª¡
; \

437 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

438 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

439 
tmp
 = 
∑ª¡
; \

440 
∑ª¡
 = 
ñm
; \

441 
ñm
 = 
tmp
; \

443 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

444 
	`RB_ROTATE_LEFT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

447 
	`RB_COLOR
(
hód
->
rbh_roŸ
, 
fõld
Ë
RB_BLACK
; \

451 
«me
##
	`_RB_REMOVE_COLOR
(«mê*
hód
, 
ty≥
 *
∑ª¡
, ty≥ *
ñm
) \

453 
ty≥
 *
tmp
; \

454 (
ñm
 =
NULL
 || 
	`RB_COLOR
”lm, 
fõld
Ë=
RB_BLACK
) && \

455 
ñm
 !
	`RB_ROOT
(
hód
)) { \

456 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

457 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

458 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

459 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

460 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

461 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

463 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

464 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

465 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

466 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

467 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

468 
ñm
 = 
∑ª¡
; \

469 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

471 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

472 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

473 
ty≥
 *
ﬁe·
; \

474 i‡((
ﬁe·
 = 
	`RB_LEFT
(
tmp
, 
fõld
)))\

475 
	`RB_COLOR
(
ﬁe·
, 
fõld
Ë
RB_BLACK
;\

476 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

477 
	`RB_ROTATE_RIGHT
(
hód
, 
tmp
, 
ﬁe·
, 
fõld
);\

478 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

480 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

481 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

482 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
)) \

483 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

484 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

485 
ñm
 = 
	`RB_ROOT
(
hód
); \

489 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

490 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

491 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

492 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

493 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

495 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

496 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

497 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

498 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

499 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

500 
ñm
 = 
∑ª¡
; \

501 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

503 i‡(
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

504 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

505 
ty≥
 *
‹ight
; \

506 i‡((
‹ight
 = 
	`RB_RIGHT
(
tmp
, 
fõld
)))\

507 
	`RB_COLOR
(
‹ight
, 
fõld
Ë
RB_BLACK
;\

508 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

509 
	`RB_ROTATE_LEFT
(
hód
, 
tmp
, 
‹ight
, 
fõld
);\

510 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

512 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

513 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

514 i‡(
	`RB_LEFT
(
tmp
, 
fõld
)) \

515 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

516 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

517 
ñm
 = 
	`RB_ROOT
(
hód
); \

522 i‡(
ñm
) \

523 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_BLACK
; \

526 
ty≥
 * \

527 
«me
##
	`_RB_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

529 
ty≥
 *
chûd
, *
∑ª¡
, *
ﬁd
 = 
ñm
; \

530 
cﬁ‹
; \

531 i‡(
	`RB_LEFT
(
ñm
, 
fõld
Ë=
NULL
) \

532 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

533 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
Ë=
NULL
) \

534 
chûd
 = 
	`RB_LEFT
(
ñm
, 
fõld
); \

536 
ty≥
 *
À·
; \

537 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

538 (
À·
 = 
	`RB_LEFT
(
ñm
, 
fõld
))) \

539 
ñm
 = 
À·
; \

540 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

541 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

542 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

543 i‡(
chûd
) \

544 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

545 i‡(
∑ª¡
) { \

546 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

547 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

549 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

550 
	`RB_AUGMENT
(
∑ª¡
); \

552 
	`RB_ROOT
(
hód
Ë
chûd
; \

553 i‡(
	`RB_PARENT
(
ñm
, 
fõld
Ë=
ﬁd
) \

554 
∑ª¡
 = 
ñm
; \

555 (
ñm
)->
fõld
 = (
ﬁd
)->field; \

556 i‡(
	`RB_PARENT
(
ﬁd
, 
fõld
)) { \

557 i‡(
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), field) == old)\

558 
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

560 
	`RB_RIGHT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

561 
	`RB_AUGMENT
(
	`RB_PARENT
(
ﬁd
, 
fõld
)); \

563 
	`RB_ROOT
(
hód
Ë
ñm
; \

564 
	`RB_PARENT
(
	`RB_LEFT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

565 i‡(
	`RB_RIGHT
(
ﬁd
, 
fõld
)) \

566 
	`RB_PARENT
(
	`RB_RIGHT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

567 i‡(
∑ª¡
) { \

568 
À·
 = 
∑ª¡
; \

570 
	`RB_AUGMENT
(
À·
); \

571 } (
À·
 = 
	`RB_PARENT
÷e·, 
fõld
))); \

573 
cﬁ‹
; \

575 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

576 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

577 i‡(
chûd
) \

578 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

579 i‡(
∑ª¡
) { \

580 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

581 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

583 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

584 
	`RB_AUGMENT
(
∑ª¡
); \

586 
	`RB_ROOT
(
hód
Ë
chûd
; \

587 
cﬁ‹
: \

588 i‡(
cﬁ‹
 =
RB_BLACK
) \

589 
«me
##
	`_RB_REMOVE_COLOR
(
hód
, 
∑ª¡
, 
chûd
); \

590  (
ﬁd
); \

594 
ty≥
 * \

595 
«me
##
	`_RB_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

597 
ty≥
 *
tmp
; \

598 
ty≥
 *
∑ª¡
 = 
NULL
; \

599 
comp
 = 0; \

600 
tmp
 = 
	`RB_ROOT
(
hód
); \

601 
tmp
) { \

602 
∑ª¡
 = 
tmp
; \

603 
comp
 = (
cmp
)(
ñm
, 
∑ª¡
); \

604 i‡(
comp
 < 0) \

605 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

606 i‡(
comp
 > 0) \

607 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

609  (
tmp
); \

611 
	`RB_SET
(
ñm
, 
∑ª¡
, 
fõld
); \

612 i‡(
∑ª¡
 !
NULL
) { \

613 i‡(
comp
 < 0) \

614 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
ñm
; \

616 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
ñm
; \

617 
	`RB_AUGMENT
(
∑ª¡
); \

619 
	`RB_ROOT
(
hód
Ë
ñm
; \

620 
«me
##
	`_RB_INSERT_COLOR
(
hód
, 
ñm
); \

621  (
NULL
); \

625 
ty≥
 * \

626 
«me
##
	`_RB_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

628 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

629 
comp
; \

630 
tmp
) { \

631 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

632 i‡(
comp
 < 0) \

633 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

634 i‡(
comp
 > 0) \

635 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

637  (
tmp
); \

639  (
NULL
); \

642 
ty≥
 * \

643 
«me
##
	`_RB_NEXT
(
ty≥
 *
ñm
) \

645 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
)) { \

646 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

647 
	`RB_LEFT
(
ñm
, 
fõld
)) \

648 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

650 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

651 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

652 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

654 
	`RB_PARENT
(
ñm
, 
fõld
) && \

655 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field)))\

656 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

657 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

660  (
ñm
); \

663 
ty≥
 * \

664 
«me
##
	`_RB_MINMAX
(«mê*
hód
, 
vÆ
) \

666 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

667 
ty≥
 *
∑ª¡
 = 
NULL
; \

668 
tmp
) { \

669 
∑ª¡
 = 
tmp
; \

670 i‡(
vÆ
 < 0) \

671 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

673 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

675  (
∑ª¡
); \

676 }

	)

678 
	#RB_NEGINF
 -1

	)

679 
	#RB_INF
 1

	)

681 
	#RB_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_INSERT
(x, y)

	)

682 
	#RB_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_RB_REMOVE
(x, y)

	)

683 
	#RB_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_FIND
(x, y)

	)

684 
	#RB_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NEXT
(y)

	)

685 
	#RB_MIN
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

686 
	#RB_MAX
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

688 
	#RB_FOREACH
(
x
, 
«me
, 
hód
) \

689 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

690 (
x
Ë!
NULL
; \

691 (
x
Ë
«me
##
	`_RB_NEXT
(x))

	)

	@test/a.h

1 
	~"°dio.h
"

3 
	tty≥
;

	@test/autoconfig/config.h

5 
	#PACKAGE
 "ã°"

	)

8 
	#PACKAGE_BUGREPORT
 "mryu™0@gmaû.com"

	)

11 
	#PACKAGE_NAME
 "FULL-PACKAGE-NAME"

	)

14 
	#PACKAGE_STRING
 "FULL-PACKAGE-NAME VERSION"

	)

17 
	#PACKAGE_TARNAME
 "fuŒ-∑ckage-«me"

	)

20 
	#PACKAGE_URL
 ""

	)

23 
	#PACKAGE_VERSION
 "VERSION"

	)

26 
	#VERSION
 "1.0"

	)

	@test/autoconfig/test-1.0/test.c

1 
	~"°dio.h
"

3 
	$maö
()

5 
	`¥ötf
("hello, world\n");

7 
	}
}

	@test/autoconfig/test.c

1 
	~"°dio.h
"

3 
	$maö
()

5 
	`¥ötf
("hello, world\n");

7 
	}
}

	@test/b.c

1 
	~"°dlib.h
"

2 
	~"°dio.h
"

4 
ölöe
 
	$bbbbbbbbb
(
k
)

6 
	`¥ötf
("hñlÿw‹ld, %d\n", 
k
);

7 
	`bbbbbbbbb
(
k
);

9 
	}
}

10 
	$ccccccccc
(
k
)

12 
	`¥ötf
("c¯%d\n", 
k
);

13  
k
;

14 
	}
}

15 
	$ØØØØØa
(
k
)

17 
	`¥ötf
("thi†i†%d\n", 
k
);

18 
	`ccccccccc
(
k
);

19  
	`bbbbbbbbb
(
k
);

20 
	}
}

21 
	$dddddddd
(
k
)

23 
a
 = 1, 
b
 = 1;

24  
a
+
b
+
k
;

25 
	}
}

26 
	$maö
(
¨gc
, **
¨gv
)

28 
k
;

29 
k
 = 
	`dddddddd
(
¨gc
);

30  
	`ØØØØØa
(
k
);

31 
	}
}

	@test/c.c

1 
	~"a.h
"

3 
	$f
()

5 
ty≥
 
k
 = 10;

6  
k
;

7 
	}
}

	@test/ia/ia.c

10 
	~"ü.h
"

12 
	~<mem‹y.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

42 
öföôe_¨øy
 *
	$ü_loˇã
(

43 
öföôe_¨øy
 *
¨øy_±r
, 
ödex
,

44 *
cuºít_ödex_±r
)

47 
öföôe_¨øy
 *
cuºít_±r
;

48 
cuºít_±r
 = 
¨øy_±r
;

49 *
cuºít_ödex_±r
 = 
ödex
;

50 *
cuºít_ödex_±r
 >
BLOCK_SIZE
) {

51 i‡(
cuºít_±r
->
√xt
 =
NULL
) {

52 
cuºít_±r
->
√xt
 = 
	`mÆloc
((
öföôe_¨øy
));

53 i‡(
cuºít_±r
->
√xt
 =
NULL
) {

54 
	`Ârötf
(
°dîr
, "Error:Out of memory\n");

55 
	`exô
(8);

57 
	`mem£t
(
cuºít_±r
->
√xt
, '\0', (

58 
öföôe_¨øy
));

60 
cuºít_±r
 = cuºít_±r->
√xt
;

61 *
cuºít_ödex_±r
 -
BLOCK_SIZE
;

63  (
cuºít_±r
);

64 
	}
}

80 
	$ü_°‹e
(
öföôe_¨øy
 * 
¨øy_±r
,

81 
ödex
, 
°‹e_d©a
)

84 
öföôe_¨øy
 *
cuºít_±r
;

86 
cuºít_ödex
;

88 
cuºít_±r
 = 
	`ü_loˇã
(
¨øy_±r
, 
ödex
, &
cuºít_ödex
);

89 
cuºít_±r
->
d©a
[
cuºít_ödex
] = 
°‹e_d©a
;

90 
	}
}

121 
	$ü_gë
(
öföôe_¨øy
 *
¨øy_±r
, 
ödex
)

124 
öföôe_¨øy
 *
cuºít_±r
;

126 
cuºít_ödex
;

128 
cuºít_±r
 = 
	`ü_loˇã
(
¨øy_±r
, 
ödex
, &
cuºít_ödex
);

129  (
cuºít_±r
->
d©a
[
cuºít_ödex
]);

130 
	}
}

	@test/ia/ia.h

34 
	#BLOCK_SIZE
 10

	)

35 
	söföôe_¨øy
 {

38 
	md©a
[
BLOCK_SIZE
];

40 
öföôe_¨øy
 *
	m√xt
;

53 
	#ü_öô
(
¨øy_±r
Ë{◊ºay_±r)->
√xt
 = 
NULL
;}

54 

	)

82 
ü_gë
(
öföôe_¨øy
 *
¨øy_±r
, 
ödex
);

99 
ü_°‹e
(
öföôe_¨øy
 * 
¨øy_±r
,

100 
ödex
, 
°‹e_d©a
);

	@test/kk.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

6 
	$cmp°rögp
(c⁄° *
p1
, c⁄° *
p2
)

12  
	`°rcmp
(* (* c⁄° *Ë
p1
, * (* c⁄° *Ë
p2
);

13 
	}
}

16 
	$maö
(
¨gc
, *
¨gv
[])

18 
j
;

20 i‡(
¨gc
 < 2) {

21 
	`Ârötf
(
°dîr
, "Ußge: %†<°rög>...\n", 
¨gv
[0]);

22 
	`exô
(
EXIT_FAILURE
);

25 
	`qs‹t
(&
¨gv
[1], 
¨gc
 - 1, ◊rgv[1]), 
cmp°rögp
);

27 
j
 = 1; j < 
¨gc
; j++)

28 
	`puts
(
¨gv
[
j
]);

29 
	`exô
(
EXIT_SUCCESS
);

30 
	}
}

	@test/ss.c

1 
	~"°dio.h
"

2 
	~"°rög.h
"

3 
	~"°dlib.h
"

6 
	$com∑ª
(*
a
, *
b
)

8 **
a1
 = (**)
a
;

9 **
b1
 = (**)
b
;

10  
	`°rcmp
(*
a1
, *
b1
);

11 
	}
}

12 
	$maö
()

14 *
a
[] = {"test1",

20 
	`qs‹t
(
a
, 4, (*), 
com∑ª
);

21 
i
;

23 
i
 = 0; i < 4; i++){

24 
	`¥ötf
("%s\n", 
a
[
i
]);

27 
	}
}

	@test/system/const.c

1 
	~"°dio.h
"

3 
	$maö
()

5 **
p
 = 
NULL
;

6 c⁄° **
˝
 = 
NULL
;

7 c⁄° *
p1
 = 
NULL
;

8 *
p2
 = 
NULL
;

9 
˝
 = 
p
;

10 
˝
 = &
p1
;

11 
p1
 = 
p2
;

13 
	}
}

	@test/system/dict.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<°d¨g.h
>

6 
	~<as£π.h
>

7 
	~<limôs.h
>

8 
	~<sys/time.h
>

9 
	~<˘y≥.h
>

11 
	~"di˘.h
"

21 
	gdi˘_ˇn_ªsize
 = 1;

22 
	gdi˘_f‹˚_ªsize_øtio
 = 5;

26 
_di˘Ex∑ndIfNìded
(
di˘
 *
ht
);

27 
_di˘NextPowî
(
size
);

28 
_di˘KeyIndex
(
di˘
 *
ht
, c⁄° *
key
);

29 
_di˘Inô
(
di˘
 *
ht
, 
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
);

34 
	$di˘I¡HashFun˘i⁄
(
key
)

36 
key
 += ~(key << 15);

37 
key
 ^= (key >> 10);

38 
key
 += (key << 3);

39 
key
 ^= (key >> 6);

40 
key
 += ~(key << 11);

41 
key
 ^= (key >> 16);

42  
key
;

43 
	}
}

46 
	$di˘IdítôyHashFun˘i⁄
(
key
)

48  
key
;

49 
	}
}

53 
	$di˘GíHashFun˘i⁄
(c⁄° *
buf
, 
Àn
) {

54 
hash
 = 5381;

56 
Àn
--)

57 
hash
 = ((hash << 5Ë+ hashË+ (*
buf
++);

58  
hash
;

59 
	}
}

62 
	$di˘GíCa£HashFun˘i⁄
(c⁄° *
buf
, 
Àn
) {

63 
hash
 = 5381;

65 
Àn
--)

66 
hash
 = ((hash << 5Ë+ hashË+ (
	`tﬁowî
(*
buf
++));

67  
hash
;

68 
	}
}

74 
	$_di˘Re£t
(
di˘ht
 *
ht
)

76 
ht
->
èbÀ
 = 
NULL
;

77 
ht
->
size
 = 0;

78 
ht
->
sizemask
 = 0;

79 
ht
->
u£d
 = 0;

80 
	}
}

83 
di˘
 *
	$di˘Cª©e
(
di˘Ty≥
 *
ty≥
,

84 *
¥ivD©aPå
)

86 
di˘
 *
d
 = 
	`mÆloc
((*d));

88 
	`_di˘Inô
(
d
,
ty≥
,
¥ivD©aPå
);

89  
d
;

90 
	}
}

93 
	$_di˘Inô
(
di˘
 *
d
, 
di˘Ty≥
 *
ty≥
,

94 *
¥ivD©aPå
)

96 
	`_di˘Re£t
(&
d
->
ht
[0]);

97 
	`_di˘Re£t
(&
d
->
ht
[1]);

98 
d
->
ty≥
 =Åype;

99 
d
->
¥ivd©a
 = 
¥ivD©aPå
;

100 
d
->
ªhashidx
 = -1;

101 
d
->
ôî©‹s
 = 0;

102  
DICT_OK
;

103 
	}
}

107 
	$di˘Resize
(
di˘
 *
d
)

109 
möimÆ
;

111 i‡(!
di˘_ˇn_ªsize
 || 
	`di˘IsRehashög
(
d
)Ë 
DICT_ERR
;

112 
möimÆ
 = 
d
->
ht
[0].
u£d
;

113 i‡(
möimÆ
 < 
DICT_HT_INITIAL_SIZE
)

114 
möimÆ
 = 
DICT_HT_INITIAL_SIZE
;

115  
	`di˘Ex∑nd
(
d
, 
möimÆ
);

116 
	}
}

119 
	$di˘Ex∑nd
(
di˘
 *
d
, 
size
)

121 
di˘ht
 
n
;

122 
ªÆsize
 = 
	`_di˘NextPowî
(
size
);

126 i‡(
	`di˘IsRehashög
(
d
Ë|| d->
ht
[0].
u£d
 > 
size
)

127  
DICT_ERR
;

130 
n
.
size
 = 
ªÆsize
;

131 
n
.
sizemask
 = 
ªÆsize
-1;

132 
n
.
èbÀ
 = 
	`ˇŒoc
((
di˘E¡ry
*), 
ªÆsize
);

133 
n
.
u£d
 = 0;

137 i‡(
d
->
ht
[0].
èbÀ
 =
NULL
) {

138 
d
->
ht
[0] = 
n
;

139  
DICT_OK
;

143 
d
->
ht
[1] = 
n
;

144 
d
->
ªhashidx
 = 0;

145  
DICT_OK
;

146 
	}
}

152 
	$di˘Rehash
(
di˘
 *
d
, 
n
) {

153 i‡(!
	`di˘IsRehashög
(
d
))  0;

155 
n
--) {

156 
di˘E¡ry
 *
de
, *
√xtde
;

159 i‡(
d
->
ht
[0].
u£d
 == 0) {

160 
	`‰ì
(
d
->
ht
[0].
èbÀ
);

161 
d
->
ht
[0] = d->ht[1];

162 
	`_di˘Re£t
(&
d
->
ht
[1]);

163 
d
->
ªhashidx
 = -1;

169 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
] =
NULL
) d->rehashidx++;

170 
de
 = 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
];

172 
de
) {

173 
h
;

175 
√xtde
 = 
de
->
√xt
;

177 
h
 = 
	`di˘HashKey
(
d
, 
de
->
key
Ë& d->
ht
[1].
sizemask
;

178 
de
->
√xt
 = 
d
->
ht
[1].
èbÀ
[
h
];

179 
d
->
ht
[1].
èbÀ
[
h
] = 
de
;

180 
d
->
ht
[0].
u£d
--;

181 
d
->
ht
[1].
u£d
++;

182 
de
 = 
√xtde
;

184 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
] = 
NULL
;

185 
d
->
ªhashidx
++;

188 
	}
}

190 
	$timeInMûli£c⁄ds
() {

191 
timevÆ
 
tv
;

193 
	`gëtimeofday
(&
tv
,
NULL
);

194  ((()
tv
.
tv_£c
)*1000)+—v.
tv_u£c
/1000);

195 
	}
}

198 
	$di˘RehashMûli£c⁄ds
(
di˘
 *
d
, 
ms
) {

199 
°¨t
 = 
	`timeInMûli£c⁄ds
();

200 
ªhashes
 = 0;

202 
	`di˘Rehash
(
d
,100)) {

203 
ªhashes
 += 100;

204 i‡(
	`timeInMûli£c⁄ds
()-
°¨t
 > 
ms
) ;

206  
ªhashes
;

207 
	}
}

217 
	$_di˘RehashSãp
(
di˘
 *
d
) {

218 i‡(
d
->
ôî©‹s
 =0Ë
	`di˘Rehash
(d,1);

219 
	}
}

222 
	$di˘Add
(
di˘
 *
d
, *
key
, *
vÆ
)

224 
ödex
;

225 
di˘E¡ry
 *
íåy
;

226 
di˘ht
 *
ht
;

228 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

232 i‡((
ödex
 = 
	`_di˘KeyIndex
(
d
, 
key
)) == -1)

233  
DICT_ERR
;

236 
ht
 = 
	`di˘IsRehashög
(
d
) ? &d->ht[1] : &d->ht[0];

237 
íåy
 = 
	`mÆloc
((*entry));

238 
íåy
->
√xt
 = 
ht
->
èbÀ
[
ödex
];

239 
ht
->
èbÀ
[
ödex
] = 
íåy
;

240 
ht
->
u£d
++;

243 
	`di˘SëHashKey
(
d
, 
íåy
, 
key
);

244 
	`di˘SëHashVÆ
(
d
, 
íåy
, 
vÆ
);

245  
DICT_OK
;

246 
	}
}

252 
	$di˘Rïœ˚
(
di˘
 *
d
, *
key
, *
vÆ
)

254 
di˘E¡ry
 *
íåy
, 
auxíåy
;

258 i‡(
	`di˘Add
(
d
, 
key
, 
vÆ
Ë=
DICT_OK
)

261 
íåy
 = 
	`di˘Föd
(
d
, 
key
);

268 
auxíåy
 = *
íåy
;

269 
	`di˘SëHashVÆ
(
d
, 
íåy
, 
vÆ
);

270 
	`di˘FªeE¡ryVÆ
(
d
, &
auxíåy
);

272 
	}
}

275 
	$di˘GíîicDñëe
(
di˘
 *
d
, c⁄° *
key
, 
no‰ì
)

277 
h
, 
idx
;

278 
di˘E¡ry
 *
he
, *
¥evHe
;

279 
èbÀ
;

281 i‡(
d
->
ht
[0].
size
 =0Ë 
DICT_ERR
;

282 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

283 
h
 = 
	`di˘HashKey
(
d
, 
key
);

285 
èbÀ
 = 0;Åable <= 1;Åable++) {

286 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

287 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

288 
¥evHe
 = 
NULL
;

289 
he
) {

290 i‡(
	`di˘Com∑ªHashKeys
(
d
, 
key
, 
he
->key)) {

292 i‡(
¥evHe
)

293 
¥evHe
->
√xt
 = 
he
->next;

295 
d
->
ht
[
èbÀ
].èbÀ[
idx
] = 
he
->
√xt
;

296 i‡(!
no‰ì
) {

297 
	`di˘FªeE¡ryKey
(
d
, 
he
);

298 
	`di˘FªeE¡ryVÆ
(
d
, 
he
);

300 
	`‰ì
(
he
);

301 
d
->
ht
[
èbÀ
].
u£d
--;

302  
DICT_OK
;

304 
¥evHe
 = 
he
;

305 
he
 = he->
√xt
;

307 i‡(!
	`di˘IsRehashög
(
d
)) ;

309  
DICT_ERR
;

310 
	}
}

312 
	$di˘Dñëe
(
di˘
 *
ht
, c⁄° *
key
) {

313  
	`di˘GíîicDñëe
(
ht
,
key
,0);

314 
	}
}

316 
	$di˘DñëeNoFªe
(
di˘
 *
ht
, c⁄° *
key
) {

317  
	`di˘GíîicDñëe
(
ht
,
key
,1);

318 
	}
}

321 
	$_di˘CÀ¨
(
di˘
 *
d
, 
di˘ht
 *
ht
)

323 
i
;

326 
i
 = 0; i < 
ht
->
size
 && ht->
u£d
 > 0; i++) {

327 
di˘E¡ry
 *
he
, *
√xtHe
;

329 i‡((
he
 = 
ht
->
èbÀ
[
i
]Ë=
NULL
) ;

330 
he
) {

331 
√xtHe
 = 
he
->
√xt
;

332 
	`di˘FªeE¡ryKey
(
d
, 
he
);

333 
	`di˘FªeE¡ryVÆ
(
d
, 
he
);

334 
	`‰ì
(
he
);

335 
ht
->
u£d
--;

336 
he
 = 
√xtHe
;

340 
	`‰ì
(
ht
->
èbÀ
);

342 
	`_di˘Re£t
(
ht
);

343  
DICT_OK
;

344 
	}
}

347 
	$di˘Rñó£
(
di˘
 *
d
)

349 
	`_di˘CÀ¨
(
d
,&d->
ht
[0]);

350 
	`_di˘CÀ¨
(
d
,&d->
ht
[1]);

351 
	`‰ì
(
d
);

352 
	}
}

354 
di˘E¡ry
 *
	$di˘Föd
(
di˘
 *
d
, c⁄° *
key
)

356 
di˘E¡ry
 *
he
;

357 
h
, 
idx
, 
èbÀ
;

359 i‡(
d
->
ht
[0].
size
 =0Ë 
NULL
;

360 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

361 
h
 = 
	`di˘HashKey
(
d
, 
key
);

362 
èbÀ
 = 0;Åable <= 1;Åable++) {

363 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

364 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

365 
he
) {

366 i‡(
	`di˘Com∑ªHashKeys
(
d
, 
key
, 
he
->key))

367  
he
;

368 
he
 = he->
√xt
;

370 i‡(!
	`di˘IsRehashög
(
d
)Ë 
NULL
;

372  
NULL
;

373 
	}
}

375 *
	$di˘FëchVÆue
(
di˘
 *
d
, c⁄° *
key
) {

376 
di˘E¡ry
 *
he
;

378 
he
 = 
	`di˘Föd
(
d
,
key
);

379  
he
 ? 
	`di˘GëE¡ryVÆ
(heË: 
NULL
;

380 
	}
}

382 
di˘Iãøt‹
 *
	$di˘GëIãøt‹
(
di˘
 *
d
)

384 
di˘Iãøt‹
 *
ôî
 = 
	`mÆloc
((*iter));

386 
ôî
->
d
 = d;

387 
ôî
->
èbÀ
 = 0;

388 
ôî
->
ödex
 = -1;

389 
ôî
->
ß„
 = 0;

390 
ôî
->
íåy
 = 
NULL
;

391 
ôî
->
√xtE¡ry
 = 
NULL
;

392  
ôî
;

393 
	}
}

395 
di˘Iãøt‹
 *
	$di˘GëSa„Iãøt‹
(
di˘
 *
d
) {

396 
di˘Iãøt‹
 *
i
 = 
	`di˘GëIãøt‹
(
d
);

398 
i
->
ß„
 = 1;

399  
i
;

400 
	}
}

402 
di˘E¡ry
 *
	$di˘Next
(
di˘Iãøt‹
 *
ôî
)

405 i‡(
ôî
->
íåy
 =
NULL
) {

406 
di˘ht
 *
ht
 = &
ôî
->
d
->ht[ôî->
èbÀ
];

407 i‡(
ôî
->
ß„
 && iãr->
ödex
 =-1 && iãr->
èbÀ
 == 0)

408 
ôî
->
d
->
ôî©‹s
++;

409 
ôî
->
ödex
++;

410 i‡(
ôî
->
ödex
 >(sig√dË
ht
->
size
) {

411 i‡(
	`di˘IsRehashög
(
ôî
->
d
Ë&& iãr->
èbÀ
 == 0) {

412 
ôî
->
èbÀ
++;

413 
ôî
->
ödex
 = 0;

414 
ht
 = &
ôî
->
d
->ht[1];

419 
ôî
->
íåy
 = 
ht
->
èbÀ
[ôî->
ödex
];

421 
ôî
->
íåy
 = iãr->
√xtE¡ry
;

423 i‡(
ôî
->
íåy
) {

426 
ôî
->
√xtE¡ry
 = iãr->
íåy
->
√xt
;

427  
ôî
->
íåy
;

430  
NULL
;

431 
	}
}

433 
	$di˘Rñó£Iãøt‹
(
di˘Iãøt‹
 *
ôî
)

435 i‡(
ôî
->
ß„
 && !(ôî->
ödex
 =-1 && iãr->
èbÀ
 == 0))

436 
ôî
->
d
->
ôî©‹s
--;

437 
	`‰ì
(
ôî
);

438 
	}
}

442 
di˘E¡ry
 *
	$di˘GëR™domKey
(
di˘
 *
d
)

444 
di˘E¡ry
 *
he
, *
‹ighe
;

445 
h
;

446 
li°Àn
, 
li°ñe
;

448 i‡(
	`di˘Size
(
d
Ë=0Ë 
NULL
;

449 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

450 i‡(
	`di˘IsRehashög
(
d
)) {

452 
h
 = 
	`øndom
(Ë% (
d
->
ht
[0].
size
+d->ht[1].size);

453 
he
 = (
h
 >
d
->
ht
[0].
size
Ë? d->ht[1].
èbÀ
[h - d->ht[0].size] :

454 
d
->
ht
[0].
èbÀ
[
h
];

455 } 
he
 =
NULL
);

458 
h
 = 
	`øndom
(Ë& 
d
->
ht
[0].
sizemask
;

459 
he
 = 
d
->
ht
[0].
èbÀ
[
h
];

460 } 
he
 =
NULL
);

467 
li°Àn
 = 0;

468 
‹ighe
 = 
he
;

469 
he
) {

470 
he
 = he->
√xt
;

471 
li°Àn
++;

473 
li°ñe
 = 
	`øndom
(Ë% 
li°Àn
;

474 
he
 = 
‹ighe
;

475 
li°ñe
--Ë
he
 = he->
√xt
;

476  
he
;

477 
	}
}

482 
	$_di˘Ex∑ndIfNìded
(
di˘
 *
d
)

485 i‡(
	`di˘IsRehashög
(
d
)Ë 
DICT_OK
;

488 i‡(
d
->
ht
[0].
size
 =0Ë 
	`di˘Ex∑nd
(d, 
DICT_HT_INITIAL_SIZE
);

494 i‡(
d
->
ht
[0].
u£d
 >d->ht[0].
size
 &&

495 (
di˘_ˇn_ªsize
 ||

496 
d
->
ht
[0].
u£d
/d->ht[0].
size
 > 
di˘_f‹˚_ªsize_øtio
))

498  
	`di˘Ex∑nd
(
d
, ((d->
ht
[0].
size
 > d->ht[0].
u£d
) ?

499 
d
->
ht
[0].
size
 : d->ht[0].
u£d
)*2);

501  
DICT_OK
;

502 
	}
}

505 
	$_di˘NextPowî
(
size
)

507 
i
 = 
DICT_HT_INITIAL_SIZE
;

509 i‡(
size
 >
LONG_MAX
)  LONG_MAX;

511 i‡(
i
 >
size
)

512  
i
;

513 
i
 *= 2;

515 
	}
}

523 
	$_di˘KeyIndex
(
di˘
 *
d
, c⁄° *
key
)

525 
h
, 
idx
, 
èbÀ
;

526 
di˘E¡ry
 *
he
;

529 i‡(
	`_di˘Ex∑ndIfNìded
(
d
Ë=
DICT_ERR
)

532 
h
 = 
	`di˘HashKey
(
d
, 
key
);

533 
èbÀ
 = 0;Åable <= 1;Åable++) {

534 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

536 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

537 
he
) {

538 i‡(
	`di˘Com∑ªHashKeys
(
d
, 
key
, 
he
->key))

540 
he
 = he->
√xt
;

542 i‡(!
	`di˘IsRehashög
(
d
)) ;

544  
idx
;

545 
	}
}

547 
	$di˘Em±y
(
di˘
 *
d
) {

548 
	`_di˘CÀ¨
(
d
,&d->
ht
[0]);

549 
	`_di˘CÀ¨
(
d
,&d->
ht
[1]);

550 
d
->
ªhashidx
 = -1;

551 
d
->
ôî©‹s
 = 0;

552 
	}
}

554 
	#DICT_STATS_VECTLEN
 50

	)

555 
	$_di˘PrötSètsHt
(
di˘ht
 *
ht
) {

556 
i
, 
¶Ÿs
 = 0, 
chaöÀn
, 
maxchaöÀn
 = 0;

557 
tŸchaöÀn
 = 0;

558 
˛ve˘‹
[
DICT_STATS_VECTLEN
];

560 i‡(
ht
->
u£d
 == 0) {

561 
	`¥ötf
("No statsávailable forÉmpty dictionaries\n");

565 
i
 = 0; i < 
DICT_STATS_VECTLEN
; i++Ë
˛ve˘‹
[i] = 0;

566 
i
 = 0; i < 
ht
->
size
; i++) {

567 
di˘E¡ry
 *
he
;

569 i‡(
ht
->
èbÀ
[
i
] =
NULL
) {

570 
˛ve˘‹
[0]++;

573 
¶Ÿs
++;

575 
chaöÀn
 = 0;

576 
he
 = 
ht
->
èbÀ
[
i
];

577 
he
) {

578 
chaöÀn
++;

579 
he
 = he->
√xt
;

581 
˛ve˘‹
[(
chaöÀn
 < 
DICT_STATS_VECTLEN
) ? chainlen : (DICT_STATS_VECTLEN-1)]++;

582 i‡(
chaöÀn
 > 
maxchaöÀn
) maxchainlen = chainlen;

583 
tŸchaöÀn
 +
chaöÀn
;

585 
	`¥ötf
("HashÅable stats:\n");

586 
	`¥ötf
("ÅabÀ size: %ld\n", 
ht
->
size
);

587 
	`¥ötf
("Çumbî o‡ñemíts: %ld\n", 
ht
->
u£d
);

588 
	`¥ötf
(" dif„ª¡ slŸs: %ld\n", 
¶Ÿs
);

589 
	`¥ötf
(" max chaöÜígth: %ld\n", 
maxchaöÀn
);

590 
	`¥ötf
("ávg chaöÜígth (cou¡ed): %.02f\n", ()
tŸchaöÀn
/
¶Ÿs
);

591 
	`¥ötf
("ávg chaöÜígth (compuãd): %.02f\n", ()
ht
->
u£d
/
¶Ÿs
);

592 
	`¥ötf
(" ChainÜength distribution:\n");

593 
i
 = 0; i < 
DICT_STATS_VECTLEN
-1; i++) {

594 i‡(
˛ve˘‹
[
i
] == 0) ;

595 
	`¥ötf
(" %s%ld: %ld (%.02f%%)\n",(
i
 =
DICT_STATS_VECTLEN
-1)?">":"", i, 
˛ve˘‹
[i], (()˛ve˘‹[i]/
ht
->
size
)*100);

597 
	}
}

599 
	$di˘PrötSèts
(
di˘
 *
d
) {

600 
	`_di˘PrötSètsHt
(&
d
->
ht
[0]);

601 i‡(
	`di˘IsRehashög
(
d
)) {

602 
	`¥ötf
("-- Rehashing into ht[1]:\n");

603 
	`_di˘PrötSètsHt
(&
d
->
ht
[1]);

605 
	}
}

607 
	$di˘E«bÀResize
() {

608 
di˘_ˇn_ªsize
 = 1;

609 
	}
}

611 
	$di˘DißbÀResize
() {

612 
di˘_ˇn_ªsize
 = 0;

613 
	}
}

623 
	$_di˘SåögC›yHTHashFun˘i⁄
(c⁄° *
key
)

625  
	`di˘GíHashFun˘i⁄
(
key
, 
	`°æí
(key));

626 
	}
}

628 *
	$_di˘SåögDup
(*
¥ivd©a
, c⁄° *
key
)

630 
Àn
 = 
	`°æí
(
key
);

631 *
c›y
 = 
	`mÆloc
(
Àn
+1);

632 
	`DICT_NOTUSED
(
¥ivd©a
);

634 
	`mem˝y
(
c›y
, 
key
, 
Àn
);

635 
c›y
[
Àn
] = '\0';

636  
c›y
;

637 
	}
}

639 
	$_di˘SåögC›yHTKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

640 c⁄° *
key2
)

642 
	`DICT_NOTUSED
(
¥ivd©a
);

644  
	`°rcmp
(
key1
, 
key2
) == 0;

645 
	}
}

647 
	$_di˘SåögDe°ru˘‹
(*
¥ivd©a
, *
key
)

649 
	`DICT_NOTUSED
(
¥ivd©a
);

651 
	`‰ì
(
key
);

652 
	}
}

654 
di˘Ty≥
 
	gdi˘Ty≥HópSåögC›yKey
 = {

655 
_di˘SåögC›yHTHashFun˘i⁄
,

656 
_di˘SåögDup
,

657 
NULL
,

658 
_di˘SåögC›yHTKeyCom∑ª
,

659 
_di˘SåögDe°ru˘‹
,

660 
NULL


665 
di˘Ty≥
 
	gdi˘Ty≥HópSåögs
 = {

666 
_di˘SåögC›yHTHashFun˘i⁄
,

667 
NULL
,

668 
NULL
,

669 
_di˘SåögC›yHTKeyCom∑ª
,

670 
_di˘SåögDe°ru˘‹
,

671 
NULL


676 
di˘Ty≥
 
	gdi˘Ty≥HópSåögC›yKeyVÆue
 = {

677 
_di˘SåögC›yHTHashFun˘i⁄
,

678 
_di˘SåögDup
,

679 
_di˘SåögDup
,

680 
_di˘SåögC›yHTKeyCom∑ª
,

681 
_di˘SåögDe°ru˘‹
,

682 
_di˘SåögDe°ru˘‹
,

	@test/system/dict.h

1 #i‚de‡
__DICT_H


2 
	#__DICT_H


	)

4 
	#DICT_OK
 0

	)

5 
	#DICT_ERR
 1

	)

8 
	#DICT_NOTUSED
(
V
Ë((ËV)

	)

10 
	sdi˘E¡ry
 {

11 *
	mkey
;

12 *
	mvÆ
;

13 
di˘E¡ry
 *
	m√xt
;

14 } 
	tdi˘E¡ry
;

16 
	sdi˘Ty≥
 {

17 (*
	mhashFun˘i⁄
)(c⁄° *
	mkey
);

18 *(*
	mkeyDup
)(*
	m¥ivd©a
, c⁄° *
	mkey
);

19 *(*
	mvÆDup
)(*
	m¥ivd©a
, c⁄° *
	mobj
);

20 (*
	mkeyCom∑ª
)(*
	m¥ivd©a
, c⁄° *
	mkey1
, c⁄° *
	mkey2
);

21 (*
	mkeyDe°ru˘‹
)(*
	m¥ivd©a
, *
	mkey
);

22 (*
	mvÆDe°ru˘‹
)(*
	m¥ivd©a
, *
	mobj
);

23 } 
	tdi˘Ty≥
;

27 
	sdi˘ht
 {

28 
di˘E¡ry
 **
	mèbÀ
;

29 
	msize
;

30 
	msizemask
;

31 
	mu£d
;

32 } 
	tdi˘ht
;

34 
	sdi˘
 {

35 
di˘Ty≥
 *
	mty≥
;

36 *
	m¥ivd©a
;

37 
di˘ht
 
	mht
[2];

38 
	mªhashidx
;

39 
	môî©‹s
;

40 } 
	tdi˘
;

46 
	sdi˘Iãøt‹
 {

47 
di˘
 *
	md
;

48 
	mèbÀ
, 
	mödex
, 
	mß„
;

49 
di˘E¡ry
 *
	míåy
, *
	m√xtE¡ry
;

50 } 
	tdi˘Iãøt‹
;

53 
	#DICT_HT_INITIAL_SIZE
 4

	)

56 
	#di˘FªeE¡ryVÆ
(
d
, 
íåy
) \

57 i‡((
d
)->
ty≥
->
vÆDe°ru˘‹
) \

58 (
d
)->
ty≥
->
	`vÆDe°ru˘‹
((d)->
¥ivd©a
, (
íåy
)->
vÆ
)

	)

60 
	#di˘SëHashVÆ
(
d
, 
íåy
, 
_vÆ_
) do { \

61 i‡((
d
)->
ty≥
->
vÆDup
) \

62 
íåy
->
vÆ
 = (
d
)->
ty≥
->
	`vÆDup
((d)->
¥ivd©a
, 
_vÆ_
); \

64 
íåy
->
vÆ
 = (
_vÆ_
); \

65 } 0)

	)

67 
	#di˘FªeE¡ryKey
(
d
, 
íåy
) \

68 i‡((
d
)->
ty≥
->
keyDe°ru˘‹
) \

69 (
d
)->
ty≥
->
	`keyDe°ru˘‹
((d)->
¥ivd©a
, (
íåy
)->
key
)

	)

71 
	#di˘SëHashKey
(
d
, 
íåy
, 
_key_
) do { \

72 i‡((
d
)->
ty≥
->
keyDup
) \

73 
íåy
->
key
 = (
d
)->
ty≥
->
	`keyDup
((d)->
¥ivd©a
, 
_key_
); \

75 
íåy
->
key
 = (
_key_
); \

76 } 0)

	)

78 
	#di˘Com∑ªHashKeys
(
d
, 
key1
, 
key2
) \

79 (((
d
)->
ty≥
->
keyCom∑ª
) ? \

80 (
d
)->
ty≥
->
	`keyCom∑ª
((d)->
¥ivd©a
, 
key1
, 
key2
) : \

81 (
key1
Ë=(
key2
))

	)

83 
	#di˘HashKey
(
d
, 
key
Ë(d)->
ty≥
->
	`hashFun˘i⁄
(key)

	)

85 
	#di˘GëE¡ryKey
(
he
Ë((he)->
key
)

	)

86 
	#di˘GëE¡ryVÆ
(
he
Ë((he)->
vÆ
)

	)

87 
	#di˘SlŸs
(
d
Ë((d)->
ht
[0].
size
+(d)->ht[1].size)

	)

88 
	#di˘Size
(
d
Ë((d)->
ht
[0].
u£d
+(d)->ht[1].u£d)

	)

89 
	#di˘IsRehashög
(
ht
Ë((ht)->
ªhashidx
 !-1)

	)

92 
di˘
 *
di˘Cª©e
(
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
);

93 
di˘Ex∑nd
(
di˘
 *
d
, 
size
);

94 
di˘Add
(
di˘
 *
d
, *
key
, *
vÆ
);

95 
di˘Rïœ˚
(
di˘
 *
d
, *
key
, *
vÆ
);

96 
di˘Dñëe
(
di˘
 *
d
, c⁄° *
key
);

97 
di˘DñëeNoFªe
(
di˘
 *
d
, c⁄° *
key
);

98 
di˘Rñó£
(
di˘
 *
d
);

99 
di˘E¡ry
 * 
di˘Föd
(
di˘
 *
d
, c⁄° *
key
);

100 *
di˘FëchVÆue
(
di˘
 *
d
, c⁄° *
key
);

101 
di˘Resize
(
di˘
 *
d
);

102 
di˘Iãøt‹
 *
di˘GëIãøt‹
(
di˘
 *
d
);

103 
di˘Iãøt‹
 *
di˘GëSa„Iãøt‹
(
di˘
 *
d
);

104 
di˘E¡ry
 *
di˘Next
(
di˘Iãøt‹
 *
ôî
);

105 
di˘Rñó£Iãøt‹
(
di˘Iãøt‹
 *
ôî
);

106 
di˘E¡ry
 *
di˘GëR™domKey
(
di˘
 *
d
);

107 
di˘PrötSèts
(
di˘
 *
d
);

108 
di˘GíHashFun˘i⁄
(c⁄° *
buf
, 
Àn
);

109 
di˘GíCa£HashFun˘i⁄
(c⁄° *
buf
, 
Àn
);

110 
di˘Em±y
(
di˘
 *
d
);

111 
di˘E«bÀResize
();

112 
di˘DißbÀResize
();

113 
di˘Rehash
(
di˘
 *
d
, 
n
);

114 
di˘RehashMûli£c⁄ds
(
di˘
 *
d
, 
ms
);

117 
di˘Ty≥
 
di˘Ty≥HópSåögC›yKey
;

118 
di˘Ty≥
 
di˘Ty≥HópSåögs
;

119 
di˘Ty≥
 
di˘Ty≥HópSåögC›yKeyVÆue
;

	@test/system/hash.c

1 
	~"hash.h
"

3 
	shashíåy


5 *
	mkey
;

6 *
	md©a
;

7 
hashíåy
 *
	m√xt
;

10 
	s_hashèbÀ


12 (*
	mgëhash
)(*);

13 (*
	mcom∑ª
)(*, *);

14 
	mhashsize
;

15 
	mcou¡
;

16 
hashíåy
 **
	mhashli°
;

17 
keyFªe
(*);

18 
vÆueFªe
(*);

21 
	#hashödex
(
key
, 
èb
Ë(—ab->
gëhash
)(keyË% (èb->
hashsize
 -1))

	)

23 
	$lh_°rhash
(*
§c
, *
hash
)

25 
i
, 
l
;

26 
ªt
 = 0;

27 *
s
;

28 *
°r
 = (*)
§c
;

29 i‡(
°r
 =
NULL
)

31 
l
 = (
	`°æí
(
°r
) + 1) / 2;

32 
s
 = (*)
°r
;

34 
i
 = 0; i < 
l
; i++)

35 
ªt
 ^
s
[
i
]<<(i&0x0f);

36 if(
hash
Ë*hash = 
ªt
;

38 
	}
}

40 
	$equÆ_°r
(*
k1
, *
k2
)

42  (0 =
	`°rcmp
((*)
k1
, (*)
k2
));

43 
	}
}

45 
ölöe
 
hashíåy
 *
	$hashíåy_√w
(*
key
, *
d©a
)

47 
hashíåy
 *
√w
 = 
	`mÆloc
((hashentry));

48 if(!
√w
Ë 
NULL
;

49 
√w
->
key
 = key;

50 
√w
->
d©a
 = data;

51 
√w
->
√xt
 = 
NULL
;

52  
√w
;

53 
	}
}

55 
ölöe
 
	$hli°_≠≥nd
(
hashíåy
 **
roŸ
, *
key
, *
d©a
)

57 
hashíåy
 *
l
, *
pos
;

58 
l
 = 
	`hashíåy_√w
(
key
, 
d©a
);

59 if(!
l
)  -1;

60 i‡(*
roŸ
 =
NULL
) {

61 *
roŸ
 = 
l
;

63 
pos
 = *
roŸ
;Öos->
√xt
 !
NULL
;Öos =Öos->next);

64 
pos
->
√xt
 = 
l
;

67 
	}
}

69 
hli°_upd©e
(
hashíåy
 *
roŸ
, *
key
, *
d©a
,

70 (*
com∑ª
)(*, *), (*
keyFªe
)(*), (*
vÆueFªe
)(*))

72 
hashíåy
 *
pos
;

73 
pos
 = 
roŸ
;Öo†!
NULL
;Öo†pos->
√xt
 ) {

74 i‡–
	`com∑ª
(
key
, 
pos
->key) ) {

75 
	`vÆueFªe
(
pos
->
d©a
);

76 
pos
->
d©a
 = data;

77 
	`keyFªe
(
key
);

82 
	}
}

84 
ölöe
 
hashíåy
 *
	$hashíåy_‰ì
(
hashíåy
 *
h
)

86 
hashíåy
 *
√xt
 = 
h
->next;

87 
	`‰ì
(
h
->
key
);

88 
	`‰ì
(
h
->
d©a
);

89 
	`‰ì
(
h
);

90 
h
 = 
NULL
;

91  (
√xt
);

92 
	}
}

94 
hli°_ªmove
(
hashíåy
 **
roŸ
, *
key
,

95 (*
com∑ª
)(*,*))

97 
hashíåy
 *
pos
 ,*
¥ev
;

99 i‡(
NULL
 =*
roŸ
)  -1;

101 i‡(
	`com∑ª
((*
roŸ
)->
key
, key)) {

102 *
roŸ
 = 
	`hashíåy_‰ì
(*root);

106 
¥ev
 = *
roŸ
;

107 
pos
 = 
¥ev
->
√xt
; 
NULL
 !=Öos;Öos =Öos->next) {

108 i‡(
	`com∑ª
(
pos
->
key
, key)) {

109 
¥ev
->
√xt
 = 
	`hashíåy_‰ì
(
pos
);

112 
¥ev
 = 
pos
;

115 
	}
}

117 
hashèbÀ
 *
hash_¸óã
((*
keyfunc
)(*),

118 (*
com∑ªfunc
)(*, *),

119 
size
)

121 
Àn
 = (
hashíåy
 *Ë* 
size
;

122 
i
;

123 
hashèbÀ
 *
èb
 = 
	`mÆloc
( (hashtable) );

124 
	`mem£t
(
èb
, 0, (
hashèbÀ
));

125 
èb
->
hashli°
 = 
	`mÆloc
(
Àn
);

127 i‡(
èb
->
hashli°
 =
NULL
) {

128 
	`‰ì
(
èb
);

129  
NULL
;

132 
	`mem£t
(
èb
->
hashli°
, 0, 
Àn
 );

133 
i
 = 0; i < 
size
; i++)

134 
èb
->
hashli°
[
i
] = 
NULL
 ;

136 
èb
->
com∑ª
 = 
com∑ªfunc
;

137 
èb
->
gëhash
 = 
keyfunc
;

138 
èb
->
hashsize
 = 
size
;

139 
èb
->
cou¡
 = 0;

140  
èb
;

141 
	}
}

143 
	$hash_‰ì
(
hashèbÀ
 *
èb
)

145 
i
;

146 
hashíåy
 *
pos
;

148 
i
 = 0; i < 
èb
->
hashsize
; i++)

149 
pos
 = 
èb
->
hashli°
[
i
]; 
NULL
 !pos;Öo†
	`hashíåy_‰ì
(pos));

151 
	`‰ì
(
èb
->
hashli°
);

152 
	`‰ì
(
èb
);

153 
èb
 =
NULL
;

154 
	}
}

156 
	$hash_ö£π
(*
key
, *
d©a
, 
hashèbÀ
 *
èb
)

158 
ödex
 = 
	`hashödex
(
key
, 
èb
);

159 
hashíåy
 *
roŸ
 = 
èb
->
hashli°
[
ödex
];

161 i‡–
	`hli°_upd©e
(
roŸ
, 
key
, 
d©a
, 
èb
->
com∑ª
 ) != 0 ) {

162 
	`hli°_≠≥nd
(&(
èb
->
hashli°
[
ödex
]), 
key
, 
d©a
 );

163 
èb
->
cou¡
++;

165 
	}
}

	@test/system/hash.h

2 
	#¸óã_hashèbÀ
(
hsize
) \

3 
	`hash_¸óã
(
lh_°rhash
, 
equÆ_°r
, 
hsize
)

	)

5 
lh_°rhash
(*
§c
);

6 
equÆ_°r
(*
k1
, *
k2
);

8 
	ghashíåy
;

9 
	g_hashèbÀ
;

10 
_hashèbÀ
 
	thashèbÀ
;

13 
hashèbÀ
 *
hash_¸óã
((*
keyfunc
)(*),

14 (*
com∑ªfunc
)(*,*),

15 
size
);

16 
	`hash_‰ì
(
hashèbÀ
 *
èb
);

17 
	`hash_ö£π
(*
key
, *
d©a
, 
hashèbÀ
 *
èb
);

18 
	`hash_ªmove
(*
key
, 
hashèbÀ
 *
èb
);

19 *
	`hash_vÆue
(*
key
, 
hashèbÀ
 *
èb
);

20 
	`hash_f‹_óch_do
(
hashèbÀ
 *
èb
, (
cb
)(*, *));

21 
	`hash_cou¡
(
hashèbÀ
 *
èb
);

	@test/system/test.c

1 
	~"°dio.h
"

2 
	~"di˘.h
"

3 
	~"°rög.h
"

4 
	~"°dlib.h
"

11 
	$°rHash
(c⁄° *
key
)

13 *
°r
 = (*)
key
;

14  
	`di˘GíHashFun˘i⁄
((c⁄° *)
°r
,

15 
	`°æí
(
°r
));

16 
	}
}

18 
	$keyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
)

20 *
°r1
 = (*)
key1
;

21 *
°r2
 = (*)
key2
;

22  
	`°rcmp
(
°r1
, 
°r2
) == 0;

23 
	}
}

26 
	$keyDe°ru˘‹
(*
¥ivd©a
, *
key
)

28 
	`‰ì
(
key
);

29 
	}
}

30 
	$vÆDe°ru˘‹
(*
¥ivd©a
, *
vÆue
)

32 
	`‰ì
(
vÆue
);

33 
	}
}

34 
di˘Ty≥
 
	g°rTe°
 = {
°rHash
, 
NULL
, NULL, 
keyCom∑ª
,

35 
keyDe°ru˘‹
,
vÆDe°ru˘‹
};

37 
	$maö
()

40 
di˘
 *
hashm≠
 = 
	`di˘Cª©e
(&
°rTe°
, 
NULL
);

41 
i
;

42 
i
 = 0; i < 100; i++){

43 *
°r
 = (*)
	`mÆloc
(10);

44 *
vÆ
 = (*)
	`mÆloc
(10);

45 
ªm
 = 
i
 % 26;

46 
j
;

47 
j
 = 0; j < 10; j++){

48 
°r
[
j
] = 'a' + 
ªm
;

49 
vÆ
[
j
] = 'a' + 
ªm
;

51 
°r
[9] = 0;

52 
vÆ
[9] = 0;

53 if(
	`di˘Add
(
hashm≠
, 
°r
, 
vÆ
Ë=
DICT_ERR
){

55 
	`‰ì
(
°r
);

56 
	`‰ì
(
vÆ
);

59 
	`¥ötf
("ö£πed %s\n", 
°r
);

65 *
key1
= "aaaaaaaab";

66 
di˘E¡ry
 *
de
 = 
	`di˘Föd
(
hashm≠
, 
key1
);

67 if(!
de
){

68 
	`¥ötf
("ˇ¬Ÿ föd key %s\n", 
key1
);

72 
	`¥ötf
("föd vÆuê%s\n", (*)
	`di˘GëE¡ryVÆ
(
de
));

74 
	}
}

	@udpserver/log.c

14 
	~"log.h
"

17 
FILE
 *
	gÂ
 = 
NULL
;

18 *
	g«me
 = 
NULL
;

20 
›í_fûe
(*
«
);

23 
	$£t_log
(*
n
)

25 
ªt
 = 0;

26 if(
n
=
NULL
 || 
	`°æí
(n) == 0)

29 
«me
 = (*)
	`mÆloc
(
	`°æí
(
n
)+1);

30 if(
«me
 =
NULL
){

31 
	`¥ötf
("we haveÇotÉnough memory\n");

35 
	`°r˝y
(
«me
, 
n
);

37 
ªt
 = 
	`›í_fûe
(
«me
);

39 if(
ªt
 < 0){

40 
	`‰ì
(
«me
);

41 
Â
 = 
NULL
;

42 
«me
 = 
NULL
;

48 
	}
}

50 
	$˛o£_fûe
()

52 if(
Â
)

53  
	`f˛o£
(
Â
);

56 
	}
}

58 
	$›í_fûe
(*
«
)

60 
Â
 = 
	`f›í
(
«
, "a");

62 if(
Â
 =
NULL
){

63 
	`Ârötf
(
°dîr
, "openÜog failed\n");

68 
	}
}

74 
	$wrôe_fûe
(*
°r
)

76 if(
Â
 !
NULL
){

77 
	`Ârötf
(
Â
, "%s", 
°r
);

78 
	`fÊush
(
Â
);

83  
	`Ârötf
(
°dîr
, "%s", 
°r
);

86 
	}
}

88 
	$˛o£_log
()

90  
	`˛o£_fûe
();

91 
	}
}

92 
	$_log_wrôe
(*
fûe
, 
löe
, c⁄° *
fmt
,...)

94 
ªt
 = 0;

95 
buf„r
[1000];

96 
va_li°
 
≠
;

97 
time_t
 
cur_time
;

98 
tm
 
tm_now
;

99 
time°amp
[20];

105 
	`mem£t
(
buf„r
, 0, (buffer));

107 
	`mem£t
(
time°amp
, 0, (timestamp));

108 
	`time
(&
cur_time
);

109 
	`loˇ…ime_r
(&
cur_time
, &
tm_now
);

110 
	`°r·ime
(
time°amp
, 20, "%Y-%m-%d %H:%M:%S", &
tm_now
);

111 
	`•rötf
(
buf„r
, "%s: ", 
time°amp
);

112 
ªt
 = 
	`°æí
(
buf„r
);

113 
	`•rötf
(
buf„r
 + 
ªt
, "%s:%d ", 
fûe
, 
löe
);

115 
ªt
 = 
	`°æí
(
buf„r
);

116 
	`va_°¨t
(
≠
, 
fmt
);

117 
	`v•rötf
(
buf„r
 + 
ªt
, 
fmt
, 
≠
);

118 
	`va_íd
(
≠
);

120  
	`wrôe_fûe
(
buf„r
);

121 
	}
}

	@udpserver/log.h

1 #i‚de‡
_LOG_H_


2 
	#_LOG_H_


	)

3 
	~<°dio.h
>

4 
	~<°d¨g.h
>

5 
	~<°rög.h
>

6 
	~<time.h
>

7 
	~<°dlib.h
>

8 #ifdef 
__˝lu•lus


13 
˛o£_log
();

14 
£t_log
(*
«me
);

15 
_log_wrôe
(*
fûe
, 
löe
, c⁄° *
fmt
,...);

16 #ifde‡
DEBUG


17 
	#LOG_WRITE
(...Ë
	`_log_wrôe
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

19 
	#LOG_WRITE
(...)

	)

22 #ifde‡
__˝lu•lus


	@udpserver/server.c

1 
	~"udpsockë.h
"

2 
	~<evít.h
>

4 
	$maö
(
¨gc
, **
¨gv
)

6 
	`evít_öô
();

7 
	`sockë_öô
();

8 if(
¨gc
 != 2){

9 
	`¥ötf
("you mustáddressÅheÜistenÇode ");

11 
	`√w_udpsockë
(
¨gv
[1], 3000);

13 
	`evít_di•©ch
();

15 
	}
}

	@udpserver/slist.c

14 
	~"¶i°.h
"

17 
	$öôülize_queue
(
queue_t
 *
q
)

19 
q
->
hód
=q->
èû
=
NULL
;

20 #ifde‡ 
MUTEX


21 
	`±hªad_muãx_öô
(&(
q
->
muãx
), 
NULL
);

23 
	}
}

26 
node_t
 * 
	$gë_node
()

28 
node_t
 *
n
 = (node_t*Ë
	`mÆloc
((node_t));

30 if(!
n
){

31 
	`¥ötf
("out of memory\n");

32 
	`exô
(0);

35 
n
->
√xt
=
NULL
;

36  
n
;

37 
	}
}

41 
	$put_node
(
node_t
 *
p
)

44 
	`‰ì
(
p
);

45 
	}
}

49 
	$em±y
(
queue_t
 *
q
)

51  ( 
q
->
hód
==
NULL
 && q->
èû
==NULL);

52 
	}
}

55 
	$⁄ly_⁄e_node
(
queue_t
 *
q
)

57  
q
->
hód
!=
NULL
 && q->hód==q->
èû
;

58 
	}
}

60 
node_t
 * 
	$push_öto_queue
(
node_t
 * 
n
, 
queue_t
 *
q
)

62 #ifde‡ 
MUTEX


63 
	`±hªad_muãx_lock
(&(
q
->
muãx
));

66 if(
	`em±y
(
q
)){

67 
q
->
èû
=q->
hód
=
n
;

70 
q
->
èû
->
√xt
=
n
;

71 
q
->
èû
=
n
;

72 
n
->
√xt
=0;

75 #ifde‡ 
MUTEX


76 
	`±hªad_muãx_u∆ock
(&(
q
->
muãx
));

78  
n
;

79 
	}
}

82 
node_t
 * 
	$p›_‰om_queue
(
queue_t
 *
q
)

84 
node_t
 *
n
;

86 #ifde‡ 
MUTEX


87 
	`±hªad_muãx_lock
(&(
q
->
muãx
));

89 if(
	`em±y
(
q
)){

90 #ifde‡ 
MUTEX


91 
	`±hªad_muãx_u∆ock
(&(
q
->
muãx
));

93  
NULL
;

97 if(
	`⁄ly_⁄e_node
(
q
)){

98 
n
=
q
->
hód
;

99 
q
->
hód
=q->
èû
=
NULL
;

100 #ifde‡ 
MUTEX


101 
	`±hªad_muãx_u∆ock
(&(
q
->
muãx
));

103  
n
;

105 
n
=
q
->
hód
;

106 
q
->
hód
=
n
->
√xt
;

107 #ifde‡ 
MUTEX


108 
	`±hªad_muãx_u∆ock
(&(
q
->
muãx
));

110  
n
;

111 
	}
}

	@udpserver/slist.h

1 #i‚de‡
_SLIST_H_


2 
	#_SLIST_H_


	)

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<±hªad.h
>

6 
	~<evít.h
>

8 #ifdef 
__˝lu•lus


12 
	s__¶i°
{

13 
__¶i°
 *
√xt
;

14 
evít
 
e
;

15 }
	tnode_t
;

17 
	s__queue
{

18 
node_t
 *
hód
;

19 
node_t
 *
èû
;

20 #ifde‡ 
MUTEX


21 
±hªad_muãx_t
 
muãx
;

23 }
	tqueue_t
;

27 
node_t
 * 
gë_node
();

28 
öôülize_queue
(
queue_t
 *
q
);

29 
put_node
(
node_t
 *
p
);

30 
node_t
 * 
push_öto_queue
“ode_à* 
n
, 
queue_t
 *
q
);

31 
node_t
 * 
p›_‰om_queue
(
queue_t
 *
q
);

33 #ifde‡
__˝lu•lus


	@udpserver/udpsocket.c

14 
	~<uni°d.h
>

15 
	~<f˙é.h
>

16 
	~<√töë/ö.h
>

17 
	~<sys/sockë.h
>

18 
	~<°rög.h
>

19 
	~<√tdb.h
>

20 
	~<evít.h
>

21 
	~"¶i°.h
"

22 
	~"log.h
"

25 
queue_t
 
	gshód
;

26 
	$sockë_öô
()

28 
	`öôülize_queue
(&
shód
);

29  
	`£t_log
("log.txt");

30 
	}
}

31 
	$ªad_¥o˚ss
(
fd
, 
which
, *
¨g
)

33 
buff
[200];

34 
ªt
;

35 
sockaddr
 
ªque°
;

36 
sockÀn_t
 
ªque°_size
;

38 
	`mem£t
(
buff
, 0, (buff));

39 
ªt
 = 
	`ªcv‰om
(
fd
, 
buff
, (buff),

40 0, &
ªque°
, &
ªque°_size
);

41 
	`¥ötf
("here\n");

42 if(
ªt
 > 0){

43 
	`¥ötf
("%s\n", 
buff
);

44 
	`LOG_WRITE
("%s\n", 
buff
);

47 
	}
}

49 
	#MAX_SENDBUF_SIZE
 1024*1024*256

	)

53 
	$maximize_¢dbuf
(c⁄° 
sfd
)

55 
sockÀn_t
 
ötsize
 = ();

56 
œ°_good
 = 0;

57 
mö
, 
max
, 
avg
;

58 
ﬁd_size
;

61 i‡(
	`gësock›t
(
sfd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
ﬁd_size
, &
ötsize
) != 0) {

62 
	`LOG_WRITE
("get buff sizeÉrror\n");

67 
mö
 = 
ﬁd_size
;

68 
max
 = 
MAX_SENDBUF_SIZE
;

70 
mö
 <
max
) {

71 
avg
 = (()(
mö
 + 
max
)) / 2;

72 i‡(
	`£tsock›t
(
sfd
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*)&
avg
, 
ötsize
) == 0) {

73 
œ°_good
 = 
avg
;

74 
mö
 = 
avg
 + 1;

76 
max
 = 
avg
 - 1;

80 
	`LOG_WRITE
("buf‡sizêi†%d\n", 
œ°_good
);

81 
	}
}

84 
	$√w_sockë
(
addröfo
 *
ai
)

86 
sfd
;

87 
Êags
;

89 i‡((
sfd
 = 
	`sockë
(
ai
->
ai_Ámûy
,ái->
ai_sockty≥
,

90 
ai
->
ai_¥Ÿocﬁ
)) == -1) {

91 
	`≥º‹
("socket()");

95 i‡((
Êags
 = 
	`f˙é
(
sfd
, 
F_GETFL
, 0)) < 0 ||

96 
	`f˙é
(
sfd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0) {

97 
	`≥º‹
("setting O_NONBLOCK");

98 
	`˛o£
(
sfd
);

101  
sfd
;

102 
	}
}

105 
	$√w_udpsockë
(*
node
, 
p‹t
)

107 
addröfo
 *
ai
;

108 
addröfo
 *
√xt
;

109 
addröfo
 
höts
;

110 
p‹t_buf
[10];

111 
Êag
 = 1, 
îr‹
;

112 
suc˚ss
 = 0;

114 
	`mem£t
(&
höts
, 0, (hints));

116 
höts
.
ai_Êags
 = 
AI_PASSIVE
|
AI_ADDRCONFIG
;

117 
höts
.
ai_¥Ÿocﬁ
 = 
IPPROTO_UDP
;

118 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

119 
höts
.
ai_Ámûy
 = 
AF_INET
;

122 
	`¢¥ötf
(
p‹t_buf
, ’‹t_buf), "%d", 
p‹t
);

124 
îr‹

	`gëaddröfo
(
node
, 
p‹t_buf
, &
höts
, &
ai
);

126 if(
îr‹
 != 0){

127 
	`LOG_WRITE
("getáddressÉrror\n");

131 
√xt
 = 
ai
;Çext;Çexà√xt->
ai_√xt
){

133 
fd
;

134 if((
fd
 = 
	`√w_sockë
(
ai
)) < 0){

135 
	`¥ötf
("new sockeÉrror\n");

136 
	`‰ìaddröfo
(
ai
);

141 if(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
Êag
,

142 (
Êag
)) < 0){

143 
	`LOG_WRITE
("setsockoptÉrror\n");

144 
	`‰ìaddröfo
(
ai
);

145 
	`˛o£
(
fd
);

149 i‡(
	`böd
(
fd
, 
√xt
->
ai_addr
,Çext->
ai_addæí
) == -1) {

150 
	`LOG_WRITE
("bindÉrror\n");

152 
	`˛o£
(
fd
);

155 
	`maximize_¢dbuf
(
fd
);

157 
node_t
 *
n
 = 
	`gë_node
();

158 if(
n
 =
NULL
){

159 
	`LOG_WRITE
("notÉnough memory\n");

160 
	`‰ìaddröfo
(
ai
);

161 
	`˛o£
(
fd
);

165 
	`mem£t
(&
n
->
e
, 0, (n->e));

166 
	`evít_£t
(&
n
->
e
, 
fd
, 
EV_READ
 | 
EV_PERSIST
, 
ªad_¥o˚ss
,

167 (*)
n
);

169 if(
	`evít_add
(&
n
->
e
, 0) < 0){

170 
	`LOG_WRITE
("cannotáddÉvent\n");

171 
	`‰ì
(
n
);

172 
	`˛o£
(
fd
);

176 
	`push_öto_queue
(
n
, &
shód
);

177 
suc˚ss
++;

179 
	`‰ìaddröfo
(
ai
);

180  
suc˚ss
 > 0 ? 0 : -1;

182 
	}
}

	@udpserver/udpsocket.h

1 #i‚de‡
_UDPSOCKET_H_


2 
	#_UDPSOCKET_H_


	)

3 #ifdef 
__˝lu•lus


7 
sockë_öô
();

8 
√w_udpsockë
(*
node
, 
p‹t
);

10 #ifde‡
__˝lu•lus


	@utils/auxilFile.c

1 
	~"auxûFûe.h
"

2 
	~"£rülize.h
"

3 
	~"°dio.h
"

7 
	$›íFûe
(*
fûeName
, *
mode
, 
buf„rSize
,

8 
fûeAb°ø˘
 **
Á
)

10 *
buf„r
 = 
NULL
;

11 
FILE
 *
Â
 = 
NULL
;

12 
fûeAb°ø˘
 *
fûe
 = 
NULL
;

13 if(!
fûeName
 || !
Á
)  -1;

15 if(!(
Â
 = 
	`f›í
(
fûeName
,
mode
))){

19 if(!(
buf„r
 = (*)
	`mÆloc
(
buf„rSize
))){

20 
	`f˛o£
(
Â
);

24 if(!(
fûe
 = (
fûeAb°ø˘
 *)
	`mÆloc
((fileAbstract)))){

25 
	`‰ì
(
buf„r
);

26 
	`f˛o£
(
Â
);

30 
	`£tbuf„r
(
Â
, 
buf„r
, 
buf„rSize
);

32 
fûe
->
fûeName
 = 
	`°rdup
(fileName);

33 
fûe
->
Â
 = fp;

34 
fûe
->
buff
 = 
buf„r
;

35 
fûe
->
buffSize
 = 
buf„rSize
;

36 *
Á
 = 
fûe
;

38 
	}
}

41 
	$›íRódFûe
(*
fûeName
, 
buf„rSize
, 
fûeAb°ø˘
 **
Á
)

43  
	`›íFûe
(
fûeName
, "rb", 
buf„rSize
, 
Á
);

44 
	}
}

45 
	$›íWrôeFûe
(*
fûeName
, 
buf„rSize
, 
fûeAb°ø˘
 **
Á
)

47  
	`›íFûe
(
fûeName
, "wb", 
buf„rSize
, 
Á
);

48 
	}
}

49 
	$‰ìHópFûe
(
fûeAb°ø˘
 *
Á
)

51 if(!
Á
)  -1;

54 if(
Á
->
Â
Ë
	`f˛o£
(fa->fp);

55 if(
Á
->
buff
Ë
	`‰ì
(fa->buff);

56 if(
Á
->
fûeName
Ë
	`‰ì
(fa->fileName);

58 
	`‰ì
(
Á
);

60 
	}
}

61 
	$f£ekToPos
(
fûeAb°ø˘
 *
Á
, 
off_t
 
pos
)

63 if(!
Á
 || !Á->
Â
)  -1;

65  
	`f£ek
(
Á
->
Â
, 
pos
, 
SEEK_SET
);

66 
	}
}

69 
	$wrôeAµídFûe
(
fûeAb°ø˘
 *
Á
, 
buf„r
 *
buff
)

71 
buffSZ
[4] = {0};

72 
i
;

74 if(!
Á
 || !Á->
Â
 || !
buff
)  -1;

75 if(
buff
->buf‡=
NULL
)  -1;

77 
i
 = 0; i < 4; i++){

78 
buffSZ
[
i
] = 
	`GET_BYTE
(
buff
->
pos
, i);

81 if(
	`fwrôe
(
buffSZ
, 4, 1, 
Á
->
Â
) != 1){

84 if(
	`fwrôe
(
buff
->buff, buff->
pos
, 1, 
Á
->
Â
) != 1)

87 
	}
}

91 
	$ªadFûe
(
fûeAb°ø˘
 *
Á
, 
buf„r
 *
buff
)

93 
buffSZ
[4] = {0};

94 
ªadByãs
 = 0;

95 
ªt
 = 0, 
i
;

97 if(!
Á
 || !Á->
Â
 || !
buff
)  -1;

99 
ªt
 = 
	`‰ód
(
buffSZ
, 4, 1, 
Á
->
Â
);

101 if(
ªt
 != 1){

104 
i
 = 0; i < 4; i++){

105 
ªadByãs
 +
	`PUT_BYTE
(
buffSZ
[
i
], i);

108 if(
	`ª£rve
(
buff
, 
ªadByãs
) < 0)  -1;

109 if(
	`‰ód
(
buff
->buf‡+ buff->
pos
, 
ªadByãs
, 1, 
Á
->
Â
)

112 
buff
->
pos
 +
ªadByãs
;

114 
	}
}

116 
	$synFûe
(
fûeAb°ø˘
 *
Á
)

118 if(!
Á
 || !Á->
Â
)  -1;

120  
	`fÊush
(
Á
->
Â
);

121 
	}
}

123 
	$gëCurFûePos
(
fûeAb°ø˘
 *
Á
)

125 if(!
Á
 || !Á->
Â
){

126 
	`LOG_WRITE
("argÉrror\n");

130  
	`·ñl
(
Á
->
Â
);

131 
	}
}

132 
	$ídOfFûe
(
fûeAb°ø˘
 *
Á
)

134 if(!
Á
 || !Á->
Â
)

136  
	`„of
(
Á
->
Â
);

137 
	}
}

138 
	$›íRódîFûeFromExi°
(
fûeAb°ø˘
 *
Á
, 
buffSize
,

139 
fûeAb°ø˘
 **
ªadî
)

141 if(!
Á
 || !Á->
fûeName
 || !
ªadî
)

143  
	`›íRódFûe
(
Á
->
fûeName
, 
buffSize
, 
ªadî
);

144 
	}
}

	@utils/auxilFile.h

1 #i‚de‡
_AUXILFILE_H_


2 
	#_AUXILFILE_H_


	)

3 
	~"buf„r.h
"

6 
	sfûeAb°ø˘
{

7 *
	mfûeName
;

8 
FILE
 *
	mÂ
;

9 *
	mbuff
;

10 
	mbuffSize
;

11 }
	tfûeAb°ø˘
;

13 
›íRódFûe
(*
fûeName
, 
buf„rSize
, 
fûeAb°ø˘
 **
Á
);

14 
›íWrôeFûe
(*
fûeName
, 
buf„rSize
, 
fûeAb°ø˘
 **
Á
);

15 
‰ìHópFûe
(
fûeAb°ø˘
 *
Á
);

16 
f£ekToPos
(
fûeAb°ø˘
 *
Á
, 
off_t
 
pos
);

18 
wrôeAµídFûe
(
fûeAb°ø˘
 *
Á
, 
buf„r
 *
buff
);

20 
ªadFûe
(
fûeAb°ø˘
 *
Á
, 
buf„r
 *
buff
);

21 
synFûe
(
fûeAb°ø˘
 *
Á
);

23 
gëCurFûePos
(
fûeAb°ø˘
 *
Á
);

24 
ídOfFûe
(
fûeAb°ø˘
 *
Á
);

25 
›íRódîFûeFromExi°
(
fûeAb°ø˘
 *
Á
, 
buffSize
,

26 
fûeAb°ø˘
 **
ªadî
);

	@utils/crc32.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~"¸c32.h
"

25 
u_öt32_t
 
	g¸c_èb
[256];

32 
u_öt32_t
 
	$chksum_¸c32
 (*
block
, 
Àngth
)

34 
¸c
;

35 
i
;

37 
¸c
 = 0xFFFFFFFF;

38 
i
 = 0; i < 
Àngth
; i++)

40 
¸c
 = ((¸¯>> 8Ë& 0x00FFFFFFË^ 
¸c_èb
[(¸¯^ *
block
++) & 0xFF];

42  (
¸c
 ^ 0xFFFFFFFF);

43 
	}
}

50 
	$chksum_¸c32gíèb
 ()

52 
¸c
, 
pﬁy
;

53 
i
, 
j
;

55 
pﬁy
 = 0xEDB88320L;

56 
i
 = 0; i < 256; i++)

58 
¸c
 = 
i
;

59 
j
 = 8; j > 0; j--)

61 i‡(
¸c
 & 1)

63 
¸c
 = (¸¯>> 1Ë^ 
pﬁy
;

67 
¸c
 >>= 1;

70 
¸c_èb
[
i
] = 
¸c
;

72 
	}
}

74 
	$gëCRC32
(
buf„r
 *
buff
, *
¸c
)

76 
ªt
 = 0;

77 if(!
buff
 || !
¸c
)  -1;

78 if(
buff
->buf‡=
NULL
)  -1;

80 
ªt
 = 
	`chksum_¸c32
((*)
buff
->buff,

81 
buff
->
pos
);

82 *
¸c
 = 
ªt
;

84 
	}
}

	@utils/crc32.h

16 
	~"buf„r.h
"

18 
chksum_¸c32gíèb
 ();

19 
u_öt32_t
 
chksum_¸c32
 (*
block
, 
Àngth
);

20 
u_öt32_t
 
¸c_èb
[256];

22 
gëCRC32
(
buf„r
 *
buff
, *
¸c
);

	@utils/dict.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<°d¨g.h
>

6 
	~<as£π.h
>

7 
	~<limôs.h
>

8 
	~<sys/time.h
>

9 
	~<˘y≥.h
>

11 
	~"di˘.h
"

21 
	gdi˘_ˇn_ªsize
 = 1;

22 
	gdi˘_f‹˚_ªsize_øtio
 = 5;

26 
_di˘Ex∑ndIfNìded
(
di˘
 *
ht
);

27 
_di˘NextPowî
(
size
);

28 
_di˘KeyIndex
(
di˘
 *
ht
, c⁄° *
key
);

29 
_di˘Inô
(
di˘
 *
ht
, 
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
);

34 
	$di˘I¡HashFun˘i⁄
(
key
)

36 
key
 += ~(key << 15);

37 
key
 ^= (key >> 10);

38 
key
 += (key << 3);

39 
key
 ^= (key >> 6);

40 
key
 += ~(key << 11);

41 
key
 ^= (key >> 16);

42  
key
;

43 
	}
}

46 
	$di˘IdítôyHashFun˘i⁄
(
key
)

48  
key
;

49 
	}
}

53 
	$di˘GíHashFun˘i⁄
(c⁄° *
buf
, 
Àn
) {

54 
hash
 = 5381;

56 
Àn
--)

57 
hash
 = ((hash << 5Ë+ hashË+ (*
buf
++);

58  
hash
;

59 
	}
}

62 
	$di˘GíCa£HashFun˘i⁄
(c⁄° *
buf
, 
Àn
) {

63 
hash
 = 5381;

65 
Àn
--)

66 
hash
 = ((hash << 5Ë+ hashË+ (
	`tﬁowî
(*
buf
++));

67  
hash
;

68 
	}
}

74 
	$_di˘Re£t
(
di˘ht
 *
ht
)

76 
ht
->
èbÀ
 = 
NULL
;

77 
ht
->
size
 = 0;

78 
ht
->
sizemask
 = 0;

79 
ht
->
u£d
 = 0;

80 
	}
}

83 
di˘
 *
	$di˘Cª©e
(
di˘Ty≥
 *
ty≥
,

84 *
¥ivD©aPå
)

86 
di˘
 *
d
 = 
	`mÆloc
((*d));

88 
	`_di˘Inô
(
d
,
ty≥
,
¥ivD©aPå
);

89  
d
;

90 
	}
}

93 
	$_di˘Inô
(
di˘
 *
d
, 
di˘Ty≥
 *
ty≥
,

94 *
¥ivD©aPå
)

96 
	`_di˘Re£t
(&
d
->
ht
[0]);

97 
	`_di˘Re£t
(&
d
->
ht
[1]);

98 
d
->
ty≥
 =Åype;

99 
d
->
¥ivd©a
 = 
¥ivD©aPå
;

100 
d
->
ªhashidx
 = -1;

101 
d
->
ôî©‹s
 = 0;

102  
DICT_OK
;

103 
	}
}

107 
	$di˘Resize
(
di˘
 *
d
)

109 
möimÆ
;

111 i‡(!
di˘_ˇn_ªsize
 || 
	`di˘IsRehashög
(
d
)Ë 
DICT_ERR
;

112 
möimÆ
 = 
d
->
ht
[0].
u£d
;

113 i‡(
möimÆ
 < 
DICT_HT_INITIAL_SIZE
)

114 
möimÆ
 = 
DICT_HT_INITIAL_SIZE
;

115  
	`di˘Ex∑nd
(
d
, 
möimÆ
);

116 
	}
}

119 
	$di˘Ex∑nd
(
di˘
 *
d
, 
size
)

121 
di˘ht
 
n
;

122 
ªÆsize
 = 
	`_di˘NextPowî
(
size
);

126 i‡(
	`di˘IsRehashög
(
d
Ë|| d->
ht
[0].
u£d
 > 
size
)

127  
DICT_ERR
;

130 
n
.
size
 = 
ªÆsize
;

131 
n
.
sizemask
 = 
ªÆsize
-1;

132 
n
.
èbÀ
 = 
	`ˇŒoc
((
di˘E¡ry
*), 
ªÆsize
);

133 
n
.
u£d
 = 0;

137 i‡(
d
->
ht
[0].
èbÀ
 =
NULL
) {

138 
d
->
ht
[0] = 
n
;

139  
DICT_OK
;

143 
d
->
ht
[1] = 
n
;

144 
d
->
ªhashidx
 = 0;

145  
DICT_OK
;

146 
	}
}

152 
	$di˘Rehash
(
di˘
 *
d
, 
n
) {

153 i‡(!
	`di˘IsRehashög
(
d
))  0;

155 
n
--) {

156 
di˘E¡ry
 *
de
, *
√xtde
;

159 i‡(
d
->
ht
[0].
u£d
 == 0) {

160 
	`‰ì
(
d
->
ht
[0].
èbÀ
);

161 
d
->
ht
[0] = d->ht[1];

162 
	`_di˘Re£t
(&
d
->
ht
[1]);

163 
d
->
ªhashidx
 = -1;

169 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
] =
NULL
) d->rehashidx++;

170 
de
 = 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
];

172 
de
) {

173 
h
;

175 
√xtde
 = 
de
->
√xt
;

177 
h
 = 
	`di˘HashKey
(
d
, 
de
->
key
Ë& d->
ht
[1].
sizemask
;

178 
de
->
√xt
 = 
d
->
ht
[1].
èbÀ
[
h
];

179 
d
->
ht
[1].
èbÀ
[
h
] = 
de
;

180 
d
->
ht
[0].
u£d
--;

181 
d
->
ht
[1].
u£d
++;

182 
de
 = 
√xtde
;

184 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
] = 
NULL
;

185 
d
->
ªhashidx
++;

188 
	}
}

190 
	$timeInMûli£c⁄ds
() {

191 
timevÆ
 
tv
;

193 
	`gëtimeofday
(&
tv
,
NULL
);

194  ((()
tv
.
tv_£c
)*1000)+—v.
tv_u£c
/1000);

195 
	}
}

198 
	$di˘RehashMûli£c⁄ds
(
di˘
 *
d
, 
ms
) {

199 
°¨t
 = 
	`timeInMûli£c⁄ds
();

200 
ªhashes
 = 0;

202 
	`di˘Rehash
(
d
,100)) {

203 
ªhashes
 += 100;

204 i‡(
	`timeInMûli£c⁄ds
()-
°¨t
 > 
ms
) ;

206  
ªhashes
;

207 
	}
}

217 
	$_di˘RehashSãp
(
di˘
 *
d
) {

218 i‡(
d
->
ôî©‹s
 =0Ë
	`di˘Rehash
(d,1);

219 
	}
}

222 
	$di˘Add
(
di˘
 *
d
, *
key
, *
vÆ
)

224 
ödex
;

225 
di˘E¡ry
 *
íåy
;

226 
di˘ht
 *
ht
;

228 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

232 i‡((
ödex
 = 
	`_di˘KeyIndex
(
d
, 
key
)) == -1)

233  
DICT_ERR
;

236 
ht
 = 
	`di˘IsRehashög
(
d
) ? &d->ht[1] : &d->ht[0];

237 
íåy
 = 
	`mÆloc
((*entry));

238 
íåy
->
√xt
 = 
ht
->
èbÀ
[
ödex
];

239 
ht
->
èbÀ
[
ödex
] = 
íåy
;

240 
ht
->
u£d
++;

243 
	`di˘SëHashKey
(
d
, 
íåy
, 
key
);

244 
	`di˘SëHashVÆ
(
d
, 
íåy
, 
vÆ
);

245  
DICT_OK
;

246 
	}
}

252 
	$di˘Rïœ˚
(
di˘
 *
d
, *
key
, *
vÆ
)

254 
di˘E¡ry
 *
íåy
, 
auxíåy
;

258 i‡(
	`di˘Add
(
d
, 
key
, 
vÆ
Ë=
DICT_OK
)

261 
íåy
 = 
	`di˘Föd
(
d
, 
key
);

268 
auxíåy
 = *
íåy
;

269 
	`di˘SëHashVÆ
(
d
, 
íåy
, 
vÆ
);

270 
	`di˘FªeE¡ryVÆ
(
d
, &
auxíåy
);

272 
	}
}

275 
	$di˘GíîicDñëe
(
di˘
 *
d
, c⁄° *
key
, 
no‰ì
)

277 
h
, 
idx
;

278 
di˘E¡ry
 *
he
, *
¥evHe
;

279 
èbÀ
;

281 i‡(
d
->
ht
[0].
size
 =0Ë 
DICT_ERR
;

282 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

283 
h
 = 
	`di˘HashKey
(
d
, 
key
);

285 
èbÀ
 = 0;Åable <= 1;Åable++) {

286 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

287 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

288 
¥evHe
 = 
NULL
;

289 
he
) {

290 i‡(
	`di˘Com∑ªHashKeys
(
d
, 
key
, 
he
->key)) {

292 i‡(
¥evHe
)

293 
¥evHe
->
√xt
 = 
he
->next;

295 
d
->
ht
[
èbÀ
].èbÀ[
idx
] = 
he
->
√xt
;

296 i‡(!
no‰ì
) {

297 
	`di˘FªeE¡ryKey
(
d
, 
he
);

298 
	`di˘FªeE¡ryVÆ
(
d
, 
he
);

300 
	`‰ì
(
he
);

301 
d
->
ht
[
èbÀ
].
u£d
--;

302  
DICT_OK
;

304 
¥evHe
 = 
he
;

305 
he
 = he->
√xt
;

307 i‡(!
	`di˘IsRehashög
(
d
)) ;

309  
DICT_ERR
;

310 
	}
}

312 
	$di˘Dñëe
(
di˘
 *
ht
, c⁄° *
key
) {

313  
	`di˘GíîicDñëe
(
ht
,
key
,0);

314 
	}
}

316 
	$di˘DñëeNoFªe
(
di˘
 *
ht
, c⁄° *
key
) {

317  
	`di˘GíîicDñëe
(
ht
,
key
,1);

318 
	}
}

321 
	$_di˘CÀ¨
(
di˘
 *
d
, 
di˘ht
 *
ht
)

323 
i
;

326 
i
 = 0; i < 
ht
->
size
 && ht->
u£d
 > 0; i++) {

327 
di˘E¡ry
 *
he
, *
√xtHe
;

329 i‡((
he
 = 
ht
->
èbÀ
[
i
]Ë=
NULL
) ;

330 
he
) {

331 
√xtHe
 = 
he
->
√xt
;

332 
	`di˘FªeE¡ryKey
(
d
, 
he
);

333 
	`di˘FªeE¡ryVÆ
(
d
, 
he
);

334 
	`‰ì
(
he
);

335 
ht
->
u£d
--;

336 
he
 = 
√xtHe
;

340 
	`‰ì
(
ht
->
èbÀ
);

342 
	`_di˘Re£t
(
ht
);

343  
DICT_OK
;

344 
	}
}

347 
	$di˘Rñó£
(
di˘
 *
d
)

349 
	`_di˘CÀ¨
(
d
,&d->
ht
[0]);

350 
	`_di˘CÀ¨
(
d
,&d->
ht
[1]);

351 
	`‰ì
(
d
);

352 
	}
}

354 
di˘E¡ry
 *
	$di˘Föd
(
di˘
 *
d
, c⁄° *
key
)

356 
di˘E¡ry
 *
he
;

357 
h
, 
idx
, 
èbÀ
;

359 i‡(
d
->
ht
[0].
size
 =0Ë 
NULL
;

360 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

361 
h
 = 
	`di˘HashKey
(
d
, 
key
);

362 
èbÀ
 = 0;Åable <= 1;Åable++) {

363 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

364 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

365 
he
) {

366 i‡(
	`di˘Com∑ªHashKeys
(
d
, 
key
, 
he
->key))

367  
he
;

368 
he
 = he->
√xt
;

370 i‡(!
	`di˘IsRehashög
(
d
)Ë 
NULL
;

372  
NULL
;

373 
	}
}

375 *
	$di˘FëchVÆue
(
di˘
 *
d
, c⁄° *
key
) {

376 
di˘E¡ry
 *
he
;

378 
he
 = 
	`di˘Föd
(
d
,
key
);

379  
he
 ? 
	`di˘GëE¡ryVÆ
(heË: 
NULL
;

380 
	}
}

382 
di˘Iãøt‹
 *
	$di˘GëIãøt‹
(
di˘
 *
d
)

384 
di˘Iãøt‹
 *
ôî
 = 
	`mÆloc
((*iter));

386 
ôî
->
d
 = d;

387 
ôî
->
èbÀ
 = 0;

388 
ôî
->
ödex
 = -1;

389 
ôî
->
ß„
 = 0;

390 
ôî
->
íåy
 = 
NULL
;

391 
ôî
->
√xtE¡ry
 = 
NULL
;

392  
ôî
;

393 
	}
}

395 
di˘Iãøt‹
 *
	$di˘GëSa„Iãøt‹
(
di˘
 *
d
) {

396 
di˘Iãøt‹
 *
i
 = 
	`di˘GëIãøt‹
(
d
);

398 
i
->
ß„
 = 1;

399  
i
;

400 
	}
}

402 
di˘E¡ry
 *
	$di˘Next
(
di˘Iãøt‹
 *
ôî
)

405 i‡(
ôî
->
íåy
 =
NULL
) {

406 
di˘ht
 *
ht
 = &
ôî
->
d
->ht[ôî->
èbÀ
];

407 i‡(
ôî
->
ß„
 && iãr->
ödex
 =-1 && iãr->
èbÀ
 == 0)

408 
ôî
->
d
->
ôî©‹s
++;

409 
ôî
->
ödex
++;

410 i‡(
ôî
->
ödex
 >(sig√dË
ht
->
size
) {

411 i‡(
	`di˘IsRehashög
(
ôî
->
d
Ë&& iãr->
èbÀ
 == 0) {

412 
ôî
->
èbÀ
++;

413 
ôî
->
ödex
 = 0;

414 
ht
 = &
ôî
->
d
->ht[1];

419 
ôî
->
íåy
 = 
ht
->
èbÀ
[ôî->
ödex
];

421 
ôî
->
íåy
 = iãr->
√xtE¡ry
;

423 i‡(
ôî
->
íåy
) {

426 
ôî
->
√xtE¡ry
 = iãr->
íåy
->
√xt
;

427  
ôî
->
íåy
;

430  
NULL
;

431 
	}
}

433 
	$di˘Rñó£Iãøt‹
(
di˘Iãøt‹
 *
ôî
)

435 i‡(
ôî
->
ß„
 && !(ôî->
ödex
 =-1 && iãr->
èbÀ
 == 0))

436 
ôî
->
d
->
ôî©‹s
--;

437 
	`‰ì
(
ôî
);

438 
	}
}

442 
di˘E¡ry
 *
	$di˘GëR™domKey
(
di˘
 *
d
)

444 
di˘E¡ry
 *
he
, *
‹ighe
;

445 
h
;

446 
li°Àn
, 
li°ñe
;

448 i‡(
	`di˘Size
(
d
Ë=0Ë 
NULL
;

449 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

450 i‡(
	`di˘IsRehashög
(
d
)) {

452 
h
 = 
	`øndom
(Ë% (
d
->
ht
[0].
size
+d->ht[1].size);

453 
he
 = (
h
 >
d
->
ht
[0].
size
Ë? d->ht[1].
èbÀ
[h - d->ht[0].size] :

454 
d
->
ht
[0].
èbÀ
[
h
];

455 } 
he
 =
NULL
);

458 
h
 = 
	`øndom
(Ë& 
d
->
ht
[0].
sizemask
;

459 
he
 = 
d
->
ht
[0].
èbÀ
[
h
];

460 } 
he
 =
NULL
);

467 
li°Àn
 = 0;

468 
‹ighe
 = 
he
;

469 
he
) {

470 
he
 = he->
√xt
;

471 
li°Àn
++;

473 
li°ñe
 = 
	`øndom
(Ë% 
li°Àn
;

474 
he
 = 
‹ighe
;

475 
li°ñe
--Ë
he
 = he->
√xt
;

476  
he
;

477 
	}
}

482 
	$_di˘Ex∑ndIfNìded
(
di˘
 *
d
)

485 i‡(
	`di˘IsRehashög
(
d
)Ë 
DICT_OK
;

488 i‡(
d
->
ht
[0].
size
 =0Ë 
	`di˘Ex∑nd
(d, 
DICT_HT_INITIAL_SIZE
);

494 i‡(
d
->
ht
[0].
u£d
 >d->ht[0].
size
 &&

495 (
di˘_ˇn_ªsize
 ||

496 
d
->
ht
[0].
u£d
/d->ht[0].
size
 > 
di˘_f‹˚_ªsize_øtio
))

498  
	`di˘Ex∑nd
(
d
, ((d->
ht
[0].
size
 > d->ht[0].
u£d
) ?

499 
d
->
ht
[0].
size
 : d->ht[0].
u£d
)*2);

501  
DICT_OK
;

502 
	}
}

505 
	$_di˘NextPowî
(
size
)

507 
i
 = 
DICT_HT_INITIAL_SIZE
;

509 i‡(
size
 >
LONG_MAX
)  LONG_MAX;

511 i‡(
i
 >
size
)

512  
i
;

513 
i
 *= 2;

515 
	}
}

523 
	$_di˘KeyIndex
(
di˘
 *
d
, c⁄° *
key
)

525 
h
, 
idx
, 
èbÀ
;

526 
di˘E¡ry
 *
he
;

529 i‡(
	`_di˘Ex∑ndIfNìded
(
d
Ë=
DICT_ERR
)

532 
h
 = 
	`di˘HashKey
(
d
, 
key
);

533 
èbÀ
 = 0;Åable <= 1;Åable++) {

534 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

536 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

537 
he
) {

538 i‡(
	`di˘Com∑ªHashKeys
(
d
, 
key
, 
he
->key))

540 
he
 = he->
√xt
;

542 i‡(!
	`di˘IsRehashög
(
d
)) ;

544  
idx
;

545 
	}
}

547 
	$di˘Em±y
(
di˘
 *
d
) {

548 
	`_di˘CÀ¨
(
d
,&d->
ht
[0]);

549 
	`_di˘CÀ¨
(
d
,&d->
ht
[1]);

550 
d
->
ªhashidx
 = -1;

551 
d
->
ôî©‹s
 = 0;

552 
	}
}

554 
	#DICT_STATS_VECTLEN
 50

	)

555 
	$_di˘PrötSètsHt
(
di˘ht
 *
ht
) {

556 
i
, 
¶Ÿs
 = 0, 
chaöÀn
, 
maxchaöÀn
 = 0;

557 
tŸchaöÀn
 = 0;

558 
˛ve˘‹
[
DICT_STATS_VECTLEN
];

560 i‡(
ht
->
u£d
 == 0) {

561 
	`¥ötf
("No statsávailable forÉmpty dictionaries\n");

565 
i
 = 0; i < 
DICT_STATS_VECTLEN
; i++Ë
˛ve˘‹
[i] = 0;

566 
i
 = 0; i < 
ht
->
size
; i++) {

567 
di˘E¡ry
 *
he
;

569 i‡(
ht
->
èbÀ
[
i
] =
NULL
) {

570 
˛ve˘‹
[0]++;

573 
¶Ÿs
++;

575 
chaöÀn
 = 0;

576 
he
 = 
ht
->
èbÀ
[
i
];

577 
he
) {

578 
chaöÀn
++;

579 
he
 = he->
√xt
;

581 
˛ve˘‹
[(
chaöÀn
 < 
DICT_STATS_VECTLEN
) ? chainlen : (DICT_STATS_VECTLEN-1)]++;

582 i‡(
chaöÀn
 > 
maxchaöÀn
) maxchainlen = chainlen;

583 
tŸchaöÀn
 +
chaöÀn
;

585 
	`¥ötf
("HashÅable stats:\n");

586 
	`¥ötf
("ÅabÀ size: %ld\n", 
ht
->
size
);

587 
	`¥ötf
("Çumbî o‡ñemíts: %ld\n", 
ht
->
u£d
);

588 
	`¥ötf
(" dif„ª¡ slŸs: %ld\n", 
¶Ÿs
);

589 
	`¥ötf
(" max chaöÜígth: %ld\n", 
maxchaöÀn
);

590 
	`¥ötf
("ávg chaöÜígth (cou¡ed): %.02f\n", ()
tŸchaöÀn
/
¶Ÿs
);

591 
	`¥ötf
("ávg chaöÜígth (compuãd): %.02f\n", ()
ht
->
u£d
/
¶Ÿs
);

592 
	`¥ötf
(" ChainÜength distribution:\n");

593 
i
 = 0; i < 
DICT_STATS_VECTLEN
-1; i++) {

594 i‡(
˛ve˘‹
[
i
] == 0) ;

595 
	`¥ötf
(" %s%ld: %ld (%.02f%%)\n",(
i
 =
DICT_STATS_VECTLEN
-1)?">":"", i, 
˛ve˘‹
[i], (()˛ve˘‹[i]/
ht
->
size
)*100);

597 
	}
}

599 
	$di˘PrötSèts
(
di˘
 *
d
) {

600 
	`_di˘PrötSètsHt
(&
d
->
ht
[0]);

601 i‡(
	`di˘IsRehashög
(
d
)) {

602 
	`¥ötf
("-- Rehashing into ht[1]:\n");

603 
	`_di˘PrötSètsHt
(&
d
->
ht
[1]);

605 
	}
}

607 
	$di˘E«bÀResize
() {

608 
di˘_ˇn_ªsize
 = 1;

609 
	}
}

611 
	$di˘DißbÀResize
() {

612 
di˘_ˇn_ªsize
 = 0;

613 
	}
}

623 
	$_di˘SåögC›yHTHashFun˘i⁄
(c⁄° *
key
)

625  
	`di˘GíHashFun˘i⁄
(
key
, 
	`°æí
(key));

626 
	}
}

628 *
	$_di˘SåögDup
(*
¥ivd©a
, c⁄° *
key
)

630 
Àn
 = 
	`°æí
(
key
);

631 *
c›y
 = 
	`mÆloc
(
Àn
+1);

632 
	`DICT_NOTUSED
(
¥ivd©a
);

634 
	`mem˝y
(
c›y
, 
key
, 
Àn
);

635 
c›y
[
Àn
] = '\0';

636  
c›y
;

637 
	}
}

639 
	$_di˘SåögC›yHTKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

640 c⁄° *
key2
)

642 
	`DICT_NOTUSED
(
¥ivd©a
);

644  
	`°rcmp
(
key1
, 
key2
) == 0;

645 
	}
}

647 
	$_di˘SåögDe°ru˘‹
(*
¥ivd©a
, *
key
)

649 
	`DICT_NOTUSED
(
¥ivd©a
);

651 
	`‰ì
(
key
);

652 
	}
}

654 
di˘Ty≥
 
	gdi˘Ty≥HópSåögC›yKey
 = {

655 
_di˘SåögC›yHTHashFun˘i⁄
,

656 
_di˘SåögDup
,

657 
NULL
,

658 
_di˘SåögC›yHTKeyCom∑ª
,

659 
_di˘SåögDe°ru˘‹
,

660 
NULL


665 
di˘Ty≥
 
	gdi˘Ty≥HópSåögs
 = {

666 
_di˘SåögC›yHTHashFun˘i⁄
,

667 
NULL
,

668 
NULL
,

669 
_di˘SåögC›yHTKeyCom∑ª
,

670 
_di˘SåögDe°ru˘‹
,

671 
NULL


676 
di˘Ty≥
 
	gdi˘Ty≥HópSåögC›yKeyVÆue
 = {

677 
_di˘SåögC›yHTHashFun˘i⁄
,

678 
_di˘SåögDup
,

679 
_di˘SåögDup
,

680 
_di˘SåögC›yHTKeyCom∑ª
,

681 
_di˘SåögDe°ru˘‹
,

682 
_di˘SåögDe°ru˘‹
,

	@utils/dict.h

1 #i‚de‡
__DICT_H


2 
	#__DICT_H


	)

4 
	#DICT_OK
 0

	)

5 
	#DICT_ERR
 1

	)

8 
	#DICT_NOTUSED
(
V
Ë((ËV)

	)

10 
	sdi˘E¡ry
 {

11 *
	mkey
;

12 *
	mvÆ
;

13 
di˘E¡ry
 *
	m√xt
;

14 } 
	tdi˘E¡ry
;

16 
	sdi˘Ty≥
 {

17 (*
	mhashFun˘i⁄
)(c⁄° *
	mkey
);

18 *(*
	mkeyDup
)(*
	m¥ivd©a
, c⁄° *
	mkey
);

19 *(*
	mvÆDup
)(*
	m¥ivd©a
, c⁄° *
	mobj
);

20 (*
	mkeyCom∑ª
)(*
	m¥ivd©a
, c⁄° *
	mkey1
, c⁄° *
	mkey2
);

21 (*
	mkeyDe°ru˘‹
)(*
	m¥ivd©a
, *
	mkey
);

22 (*
	mvÆDe°ru˘‹
)(*
	m¥ivd©a
, *
	mobj
);

23 } 
	tdi˘Ty≥
;

28 
	sdi˘ht
 {

29 
di˘E¡ry
 **
	mèbÀ
;

30 
	msize
;

31 
	msizemask
;

32 
	mu£d
;

33 } 
	tdi˘ht
;

35 
	sdi˘
 {

36 
di˘Ty≥
 *
	mty≥
;

37 *
	m¥ivd©a
;

38 
di˘ht
 
	mht
[2];

39 
	mªhashidx
;

40 
	môî©‹s
;

41 } 
	tdi˘
;

47 
	sdi˘Iãøt‹
 {

48 
di˘
 *
	md
;

49 
	mèbÀ
, 
	mödex
, 
	mß„
;

50 
di˘E¡ry
 *
	míåy
, *
	m√xtE¡ry
;

51 } 
	tdi˘Iãøt‹
;

54 
	#DICT_HT_INITIAL_SIZE
 4

	)

57 
	#di˘FªeE¡ryVÆ
(
d
, 
íåy
) \

58 i‡((
d
)->
ty≥
->
vÆDe°ru˘‹
) \

59 (
d
)->
ty≥
->
	`vÆDe°ru˘‹
((d)->
¥ivd©a
, (
íåy
)->
vÆ
)

	)

61 
	#di˘SëHashVÆ
(
d
, 
íåy
, 
_vÆ_
) do { \

62 i‡((
d
)->
ty≥
->
vÆDup
) \

63 
íåy
->
vÆ
 = (
d
)->
ty≥
->
	`vÆDup
((d)->
¥ivd©a
, 
_vÆ_
); \

65 
íåy
->
vÆ
 = (
_vÆ_
); \

66 } 0)

	)

68 
	#di˘FªeE¡ryKey
(
d
, 
íåy
) \

69 i‡((
d
)->
ty≥
->
keyDe°ru˘‹
) \

70 (
d
)->
ty≥
->
	`keyDe°ru˘‹
((d)->
¥ivd©a
, (
íåy
)->
key
)

	)

72 
	#di˘SëHashKey
(
d
, 
íåy
, 
_key_
) do { \

73 i‡((
d
)->
ty≥
->
keyDup
) \

74 
íåy
->
key
 = (
d
)->
ty≥
->
	`keyDup
((d)->
¥ivd©a
, 
_key_
); \

76 
íåy
->
key
 = (
_key_
); \

77 } 0)

	)

79 
	#di˘Com∑ªHashKeys
(
d
, 
key1
, 
key2
) \

80 (((
d
)->
ty≥
->
keyCom∑ª
) ? \

81 (
d
)->
ty≥
->
	`keyCom∑ª
((d)->
¥ivd©a
, 
key1
, 
key2
) : \

82 (
key1
Ë=(
key2
))

	)

84 
	#di˘HashKey
(
d
, 
key
Ë(d)->
ty≥
->
	`hashFun˘i⁄
(key)

	)

86 
	#di˘GëE¡ryKey
(
he
Ë((he)->
key
)

	)

87 
	#di˘GëE¡ryVÆ
(
he
Ë((he)->
vÆ
)

	)

88 
	#di˘SlŸs
(
d
Ë((d)->
ht
[0].
size
+(d)->ht[1].size)

	)

89 
	#di˘Size
(
d
Ë((d)->
ht
[0].
u£d
+(d)->ht[1].u£d)

	)

90 
	#di˘IsRehashög
(
ht
Ë((ht)->
ªhashidx
 !-1)

	)

93 
di˘
 *
di˘Cª©e
(
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
);

94 
di˘Ex∑nd
(
di˘
 *
d
, 
size
);

95 
di˘Add
(
di˘
 *
d
, *
key
, *
vÆ
);

96 
di˘Rïœ˚
(
di˘
 *
d
, *
key
, *
vÆ
);

97 
di˘Dñëe
(
di˘
 *
d
, c⁄° *
key
);

98 
di˘DñëeNoFªe
(
di˘
 *
d
, c⁄° *
key
);

99 
di˘Rñó£
(
di˘
 *
d
);

100 
di˘E¡ry
 * 
di˘Föd
(
di˘
 *
d
, c⁄° *
key
);

101 *
di˘FëchVÆue
(
di˘
 *
d
, c⁄° *
key
);

102 
di˘Resize
(
di˘
 *
d
);

103 
di˘Iãøt‹
 *
di˘GëIãøt‹
(
di˘
 *
d
);

104 
di˘Iãøt‹
 *
di˘GëSa„Iãøt‹
(
di˘
 *
d
);

105 
di˘E¡ry
 *
di˘Next
(
di˘Iãøt‹
 *
ôî
);

106 
di˘Rñó£Iãøt‹
(
di˘Iãøt‹
 *
ôî
);

107 
di˘E¡ry
 *
di˘GëR™domKey
(
di˘
 *
d
);

108 
di˘PrötSèts
(
di˘
 *
d
);

109 
di˘GíHashFun˘i⁄
(c⁄° *
buf
, 
Àn
);

110 
di˘GíCa£HashFun˘i⁄
(c⁄° *
buf
, 
Àn
);

111 
di˘Em±y
(
di˘
 *
d
);

112 
di˘E«bÀResize
();

113 
di˘DißbÀResize
();

114 
di˘Rehash
(
di˘
 *
d
, 
n
);

115 
di˘RehashMûli£c⁄ds
(
di˘
 *
d
, 
ms
);

118 
di˘Ty≥
 
di˘Ty≥HópSåögC›yKey
;

119 
di˘Ty≥
 
di˘Ty≥HópSåögs
;

120 
di˘Ty≥
 
di˘Ty≥HópSåögC›yKeyVÆue
;

	@utils/queue.h

32 #i‚def 
_SYS_QUEUE_H_


33 
	#_SYS_QUEUE_H_


	)

84 
	#LIST_HEAD
(
«me
, 
ty≥
) \

85 
	s«me
 { \

86 
ty≥
 *
lh_fú°
; \

87 }

	)

89 
	#LIST_HEAD_INITIALIZER
(
hód
) \

90 { 
NULL
 }

	)

92 
	#LIST_ENTRY
(
ty≥
) \

94 
ty≥
 *
À_√xt
; \

95 
ty≥
 **
À_¥ev
; \

96 }

	)

101 
	#LIST_INIT
(
hód
) do { \

102 (
hód
)->
lh_fú°
 = 
NULL
; \

103 }  0)

	)

105 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

106 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->fõld.À_√xtË!
NULL
) \

107 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

108 &(
ñm
)->
fõld
.
À_√xt
; \

109 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

110 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

111 }  0)

	)

113 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

114 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

115 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

116 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

117 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

118 }  0)

	)

120 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

121 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
NULL
) \

122 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

123 (
hód
)->
lh_fú°
 = (
ñm
); \

124 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

125 }  0)

	)

127 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

128 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

129 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

130 (
ñm
)->
fõld
.
À_¥ev
; \

131 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

132 }  0)

	)

134 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

135 (
v¨
Ë((
hód
)->
lh_fú°
); \

136 (
v¨
); \

137 (
v¨
Ë((v¨)->
fõld
.
À_√xt
))

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

143 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

144 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

150 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

151 
	s«me
 { \

152 
ty≥
 *
¶h_fú°
; \

153 }

	)

155 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

156 { 
NULL
 }

	)

158 
	#SLIST_ENTRY
(
ty≥
) \

160 
ty≥
 *
¶e_√xt
; \

161 }

	)

166 
	#SLIST_INIT
(
hód
) do { \

167 (
hód
)->
¶h_fú°
 = 
NULL
; \

168 }  0)

	)

170 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

171 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

172 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

173 }  0)

	)

175 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

176 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

177 (
hód
)->
¶h_fú°
 = (
ñm
); \

178 }  0)

	)

180 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

181 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

182 }  0)

	)

184 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

185 i‡((
hód
)->
¶h_fú°
 =(
ñm
)) { \

186 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

189 
ty≥
 *
cuªlm
 = (
hód
)->
¶h_fú°
; \

190 
cuªlm
->
fõld
.
¶e_√xt
 !(
ñm
)) \

191 
cuªlm
 = cuªlm->
fõld
.
¶e_√xt
; \

192 
cuªlm
->
fõld
.
¶e_√xt
 = \

193 
cuªlm
->
fõld
.
¶e_√xt
->field.sle_next; \

195 }  0)

	)

197 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

198 (
v¨
Ë(
hód
)->
¶h_fú°
; (v¨); (v¨Ë(v¨)->
fõld
.
¶e_√xt
)

	)

203 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

204 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

205 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

211 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

212 
	s«me
 { \

213 
ty≥
 *
°qh_fú°
; \

214 
ty≥
 **
°qh_œ°
; \

215 }

	)

217 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

218 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

220 
	#STAILQ_ENTRY
(
ty≥
) \

222 
ty≥
 *
°qe_√xt
; \

223 }

	)

228 
	#STAILQ_INIT
(
hód
) do { \

229 (
hód
)->
°qh_fú°
 = 
NULL
; \

230 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

231 }  0)

	)

233 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

234 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
hód
)->
°qh_fú°
Ë=
NULL
) \

235 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

236 (
hód
)->
°qh_fú°
 = (
ñm
); \

237 }  0)

	)

239 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

240 (
ñm
)->
fõld
.
°qe_√xt
 = 
NULL
; \

241 *(
hód
)->
°qh_œ°
 = (
ñm
); \

242 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

243 }  0)

	)

245 
	#STAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

246 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
li°ñm
)->fõld.°qe_√xtË=
NULL
)\

247 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

248 (
li°ñm
)->
fõld
.
°qe_√xt
 = (
ñm
); \

249 }  0)

	)

251 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

252 i‡(((
hód
)->
°qh_fú°
 = (hód)->°qh_fú°->
fõld
.
°qe_√xt
Ë=
NULL
) \

253 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

254 }  0)

	)

256 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

257 i‡((
hód
)->
°qh_fú°
 =(
ñm
)) { \

258 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

260 
ty≥
 *
cuªlm
 = (
hód
)->
°qh_fú°
; \

261 
cuªlm
->
fõld
.
°qe_√xt
 !(
ñm
)) \

262 
cuªlm
 = cuªlm->
fõld
.
°qe_√xt
; \

263 i‡((
cuªlm
->
fõld
.
°qe_√xt
 = \

264 
cuªlm
->
fõld
.
°qe_√xt
->fõld.°qe_√xtË=
NULL
) \

265 (
hód
)->
°qh_œ°
 = &(
cuªlm
)->
fõld
.
°qe_√xt
; \

267 }  0)

	)

269 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

270 (
v¨
Ë((
hód
)->
°qh_fú°
); \

271 (
v¨
); \

272 (
v¨
Ë((v¨)->
fõld
.
°qe_√xt
))

	)

274 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

275 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

276 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

277 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

278 
	`STAILQ_INIT
((
hód2
)); \

280 }  0)

	)

285 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

286 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

287 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

293 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

294 
	s«me
 { \

295 
ty≥
 *
sqh_fú°
; \

296 
ty≥
 **
sqh_œ°
; \

297 }

	)

299 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

300 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

302 
	#SIMPLEQ_ENTRY
(
ty≥
) \

304 
ty≥
 *
sqe_√xt
; \

305 }

	)

310 
	#SIMPLEQ_INIT
(
hód
) do { \

311 (
hód
)->
sqh_fú°
 = 
NULL
; \

312 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

313 }  0)

	)

315 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

316 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

317 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

318 (
hód
)->
sqh_fú°
 = (
ñm
); \

319 }  0)

	)

321 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

322 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

323 *(
hód
)->
sqh_œ°
 = (
ñm
); \

324 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

325 }  0)

	)

327 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

328 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

329 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

330 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

331 }  0)

	)

333 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

334 i‡(((
hód
)->
sqh_fú°
 = (hód)->sqh_fú°->
fõld
.
sqe_√xt
Ë=
NULL
) \

335 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

336 }  0)

	)

338 
	#SIMPLEQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

339 i‡((
hód
)->
sqh_fú°
 =(
ñm
)) { \

340 
	`SIMPLEQ_REMOVE_HEAD
((
hód
), 
fõld
); \

342 
ty≥
 *
cuªlm
 = (
hód
)->
sqh_fú°
; \

343 
cuªlm
->
fõld
.
sqe_√xt
 !(
ñm
)) \

344 
cuªlm
 = cuªlm->
fõld
.
sqe_√xt
; \

345 i‡((
cuªlm
->
fõld
.
sqe_√xt
 = \

346 
cuªlm
->
fõld
.
sqe_√xt
->fõld.sqe_√xtË=
NULL
) \

347 (
hód
)->
sqh_œ°
 = &(
cuªlm
)->
fõld
.
sqe_√xt
; \

349 }  0)

	)

351 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

352 (
v¨
Ë((
hód
)->
sqh_fú°
); \

353 (
v¨
); \

354 (
v¨
Ë((v¨)->
fõld
.
sqe_√xt
))

	)

359 
	#SIMPLEQ_EMPTY
(
hód
Ë((hód)->
sqh_fú°
 =
NULL
)

	)

360 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

361 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

367 
	#_TAILQ_HEAD
(
«me
, 
ty≥
, 
quÆ
) \

368 
	s«me
 { \

369 
quÆ
 
ty≥
 *
tqh_fú°
; \

370 
quÆ
 
ty≥
 *quÆ *
tqh_œ°
; \

371 }

	)

372 
	#TAILQ_HEAD
(
«me
, 
ty≥
Ë
	`_TAILQ_HEAD
“ame, ty≥,)

	)

374 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

375 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

377 
	#_TAILQ_ENTRY
(
ty≥
, 
quÆ
) \

379 
quÆ
 
ty≥
 *
tqe_√xt
; \

380 
quÆ
 
ty≥
 *quÆ *
tqe_¥ev
; \

381 }

	)

382 
	#TAILQ_ENTRY
(
ty≥
Ë
	`_TAILQ_ENTRY
(ty≥,)

	)

387 
	#TAILQ_INIT
(
hód
) do { \

388 (
hód
)->
tqh_fú°
 = 
NULL
; \

389 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

390 }  0)

	)

392 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

393 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
NULL
) \

394 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

395 &(
ñm
)->
fõld
.
tqe_√xt
; \

397 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

398 (
hód
)->
tqh_fú°
 = (
ñm
); \

399 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

400 }  0)

	)

402 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

403 (
ñm
)->
fõld
.
tqe_√xt
 = 
NULL
; \

404 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

405 *(
hód
)->
tqh_œ°
 = (
ñm
); \

406 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

407 }  0)

	)

409 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

410 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->fõld.tqe_√xtË!
NULL
)\

411 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

412 &(
ñm
)->
fõld
.
tqe_√xt
; \

414 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

415 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

416 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

417 }  0)

	)

419 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

420 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

421 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

422 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

423 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

424 }  0)

	)

426 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

427 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
NULL
) \

428 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

429 (
ñm
)->
fõld
.
tqe_¥ev
; \

431 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

432 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

433 }  0)

	)

435 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

436 (
v¨
Ë((
hód
)->
tqh_fú°
); \

437 (
v¨
); \

438 (
v¨
Ë((v¨)->
fõld
.
tqe_√xt
))

	)

440 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

441 (
v¨
Ë(*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_last)); \

442 (
v¨
); \

443 (
v¨
Ë(*(((
hód«me
 *)((v¨)->
fõld
.
tqe_¥ev
))->
tqh_œ°
)))

	)

445 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

446 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

447 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

448 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

449 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

450 
	`TAILQ_INIT
((
hód2
)); \

452 }  0)

	)

457 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

458 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

459 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

461 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

462 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

463 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

464 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

470 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

471 
	s«me
 { \

472 
ty≥
 *
cqh_fú°
; \

473 
ty≥
 *
cqh_œ°
; \

474 }

	)

476 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

477 { (*)&
hód
, (*)&hód }

	)

479 
	#CIRCLEQ_ENTRY
(
ty≥
) \

481 
ty≥
 *
cqe_√xt
; \

482 
ty≥
 *
cqe_¥ev
; \

483 }

	)

488 
	#CIRCLEQ_INIT
(
hód
) do { \

489 (
hód
)->
cqh_fú°
 = (*)(head); \

490 (
hód
)->
cqh_œ°
 = (*)(head); \

491 }  0)

	)

493 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

494 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

495 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

496 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

497 (
hód
)->
cqh_œ°
 = (
ñm
); \

499 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

500 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

501 }  0)

	)

503 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

504 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

505 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

506 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

507 (
hód
)->
cqh_fú°
 = (
ñm
); \

509 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

510 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

511 }  0)

	)

513 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

514 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

515 (
ñm
)->
fõld
.
cqe_¥ev
 = (*)(
hód
); \

516 i‡((
hód
)->
cqh_œ°
 == (*)(head)) \

517 (
hód
)->
cqh_œ°
 = (
ñm
); \

519 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

520 (
hód
)->
cqh_fú°
 = (
ñm
); \

521 }  0)

	)

523 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

524 (
ñm
)->
fõld
.
cqe_√xt
 = (*)(
hód
); \

525 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

526 i‡((
hód
)->
cqh_fú°
 == (*)(head)) \

527 (
hód
)->
cqh_fú°
 = (
ñm
); \

529 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

530 (
hód
)->
cqh_œ°
 = (
ñm
); \

531 }  0)

	)

533 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

534 i‡((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

535 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

537 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

538 (
ñm
)->
fõld
.
cqe_¥ev
; \

539 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

540 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

542 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

543 (
ñm
)->
fõld
.
cqe_√xt
; \

544 }  0)

	)

546 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

547 (
v¨
Ë((
hód
)->
cqh_fú°
); \

548 (
v¨
Ë!(c⁄° *)(
hód
); \

549 (
v¨
Ë((v¨)->
fõld
.
cqe_√xt
))

	)

551 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

552 (
v¨
Ë((
hód
)->
cqh_œ°
); \

553 (
v¨
Ë!(c⁄° *)(
hód
); \

554 (
v¨
Ë((v¨)->
fõld
.
cqe_¥ev
))

	)

559 
	#CIRCLEQ_EMPTY
(
hód
Ë((hód)->
cqh_fú°
 =(*)(hód))

	)

560 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

561 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

562 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

563 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

565 
	#CIRCLEQ_LOOP_NEXT
(
hód
, 
ñm
, 
fõld
) \

566 (((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

567 ? ((
hód
)->
cqh_fú°
) \

568 : (
ñm
->
fõld
.
cqe_√xt
))

	)

569 
	#CIRCLEQ_LOOP_PREV
(
hód
, 
ñm
, 
fõld
) \

570 (((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

571 ? ((
hód
)->
cqh_œ°
) \

572 : (
ñm
->
fõld
.
cqe_¥ev
))

	)

	@
1
.
0
91
1482
config/config.c
config/config.h
config/tableMetadata.c
config/tableMetadata.h
config/test.c
db/adlist.c
db/adlist.h
db/auxiRBtree.h
db/bloomFilter.c
db/bloomFilter.h
db/column.c
db/column.h
db/columnFamily.c
db/columnFamily.h
db/columnFamilyStore.c
db/columnFamilyStore.h
db/commitLog.c
db/commitLog.h
db/dataModel.c
db/dataModel.h
db/indexHelper.c
db/indexHelper.h
db/memTable.c
db/memTable.h
db/queryPath.c
db/queryPath.h
db/rowMutation.c
db/rowMutation.h
db/ssTable.c
db/ssTable.h
db/superColumn.c
db/superColumn.h
db/test.c
db/tree.h
debug/log.c
debug/log.h
debug/test.c
include/init.h
include/seda.h
mem/mem.h
mem/test.c
seda/handler.c
seda/handler.h
seda/queue.h
seda/seda.h
seda/stage.c
seda/stage.h
seda/stage_manager.c
seda/test_seda.c
seda/thread.c
seda/thread.h
seda/tree.h
serialize/buffer.c
serialize/buffer.h
serialize/serialize.c
serialize/serialize.h
serialize/test.c
splay_rb_tree/auxiRBtree.h
splay_rb_tree/test.c
splay_rb_tree/test_tree.c
splay_rb_tree/tree.h
test/a.h
test/autoconfig/config.h
test/autoconfig/test-1.0/test.c
test/autoconfig/test.c
test/b.c
test/c.c
test/ia/ia.c
test/ia/ia.h
test/kk.c
test/ss.c
test/system/const.c
test/system/dict.c
test/system/dict.h
test/system/hash.c
test/system/hash.h
test/system/test.c
udpserver/log.c
udpserver/log.h
udpserver/server.c
udpserver/slist.c
udpserver/slist.h
udpserver/udpsocket.c
udpserver/udpsocket.h
utils/auxilFile.c
utils/auxilFile.h
utils/crc32.c
utils/crc32.h
utils/dict.c
utils/dict.h
utils/queue.h
