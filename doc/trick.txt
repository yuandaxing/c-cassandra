书生2011-09-30 14:54:34
你看下乐观锁的原理是不是跟那个类似啊
踏雪飞鸿2011-09-30 14:55:18
不是的，memcache中是通过cas check and set 的方式实现乐观锁的
踏雪飞鸿2011-09-30 14:55:46
cas就是实现的乐观锁
书生2011-09-30 14:55:55
。。。check and set这个是java里面的那个并行机制么？
踏雪飞鸿2011-09-30 14:57:08
不知道，memcache中有这个
踏雪飞鸿2011-09-30 14:57:26
牛逼啊
书生2011-09-30 14:58:09
。。。
书生2011-09-30 14:59:03
乐观锁也是读版本号，然后加1什么的，你这个refcount是不是引用计数？跟inode的那个一样？
踏雪飞鸿2011-09-30 14:59:49
不是的，跟inode不一样
书生2011-09-30 15:00:33
额。。哥不懂
书生2011-09-30 15:00:38
哥只知道乐观锁
踏雪飞鸿2011-09-30 15:00:39
inode这个主要是为了防止内存泄漏，当refCount变为0时，由最后一个引用释放内存
书生2011-09-30 15:01:08
inode的引用计数不只是为了这个吧？
踏雪飞鸿2011-09-30 15:01:22
cas中用的叫做version，它是每更新一次+1
书生2011-09-30 15:01:23
如果有两个进程打开一个文件，inode计数就会是2吧？
踏雪飞鸿2011-09-30 15:01:32
恩
踏雪飞鸿2011-09-30 15:01:53
计数是指每多一个引用+1
书生2011-09-30 15:02:09
是滴
踏雪飞鸿2011-09-30 15:02:18
version是不会-1的
踏雪飞鸿2011-09-30 15:02:28
refcount可以-1
书生2011-09-30 15:02:31
对
踏雪飞鸿2011-09-30 15:02:38

书生2011-09-30 15:02:39
这就跟inode类似了吧？
踏雪飞鸿2011-09-30 15:02:45
恩
书生2011-09-30 15:02:46
inode的引用计数不是一样可以减么
踏雪飞鸿2011-09-30 15:02:52
是
书生2011-09-30 15:03:15
那这个怎么保证两个事物更新同一个数据呢？
踏雪飞鸿2011-09-30 15:03:18
不过memcache中的设计真的非常巧妙
踏雪飞鸿2011-09-30 15:04:05
它是直接replace，将一个删除，一个加入
书生2011-09-30 15:04:18
。。。
踏雪飞鸿2011-09-30 15:05:19
这种方法对于一个get，一个update的效率可以提高
书生2011-09-30 15:05:49
额。。。
书生2011-09-30 15:05:56
get的时候可以update么？
踏雪飞鸿2011-09-30 15:06:18
比方说有5个操作是对数据keyA进行，3个get，两个update
踏雪飞鸿2011-09-30 15:07:47
update分别指向不同的内存，而3个get指向相同的内存，这样就不回出问题
书生2011-09-30 15:08:13
额，数据生成副本么？
书生2011-09-30 15:08:58
如何保证update更新的数据不覆盖get的读数据呢？
踏雪飞鸿2011-09-30 15:09:07
对，更新才需要重新分配新的内存，而get是不需要分配内存的，
书生2011-09-30 15:09:26
这跟COW很像
书生2011-09-30 15:09:42
写时复制策略么？
踏雪飞鸿2011-09-30 15:09:47
update是更新获取一块新的内存，然后替换
踏雪飞鸿2011-09-30 15:10:11
有点这个意思，你说的很对
